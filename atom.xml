<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://hellcy.github.io/atom.xml" rel="self"/>
  
  <link href="http://hellcy.github.io/"/>
  <updated>2022-02-10T14:10:26.530Z</updated>
  <id>http://hellcy.github.io/</id>
  
  <author>
    <name>Yuan Cheng</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Polymorphism in Java</title>
    <link href="http://hellcy.github.io/2022/02/10/Polymorphism-in-Java/"/>
    <id>http://hellcy.github.io/2022/02/10/Polymorphism-in-Java/</id>
    <published>2022-02-10T05:16:18.000Z</published>
    <updated>2022-02-10T14:10:26.530Z</updated>
    
    <content type="html"><![CDATA[<h1 id="编译时多态"><a class="markdownIt-Anchor" href="#编译时多态"></a> 编译时多态</h1><ul><li>设计时多态方法重载</li></ul><h1 id="运行时多态"><a class="markdownIt-Anchor" href="#运行时多态"></a> 运行时多态</h1><ul><li>程序运行时动态决定调用那个方法</li></ul><h1 id="必要条件"><a class="markdownIt-Anchor" href="#必要条件"></a> 必要条件</h1><ol><li>满足继承关系</li><li>父类引用指向子类对象</li></ol><h1 id="向上转型"><a class="markdownIt-Anchor" href="#向上转型"></a> 向上转型</h1><ul><li>父类引用指向子类实例，可以调用子类重写父类的方法以及父类派生的方法，无法调用子类独有的方法</li><li>父类中的静态方法无法被子类重写，所以向上转型之后，只能调用到父类原有的静态方法</li></ul><h1 id="向下转型"><a class="markdownIt-Anchor" href="#向下转型"></a> 向下转型</h1><ul><li>子类引用指向父类对象，此处可以使用<code>instanceof</code>进行检查，避免类型转换时的安全性问题</li><li>可以调用子类独有的方法</li></ul><h1 id="抽象类-abstract-class"><a class="markdownIt-Anchor" href="#抽象类-abstract-class"></a> 抽象类 abstract class</h1><ul><li>限制实例化</li><li>只能被继承</li><li>应用场景： 某个父类只是知道其子类应该包含怎样的方法，但无法准确知道这些子类如何实现这些方法</li></ul><h1 id="抽象方法-abstract-method"><a class="markdownIt-Anchor" href="#抽象方法-abstract-method"></a> 抽象方法 abstract method</h1><ul><li>不能有方法体</li><li>必须由子类实现</li><li>子类如果没有重写父类的所有抽象方法，则也要定义为抽象类</li></ul><h1 id="接口-interface"><a class="markdownIt-Anchor" href="#接口-interface"></a> 接口 Interface</h1><ul><li>当多个类具有相同能力的时候，可以使用接口抽象出相同的能力</li><li>接口定义了某一批类所需要遵守的规范</li><li>接口不关心这些类的内部数据，也不关心这些类里的方法的实现细节，它只规定这些类里必须提供某些方法</li><li>接口方法可以不写<code>abstract</code>关键字，并且默认为public的访问权限</li><li>当类实现接口时，需要去实现接口中的所有抽象方法，否则需要将该类设置为抽象类</li><li>接口中可以定义常量，默认为<code>public static final</code></li></ul><h2 id="默认方法"><a class="markdownIt-Anchor" href="#默认方法"></a> 默认方法</h2><ul><li>自JDK1.8之后，接口中可以存在默认方法，使用<code>default</code>关键字定义</li><li>默认方法可以带方法体，子类实现接口时可以不用实现默认方法</li><li>子类可以重写默认方法，并可以通过接口的引用调用</li></ul><h2 id="静态方法"><a class="markdownIt-Anchor" href="#静态方法"></a> 静态方法</h2><ul><li>自JDK1.8之后，接口中可以存在静态方法，使用<code>static</code>关键字定义</li><li>静态方法可以带方法体，子类可以通过使用接口名访问接口的静态方法</li></ul><h2 id="多重实现"><a class="markdownIt-Anchor" href="#多重实现"></a> 多重实现</h2><ul><li>子类可以继承一个父类，但是可以实现多个接口</li><li>当多个接口中具有相同签名的方法时，子类需要重写方法</li><li>当父类和接口具有相同签名的方法时，父类方法具有优先权</li><li>当父类和接口具有相同名字的变量时，子类需要重新定义该变量，父类中的变量不具有优先权</li></ul><h2 id="接口的继承"><a class="markdownIt-Anchor" href="#接口的继承"></a> 接口的继承</h2><ul><li>接口也可以实现继承关系</li><li>接口可以继承多个父接口</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public interface ParentOne &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public interface ParentTwo &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public interface Child extends ParentOne, ParentTwo &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="内部类"><a class="markdownIt-Anchor" href="#内部类"></a> 内部类</h1><ul><li>内部类提供了更好的封装，不允许其他外部类访问内部类的信息</li></ul><h2 id="成员内部类"><a class="markdownIt-Anchor" href="#成员内部类"></a> 成员内部类</h2><ul><li>最常见的内部类，也称为普通内部类</li><li>内部类在外部使用时，无法直接实例化，需要借由外部类信息才能完成实例化</li><li>内部类的访问修饰符，可以是任意的，但是访问权限会受到修饰符的影响</li><li>内部类可以直接访问外部类的成员（包括成员属性和成员方法），如果出现同名属性，优先访问内部类中定义的</li><li>外部类访问内部类的信息需要通过内部类的实例，无法直接访问</li><li>内部类编译后得class文件名：外部类$内部类.class</li></ul><h3 id="获取内部类对象实例"><a class="markdownIt-Anchor" href="#获取内部类对象实例"></a> 获取内部类对象实例</h3><ol><li>new 外部类.new 内部类</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person.Heart myHeart &#x3D; new Person().new Heart();</span><br></pre></td></tr></table></figure><ol start="2"><li>外部类对象.new 内部类</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myHeart &#x3D; myPerson.new Heart();</span><br></pre></td></tr></table></figure><ol start="3"><li>外部类对象.获取方法</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myHeart &#x3D; myPerson.getHeart();</span><br></pre></td></tr></table></figure><h2 id="静态内部类"><a class="markdownIt-Anchor" href="#静态内部类"></a> 静态内部类</h2><ul><li>静态内部类中，只能直接访问外部类的静态成员</li><li>需要使用外部类的实例对象来访问非静态成员</li><li>访问静态内部类对象实例时，可以不依赖于外部类对象</li></ul><h3 id="获取静态内部类实例"><a class="markdownIt-Anchor" href="#获取静态内部类实例"></a> 获取静态内部类实例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person.Heart myHeart &#x3D; new Person.Heart();</span><br></pre></td></tr></table></figure><h2 id="方法内部类"><a class="markdownIt-Anchor" href="#方法内部类"></a> 方法内部类</h2><ul><li>定义在外部类方法中的内部类，也成为局部内部类</li><li>方法内部类中无法定义静态成员</li><li>类中可以使用final，abstract成员</li><li>和方法内部成员使用规则一样，class前面不可以添加public，private，protected，static等关键字</li></ul><h2 id="匿名内部类"><a class="markdownIt-Anchor" href="#匿名内部类"></a> 匿名内部类</h2><ul><li>将类的定义和类的创建放在一起完成，程序只会用到一次类的实例，所以类名无关紧要</li><li>对于抽象类Person来说，如果我们想调用其中的抽象方法，一种做法是创建一个实现read方法的子类</li><li>但是如果这个子类只会被用到一次，那这个子类的名字就不重要，就可以使用匿名内部类来解决</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public abstract class Person &#123;</span><br><span class="line">    public abstract void read();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class PersonTest &#123;</span><br><span class="line">    public void getRead(Person person) &#123;</span><br><span class="line">        person.read();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        PersonTest personTest &#x3D; new PersonTest();</span><br><span class="line"></span><br><span class="line">        personTest.getRead(new Person() &#123;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void read() &#123;</span><br><span class="line">                System.out.println(&quot;implement read method in Person parent abstract class&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;编译时多态&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#编译时多态&quot;&gt;&lt;/a&gt; 编译时多态&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;设计时多态方法重载&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;运行时多态&quot;&gt;&lt;a class=&quot;markdownIt-</summary>
      
    
    
    
    
    <category term="Java" scheme="http://hellcy.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>TCP/IP</title>
    <link href="http://hellcy.github.io/2021/05/26/TCP-IP/"/>
    <id>http://hellcy.github.io/2021/05/26/TCP-IP/</id>
    <published>2021-05-26T06:17:17.000Z</published>
    <updated>2021-05-26T08:00:46.307Z</updated>
    
    
    
    
    
    <category term="TCP/IP" scheme="http://hellcy.github.io/tags/TCP-IP/"/>
    
  </entry>
  
  <entry>
    <title>C# LINQ</title>
    <link href="http://hellcy.github.io/2021/04/20/C-LINQ/"/>
    <id>http://hellcy.github.io/2021/04/20/C-LINQ/</id>
    <published>2021-04-20T13:07:27.000Z</published>
    <updated>2021-05-24T07:27:02.658Z</updated>
    
    <content type="html"><![CDATA[<h2 id="linq"><a class="markdownIt-Anchor" href="#linq"></a> LINQ</h2><ul><li>SQL-like syntax in C# and Visual Basic</li><li>Query any type of collection (<code>IEnumerable&lt;T&gt;</code>)</li><li>Query external data sources (xml, databases, JSON, CSV)</li></ul><h3 id="sql-query-vs-linq-query-syntax"><a class="markdownIt-Anchor" href="#sql-query-vs-linq-query-syntax"></a> SQL Query vs LINQ Query Syntax</h3><table><thead><tr><th>SQL</th><th>LINQ</th></tr></thead><tbody><tr><td>SELECT * FROM Products</td><td>FROM prod IN Products SELECT prod</td></tr><tr><td>SELECT Name FROM Products</td><td>FROM prod in Products SELECT <a href="http://prod.Name">prod.Name</a></td></tr><tr><td>SELECT * FROM Products WHERE ListPrice &gt; 10</td><td>FROM prod in Products WHERE prod.ListPrice &gt; 10 SELECT prod</td></tr></tbody></table><h3 id="two-linq-syntaxes"><a class="markdownIt-Anchor" href="#two-linq-syntaxes"></a> Two LINQ Syntaxes</h3><table><thead><tr><th>Query</th><th>Method</th></tr></thead><tbody><tr><td>FROM prod in Products SELECT prod</td><td>Products.Select(prod =&gt; prod)</td></tr><tr><td>FROM prod in Products SELECT <a href="http://prod.Name">prod.Name</a></td><td>Products.Select(prod =&gt; <a href="http://prod.Name">prod.Name</a>)</td></tr><tr><td>FROM prod in Products WHERE prod.ListPrice &gt; 10 SELECT prod</td><td>Products.Where(prod =&gt; prod.ListPrice &gt; 10).Select(prod =&gt; prod)</td></tr></tbody></table><h3 id="linq-operations"><a class="markdownIt-Anchor" href="#linq-operations"></a> LINQ Operations</h3><ul><li>Select</li><li>Projection (Change shape, select only certain properties from an object)</li><li>Order (ascending/descending)</li><li>Get an Element (find, first, last, single)</li><li>Filter (where)</li><li>Iteration/Partioning (foreach, skip, take)</li><li>Quantify (any, all, contains)</li><li>Set Comparison (equal, except, intersection)</li><li>Set Operations (union, concat)</li><li>Joining (inner joins, outer joins)</li><li>Grouping (groupby, subquery, groupjoin)</li><li>Distinct Sets (distinct)</li><li>Aggregation (count, sum, min, max, average)</li></ul><h2 id="select-and-order-operations"><a class="markdownIt-Anchor" href="#select-and-order-operations"></a> Select and Order Operations</h2><h3 id="projection-only-select-specific-columns-from-an-object"><a class="markdownIt-Anchor" href="#projection-only-select-specific-columns-from-an-object"></a> Projection (only select specific columns from an object)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">if (UseQuerySyntax)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Query Syntax</span><br><span class="line">    Products &#x3D; (from prod in Products</span><br><span class="line">                select new Product</span><br><span class="line">                &#123;</span><br><span class="line">                    ProductID &#x3D; prod.ProductID,</span><br><span class="line">                    Name &#x3D; prod.Name,</span><br><span class="line">                    Size &#x3D; prod.Size,</span><br><span class="line">                &#125;).ToList();</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Method Syntax</span><br><span class="line">    Products &#x3D; Products.Select(prod &#x3D;&gt; new Product</span><br><span class="line">    &#123;</span><br><span class="line">        ProductID &#x3D; prod.ProductID,</span><br><span class="line">        Name &#x3D; prod.Name,</span><br><span class="line">        Size &#x3D; prod.Size</span><br><span class="line">    &#125;).ToList();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="projection-with-anonymous-class"><a class="markdownIt-Anchor" href="#projection-with-anonymous-class"></a> Projection with Anonymous Class</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">if (UseQuerySyntax)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Query Syntax</span><br><span class="line">    var products &#x3D; (from prod in Products</span><br><span class="line">                    select new</span><br><span class="line">                    &#123;</span><br><span class="line">                        Identifier &#x3D; prod.ProductID,</span><br><span class="line">                        ProductName &#x3D; prod.Name,</span><br><span class="line">                        ProductSize &#x3D; prod.Size</span><br><span class="line">                    &#125;);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Loop through anonymous class</span><br><span class="line">    foreach (var prod in products)</span><br><span class="line">    &#123;</span><br><span class="line">        sb.AppendLine($&quot;Product ID: &#123;prod.Identifier&#125;&quot;);</span><br><span class="line">        sb.AppendLine($&quot;   Product Name: &#123;prod.ProductName&#125;&quot;);</span><br><span class="line">        sb.AppendLine($&quot;   Product Size: &#123;prod.ProductSize&#125;&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Method Syntax</span><br><span class="line">    var products &#x3D; Products.Select(prod &#x3D;&gt; new</span><br><span class="line">    &#123;</span><br><span class="line">        Identifier &#x3D; prod.ProductID,</span><br><span class="line">        ProductName &#x3D; prod.Name,</span><br><span class="line">        ProductSize &#x3D; prod.Size</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Loop through anonymous class</span><br><span class="line">    foreach (var prod in products)</span><br><span class="line">    &#123;</span><br><span class="line">        sb.AppendLine($&quot;Product ID: &#123;prod.Identifier&#125;&quot;);</span><br><span class="line">        sb.AppendLine($&quot;   Product Name: &#123;prod.ProductName&#125;&quot;);</span><br><span class="line">        sb.AppendLine($&quot;   Product Size: &#123;prod.ProductSize&#125;&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ordering-data"><a class="markdownIt-Anchor" href="#ordering-data"></a> Ordering Data</h3><p>When using Method Syntax to order data, the .Select() method is optional when you are simply selecting the complete object as the return value</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public void OrderBy()</span><br><span class="line">&#123;</span><br><span class="line">    if (UseQuerySyntax)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; Query Syntax</span><br><span class="line">        Products &#x3D; (from prod in Products orderby prod.Name select prod).ToList();</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; Method Syntax</span><br><span class="line">        Products &#x3D; Products.OrderBy(prod &#x3D;&gt; prod.Name).ToList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ResultText &#x3D; $&quot;Total Products: &#123;Products.Count&#125;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Order by Descending</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public void OrderByDescending()</span><br><span class="line">&#123;</span><br><span class="line">    if (UseQuerySyntax)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; Query Syntax</span><br><span class="line">        Products &#x3D; (from prod in Products orderby prod.Name descending select prod).ToList();</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; Method Syntax</span><br><span class="line">        Products &#x3D; Products.OrderByDescending(prod &#x3D;&gt; prod.Name).ToList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ResultText &#x3D; $&quot;Total Products: &#123;Products.Count&#125;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="order-by-two-fields"><a class="markdownIt-Anchor" href="#order-by-two-fields"></a> Order by Two Fields</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public void OrderByTwoFields()</span><br><span class="line">&#123;</span><br><span class="line">    if (UseQuerySyntax)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; Query Syntax</span><br><span class="line">        Products &#x3D; (from prod in Products orderby prod.Color descending, prod.Name).ToList();</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; Method Syntax</span><br><span class="line">        Products &#x3D; Products.OrderByDescending(prod &#x3D;&gt; prod.Color).ThenBy(prod &#x3D;&gt; prod.Name).ToList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ResultText &#x3D; $&quot;Total Products: &#123;Products.Count&#125;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="extract-multiple-or-single-elements"><a class="markdownIt-Anchor" href="#extract-multiple-or-single-elements"></a> Extract Multiple or Single Elements</h2><h3 id="where-expression"><a class="markdownIt-Anchor" href="#where-expression"></a> Where Expression</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public void WhereExpression()</span><br><span class="line">&#123;</span><br><span class="line">    string search &#x3D; &quot;L&quot;;</span><br><span class="line"></span><br><span class="line">    if (UseQuerySyntax)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; Query Syntax</span><br><span class="line">        Products &#x3D; (from prod in Products where prod.Name.StartsWith(search) select prod).ToList();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; Method Syntax</span><br><span class="line">        Products &#x3D; Products.Where(prod &#x3D;&gt; prod.Name.StartsWith(search)).ToList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ResultText &#x3D; $&quot;Total Products: &#123;Products.Count&#125;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Where with multiple fields</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public void WhereTwoFields()</span><br><span class="line">&#123;</span><br><span class="line">    string search &#x3D; &quot;L&quot;;</span><br><span class="line">    decimal cost &#x3D; 100;</span><br><span class="line"></span><br><span class="line">    if (UseQuerySyntax)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; Query Syntax</span><br><span class="line">        Products &#x3D; (from prod in Products where prod.Name.StartsWith(search) &amp;&amp; prod.StandardCost &gt; cost).ToList();</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; Method Syntax</span><br><span class="line">        Products &#x3D; Products.Where(prod &#x3D;&gt; prod.Name.StartsWith(search) &amp;&amp; prod.StandardCost &gt; cost).ToList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ResultText &#x3D; $&quot;Total Products: &#123;Products.Count&#125;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Using Custom Extension Method</li></ul><h3 id="extension-method"><a class="markdownIt-Anchor" href="#extension-method"></a> Extension Method</h3><p>Extension methods enable you to “add” methods to existing types without creating a new derived type, recompiling, or otherwise modifying the original type. Extension methods are static methods, but they’re called as if they were instance methods on the extended type.</p><p>The most common extension methods are the LINQ standard query operators that add query functionality to the existing <code>System.Collections.IEnumerable</code> and <code>System.Collections.Generic.IEnumerable&lt;T&gt;</code> types.</p><p>Extension methods are defined as <code>static</code> methods but are called by using instance method syntax. Their first parameter specifies which type the method operates on. The parameter is preceded by the <code>this</code> modifier.</p><p>Extension method is just a static method under the hood.</p><p>In the example, the result of <code>(from prod in Products select prod)</code> is an <code>IEnumerable&lt;Product&gt;</code> which is why <code>ByColor()</code> can be applied to this</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public static IEnumerable&lt;Product&gt; ByColor(</span><br><span class="line">    this IEnumerable&lt;Product&gt; query, string color)</span><br><span class="line">&#123;</span><br><span class="line">    return query.Where(prod &#x3D;&gt; prod.Color &#x3D;&#x3D; color);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (UseQuerySyntax)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Query Syntax</span><br><span class="line">    Products &#x3D; (from prod in Products select prod).ByColor(search).ToList();</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Method Syntax</span><br><span class="line">    Products &#x3D; Products.ByColor(search).ToList();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="select-a-single-item"><a class="markdownIt-Anchor" href="#select-a-single-item"></a> Select a Single Item</h3><ul><li>First, will throw an Exception if item not found.</li><li>Last, same as First</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">try</span><br><span class="line">&#123;</span><br><span class="line">    if (UseQuerySyntax)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; Query Syntax</span><br><span class="line">        value &#x3D; (from prod in Products select prod).First(prod &#x3D;&gt; prod.Color &#x3D;&#x3D; search);</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; Method Syntax</span><br><span class="line">        value &#x3D; Products.First(prod &#x3D;&gt; prod.Color &#x3D;&#x3D; search);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ResultText &#x3D; $&quot;Found: &#123;value&#125;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">catch</span><br><span class="line">&#123;</span><br><span class="line">    ResultText &#x3D; &quot;Not Found&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>FirstOrDefault, value will be null if item not found, will not throw an Exception</li><li>LastOrDefault, same as FirstOrDefault</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">if (UseQuerySyntax)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Query Syntax</span><br><span class="line">    value &#x3D; (from prod in Products select prod).First(prod &#x3D;&gt; prod.Color &#x3D;&#x3D; search);</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Method Syntax</span><br><span class="line">    value &#x3D; Products.First(prod &#x3D;&gt; prod.Color &#x3D;&#x3D; search);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (value &#x3D;&#x3D; null)</span><br><span class="line">&#123;</span><br><span class="line">    ResultText &#x3D; &quot;Not Found&quot;;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    ResultText &#x3D; $&quot;Found: &#123;value&#125;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Single, will throw an Exception if item not found or multiple items found.</li></ul><p>Single is supposed to be used to found a unique item, like primary key. The Exception thrown if multiple items are found is InvalidOperationException.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">try</span><br><span class="line">&#123;</span><br><span class="line">    if (UseQuerySyntax)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; Query Syntax</span><br><span class="line">        value &#x3D; (from prod in Products select prod).Single(prod &#x3D;&gt; prod.ProductID &#x3D;&#x3D; search);</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; Method Syntax</span><br><span class="line">        value &#x3D; Products.Single(prod &#x3D;&gt; prod.ProductID &#x3D;&#x3D; search);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ResultText &#x3D; $&quot;Found: &#123;value&#125;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">catch</span><br><span class="line">&#123;</span><br><span class="line">    ResultText &#x3D; &quot;Not Found, or multiple elements found&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>SingleOrDefault, value will be NULL if no item found, but will still throw an Exception if multiple items found.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">try</span><br><span class="line">&#123;</span><br><span class="line">    if (UseQuerySyntax)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; Query Syntax</span><br><span class="line">        value &#x3D; (from prod in Products select prod).SingleOrDefault(prod &#x3D;&gt; prod.ProductID &#x3D;&#x3D; search);</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; Method Syntax</span><br><span class="line">        value &#x3D; Products.SingleOrDefault(prod &#x3D;&gt; prod.ProductID &#x3D;&#x3D; search);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (value &#x3D;&#x3D; null)</span><br><span class="line">    &#123;</span><br><span class="line">        ResultText &#x3D; &quot;Not Found&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        ResultText &#x3D; $&quot;Found: &#123;value&#125;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">catch</span><br><span class="line">&#123;</span><br><span class="line">    ResultText &#x3D; &quot;Multiple elements found&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="extract-distinct-values-assign-values-and-partition-collections"><a class="markdownIt-Anchor" href="#extract-distinct-values-assign-values-and-partition-collections"></a> Extract Distinct Values, Assign Values and Partition Collections</h2><h3 id="set-operations"><a class="markdownIt-Anchor" href="#set-operations"></a> Set Operations</h3><ul><li>Iterate over entire collection</li><li>Set a property value in collection (similar to a SQL UPDATE)</li></ul><p>In this example, the object has a NameLength property and we need to assign the value <code>prop.Name.Length</code> to this <code>prop.NameLength</code> property.</p><p>For the Query approach, we need to declare a tmp variable because it has to be a statement, not an assignment. But the Method approach doesn’t have this issue.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public void ForEach()</span><br><span class="line">&#123;</span><br><span class="line">    if (UseQuerySyntax)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; Query Syntax</span><br><span class="line">        Products &#x3D; (from prod in Products</span><br><span class="line">                    let tmp &#x3D; prod.NameLength &#x3D; prod.Name.Length</span><br><span class="line">                    select prod).ToList();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; Method Syntax</span><br><span class="line">        Products.ForEach(prod &#x3D;&gt; prod.NameLength &#x3D; prod.Name.Length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ResultText &#x3D; $&quot;Total Products: &#123;Products.Count&#125;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In this example we have a Sales object, and we need to calculate how many item we have sold for a certain product.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">private decimal SalesForProduct(Product prod)</span><br><span class="line">&#123;</span><br><span class="line">    return Sales.Where(sale &#x3D;&gt; sale.ProductID &#x3D;&#x3D; prod.ProductID)</span><br><span class="line">                .Sum(sale &#x3D;&gt; sale.LineTotal);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We could then use this to set the TotalSales property for each Product</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">if (UseQuerySyntax)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Query Syntax</span><br><span class="line">    Products &#x3D; (from prod in Products</span><br><span class="line">                let tmp &#x3D; prod.TotalSales &#x3D; SalesForProduct(prod)</span><br><span class="line">                select prod).ToList();</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Method Syntax</span><br><span class="line">    Products.ForEach(prod &#x3D;&gt; prod.TotalSales &#x3D; SalesForProduct(prod));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="take-specific-amount-of-elements"><a class="markdownIt-Anchor" href="#take-specific-amount-of-elements"></a> Take Specific Amount of Elements</h3><p>Take the first 5 elements from the list</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">if (UseQuerySyntax)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Query Syntax</span><br><span class="line">    Products &#x3D; (from prod in Products</span><br><span class="line">                orderby prod.Name</span><br><span class="line">                select prod).Take(5).ToList();</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Method Syntax</span><br><span class="line">    Products &#x3D; Products.OrderBy(prod &#x3D;&gt; prod.Name).Take(5).ToList();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>TakeWhile(): take elements while condition is true</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">if (UseQuerySyntax)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Query Syntax</span><br><span class="line">    Products &#x3D; (from prod in Products</span><br><span class="line">                orderby prod.Name</span><br><span class="line">                select prod).TakeWhile(prod &#x3D;&gt; prod.Name.StartsWith(&quot;A&quot;)).ToList();</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Method Syntax</span><br><span class="line">    Products &#x3D; Products.OrderBy(prod &#x3D;&gt; prod.Name).TakeWhile(prod &#x3D;&gt; prod.Name.StartsWith(&quot;A&quot;)).ToList();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="skip-specific-amount-of-elements"><a class="markdownIt-Anchor" href="#skip-specific-amount-of-elements"></a> Skip specific amount of elements</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">if (UseQuerySyntax)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Query Syntax</span><br><span class="line">    Products &#x3D; (from prod in Products</span><br><span class="line">                orderby prod.Name</span><br><span class="line">                select prod).Skip(20).ToList();</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Method Syntax</span><br><span class="line">    Products &#x3D; Products.OrderBy(prod &#x3D;&gt; prod.Name).Skip(20).ToList();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Skip elements while condition is true</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">if (UseQuerySyntax)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Query Syntax</span><br><span class="line">    Products &#x3D; (from prod in Products</span><br><span class="line">                orderby prod.Name</span><br><span class="line">                select prod).SkipWhile(prod &#x3D;&gt; prod.Name.StartsWith(&quot;A&quot;)).ToList();</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Method Syntax</span><br><span class="line">    Products &#x3D; Products.OrderBy(prod &#x3D;&gt; prod.Name).SkipWhile(prod &#x3D;&gt; prod.Name.StartsWith(&quot;A&quot;)).ToList();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="select-distinct-values"><a class="markdownIt-Anchor" href="#select-distinct-values"></a> Select Distinct Values</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">if (UseQuerySyntax)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Query Syntax</span><br><span class="line">    colors &#x3D; (from prod in Products select prod.Color).Distinct().ToList();</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Method Syntax</span><br><span class="line">    colors &#x3D; Products.Select(prod &#x3D;&gt; prod.Color).Distinct().ToList();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="identify-what-kind-of-data-is-contained-in-collections"><a class="markdownIt-Anchor" href="#identify-what-kind-of-data-is-contained-in-collections"></a> Identify What Kind of Data is Contained in Collections</h2><h3 id="all-will-return-a-true-or-false-value-to-see-if-all-items-meet-the-requirement"><a class="markdownIt-Anchor" href="#all-will-return-a-true-or-false-value-to-see-if-all-items-meet-the-requirement"></a> All() will return a true or false value to see if all items meet the requirement.</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">if (UseQuerySyntax)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Query Syntax</span><br><span class="line">    value &#x3D; (from prod in Products select prod).All(prod &#x3D;&gt; prod.Name.Contains(search));</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Method Syntax</span><br><span class="line">    value &#x3D; Products.All(prod &#x3D;&gt; prod.Name.Contains(search));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="any-will-return-true-if-any-of-the-item-meet-the-requirement-and-will-return-false-will-all-items-doesnt-meet-the-requirement"><a class="markdownIt-Anchor" href="#any-will-return-true-if-any-of-the-item-meet-the-requirement-and-will-return-false-will-all-items-doesnt-meet-the-requirement"></a> Any() will return true if any of the item meet the requirement. And will return false will all items doesn’t meet the requirement.</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">if (UseQuerySyntax)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Query Syntax</span><br><span class="line">    value &#x3D; (from prod in Products select prod).Any(prod &#x3D;&gt; prod.Name.Contains(search));</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Method Syntax</span><br><span class="line">    value &#x3D; Products.Any(prod &#x3D;&gt; prod.Name.Contains(search));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="contains-can-be-used-in-primitive-types-and-objects"><a class="markdownIt-Anchor" href="#contains-can-be-used-in-primitive-types-and-objects"></a> Contains can be used in primitive types and objects</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">bool value &#x3D; true;</span><br><span class="line">List&lt;int&gt; numbers &#x3D; new List&lt;int&gt; &#123; 1, 2, 3, 4, 5 &#125;;</span><br><span class="line"></span><br><span class="line">if (UseQuerySyntax)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Query Syntax</span><br><span class="line">    value &#x3D; (from num in numbers select num).Contains(3);</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Method Syntax</span><br><span class="line">    value &#x3D; numbers.Contains(3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>When using Contains() on a collection of objects. We need to use EqualityComparer, because by default objects are compared by reference not value.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class ProductIdComparer : EqualityComparer&lt;Product&gt; &#123;</span><br><span class="line">    public override bool Equals(Product x, Product y) &#123;</span><br><span class="line">        return (x.ProductID &#x3D;&#x3D; y.ProductID);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public override int GetHashCode(Product obj) &#123;</span><br><span class="line">    return obj.ProductID.GetHashCode();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now when calling Contains() method, we pass in the Comparer object, so it will loop through all products and compare each one with our prodToFind Product. The Comparer will use prodToFind as the first parameter and each Product as the second parameter.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">int search &#x3D; 744;</span><br><span class="line">bool value &#x3D; true;</span><br><span class="line">ProductIdComparer pc &#x3D; new ProductIdComparer();</span><br><span class="line">Product prodToFind &#x3D; new Product &#123; ProductID &#x3D; search &#125;;</span><br><span class="line"></span><br><span class="line">if (UseQuerySyntax)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Query Syntax</span><br><span class="line">    value &#x3D; (from prod in Products select prod).Contains(prodToFind, pc);</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Method Syntax</span><br><span class="line">    value &#x3D; Products.Contains(prodToFind, pc);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="compare-and-union-two-collections"><a class="markdownIt-Anchor" href="#compare-and-union-two-collections"></a> Compare and Union Two Collections</h2><h3 id="sequenceequal"><a class="markdownIt-Anchor" href="#sequenceequal"></a> SequenceEqual()</h3><p>Compares two collections for equlity.</p><ul><li>For Simple data types (int, decimal, boolean…) it checks values</li><li>For object data types checks reference</li><li>If you want to compare values in objects, you need to create a comparer class to check the values inside each properties.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Use SequenceEqual on primitives</span><br><span class="line">bool value &#x3D; true;</span><br><span class="line">&#x2F;&#x2F; Create a list of numbers</span><br><span class="line">List&lt;int&gt; list1 &#x3D; new List&lt;int&gt; &#123; 1, 2, 3, 4, 5 &#125;;</span><br><span class="line">&#x2F;&#x2F; Create a list of numbers</span><br><span class="line">List&lt;int&gt; list2 &#x3D; new List&lt;int&gt; &#123; 1, 2, 3, 4, 5 &#125;;</span><br><span class="line"></span><br><span class="line">if (UseQuerySyntax)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Query Syntax</span><br><span class="line">    value &#x3D; (from num in list1 select num).SequenceEqual(list2);</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Method Syntax</span><br><span class="line">    value &#x3D; list1.SequenceEqual(list2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If we want to compare each object in a collection by value, we need to create a new Comparer override the Compare method.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">bool value &#x3D; true;</span><br><span class="line">ProductComparer pc &#x3D; new ProductComparer();</span><br><span class="line">&#x2F;&#x2F; Load all Product Data</span><br><span class="line">List&lt;Product&gt; list1 &#x3D; ProductRepository.GetAll();</span><br><span class="line">&#x2F;&#x2F; Load all Product Data</span><br><span class="line">List&lt;Product&gt; list2 &#x3D; ProductRepository.GetAll();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Remove an element from &#39;list1&#39; to make the collections different</span><br><span class="line">list1.RemoveAt(0);</span><br><span class="line"></span><br><span class="line">if (UseQuerySyntax)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Query Syntax</span><br><span class="line">    value &#x3D; (from num in list1 select num).SequenceEqual(list2, pc);</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Method Syntax</span><br><span class="line">    value &#x3D; list1.SequenceEqual(list2, pc);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="except"><a class="markdownIt-Anchor" href="#except"></a> Except</h3><ul><li>It finds all values in one list, but not the other, returns a collection of items.</li><li>Similar to Contains and SequenceEqual, if we are comparing primitive types, we can just use it, but if we are comparing objects values, we need to create a Comparer class and override the Compare method.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">List&lt;int&gt; exceptions &#x3D; new List&lt;int&gt;();</span><br><span class="line">&#x2F;&#x2F; Create a list of numbers</span><br><span class="line">List&lt;int&gt; list1 &#x3D; new List&lt;int&gt; &#123; 1, 2, 3, 4 &#125;;</span><br><span class="line">&#x2F;&#x2F; Create a list of numbers</span><br><span class="line">List&lt;int&gt; list2 &#x3D; new List&lt;int&gt; &#123; 3, 4, 5 &#125;;</span><br><span class="line"></span><br><span class="line">if (UseQuerySyntax)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Query Syntax</span><br><span class="line">    exceptions &#x3D; (from num in list1 select num).Except(list2).ToList();</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Method Syntax</span><br><span class="line">    exceptions &#x3D; list1.Except(list2).ToList();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Using Except on a collection of objects</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">ProductComparer pc &#x3D; new ProductComparer();</span><br><span class="line">&#x2F;&#x2F; Load all Product Data</span><br><span class="line">List&lt;Product&gt; list1 &#x3D; ProductRepository.GetAll();</span><br><span class="line">&#x2F;&#x2F; Load all Product Data</span><br><span class="line">List&lt;Product&gt; list2 &#x3D; ProductRepository.GetAll();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Remove all products with color &#x3D; &quot;Black&quot; from &#39;list2&#39;</span><br><span class="line">&#x2F;&#x2F; to give us a difference in the two lists</span><br><span class="line">list2.RemoveAll(prod &#x3D;&gt; prod.Color &#x3D;&#x3D; &quot;Black&quot;);</span><br><span class="line"></span><br><span class="line">if (UseQuerySyntax)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Query Syntax</span><br><span class="line">    Products &#x3D; (from prod in list1 select prod).Except(list2, pc).ToList();</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Method Syntax</span><br><span class="line">    Products &#x3D; list1.Except(list2, pc).ToList();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="intersect"><a class="markdownIt-Anchor" href="#intersect"></a> Intersect</h3><ul><li>It finds all values in common between both lists</li><li>Similar to Contains, SequenceEqual and Except, it compares values for primitive types and references for objects. We need to create comparer class to check values in properties.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">ProductComparer pc &#x3D; new ProductComparer();</span><br><span class="line">&#x2F;&#x2F; Load all Product Data</span><br><span class="line">List&lt;Product&gt; list1 &#x3D; ProductRepository.GetAll();</span><br><span class="line">&#x2F;&#x2F; Load all Product Data</span><br><span class="line">List&lt;Product&gt; list2 &#x3D; ProductRepository.GetAll();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Remove &#39;black&#39; products from &#39;list1&#39;</span><br><span class="line">list1.RemoveAll(prod &#x3D;&gt; prod.Color &#x3D;&#x3D; &quot;Black&quot;);</span><br><span class="line">&#x2F;&#x2F; Remove &#39;red&#39; products from &#39;list2&#39;</span><br><span class="line">list2.RemoveAll(prod &#x3D;&gt; prod.Color &#x3D;&#x3D; &quot;Red&quot;);</span><br><span class="line"></span><br><span class="line">if (UseQuerySyntax)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Query Syntax</span><br><span class="line">    Products &#x3D; (from num in list1 select num).Intersect(list2, pc).ToList();</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Method Syntax</span><br><span class="line">    Products &#x3D; list1.Intersect(list2, pc).ToList();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="unions"><a class="markdownIt-Anchor" href="#unions"></a> Unions</h3><ul><li>It adds the contents of two lists together.</li><li>Union() checks for duplicates</li><li>Concat() does not check for duplicates</li><li>Use comparer class with objects</li></ul><p>Union() need Comparer to eliminate duplicates</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">ProductComparer pc &#x3D; new ProductComparer();</span><br><span class="line">&#x2F;&#x2F; Load all Product Data</span><br><span class="line">List&lt;Product&gt; list1 &#x3D; ProductRepository.GetAll();</span><br><span class="line">&#x2F;&#x2F; Load all Product Data</span><br><span class="line">List&lt;Product&gt; list2 &#x3D; ProductRepository.GetAll();</span><br><span class="line"></span><br><span class="line">if (UseQuerySyntax)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Query Syntax</span><br><span class="line">    Products &#x3D; (from num in list1 select num).Union(list2, pc).OrderBy(prod &#x3D;&gt; prod.Name).ToList();</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Method Syntax</span><br><span class="line">    Products &#x3D; list1.Union(list2, pc).OrderBy(prod &#x3D;&gt; prod.Name).ToList();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="concat"><a class="markdownIt-Anchor" href="#concat"></a> Concat()</h3><ul><li>Adds the contents of two collections with duplicates</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Load all Product Data</span><br><span class="line">List&lt;Product&gt; list1 &#x3D; ProductRepository.GetAll();</span><br><span class="line">&#x2F;&#x2F; Load all Product Data</span><br><span class="line">List&lt;Product&gt; list2 &#x3D; ProductRepository.GetAll();</span><br><span class="line"></span><br><span class="line">if (UseQuerySyntax)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Query Syntax</span><br><span class="line">    Products &#x3D; (from num in list1 select num).Concat(list2).OrderBy(prod &#x3D;&gt; prod.Name).ToList();</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Method Syntax</span><br><span class="line">    Products &#x3D; list1.Concat(list2).OrderBy(prod &#x3D;&gt; prod.Name).ToList();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="joining-two-collections-together"><a class="markdownIt-Anchor" href="#joining-two-collections-together"></a> Joining Two Collections Together</h2><h3 id="inner-join"><a class="markdownIt-Anchor" href="#inner-join"></a> Inner Join</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var query &#x3D; Products.Join(Sales, prod &#x3D;&gt; prod.ProductID, sale &#x3D;&gt; sale.ProductID, (prod, sale) &#x3D;&gt; new</span><br><span class="line">&#123;</span><br><span class="line">    prod.ProductID,</span><br><span class="line">    prod.Name,</span><br><span class="line">    prod.Color,</span><br><span class="line">    prod.StandardCost,</span><br><span class="line">    prod.ListPrice,</span><br><span class="line">    prod.Size,</span><br><span class="line">    sale.SalesOrderID,</span><br><span class="line">    sale.OrderQty,</span><br><span class="line">    sale.UnitPrice,</span><br><span class="line">    sale.LineTotal,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="inner-join-with-two-fields"><a class="markdownIt-Anchor" href="#inner-join-with-two-fields"></a> Inner Join with two fields</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">short qty &#x3D; 6;</span><br><span class="line"></span><br><span class="line">var query &#x3D; Products.Join(</span><br><span class="line">    Sales,</span><br><span class="line">    prod &#x3D;&gt; new &#123; prod.ProductID, Qty &#x3D; qty &#125;,</span><br><span class="line">    sale &#x3D;&gt; new &#123; sale.ProductID, Qty &#x3D; sale.OrderQty &#125;,</span><br><span class="line">    (prod, sale) &#x3D;&gt; new</span><br><span class="line">    &#123;</span><br><span class="line">        prod.ProductID,</span><br><span class="line">        prod.Name,</span><br><span class="line">        prod.Color,</span><br><span class="line">        prod.StandardCost,</span><br><span class="line">        prod.ListPrice,</span><br><span class="line">        prod.Size,</span><br><span class="line">        sale.SalesOrderID,</span><br><span class="line">        sale.OrderQty,</span><br><span class="line">        sale.UnitPrice,</span><br><span class="line">        sale.LineTotal</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h2 id="aggregating-data-in-collections"><a class="markdownIt-Anchor" href="#aggregating-data-in-collections"></a> Aggregating Data in Collections</h2><h3 id="count"><a class="markdownIt-Anchor" href="#count"></a> Count()</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">value &#x3D; Products.Count(prod &#x3D;&gt; prod.Color &#x3D;&#x3D; &quot;Yellow&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Another way using Where</span><br><span class="line">value &#x3D; Products.Where(prod &#x3D;&gt; prod.Color &#x3D;&#x3D; &quot;Yellow&quot;).Count();</span><br></pre></td></tr></table></figure><h3 id="min-and-max"><a class="markdownIt-Anchor" href="#min-and-max"></a> Min() and Max()</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">value &#x3D; Products.Min(prod &#x3D;&gt; prod.ListPrice);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">value &#x3D; Products.Max(prod &#x3D;&gt; prod.ListPrice);</span><br></pre></td></tr></table></figure><h3 id="average-and-sum"><a class="markdownIt-Anchor" href="#average-and-sum"></a> Average() and Sum()</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">value &#x3D; Products.Average(prod &#x3D;&gt; prod.ListPrice);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">value &#x3D; Products.Sum(prod &#x3D;&gt; prod.ListPrice);</span><br></pre></td></tr></table></figure><h3 id="custom-calculation-using-aggregate"><a class="markdownIt-Anchor" href="#custom-calculation-using-aggregate"></a> Custom Calculation using Aggregate()</h3><p>The first parameter initialize an internal variable, which setup the start value.</p><p>The second parameter is an anonymous function which you pass the initial value and loop through each item in the collection</p><ul><li>Aggregate Sum</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">value &#x3D; Products.Aggregate(0m, (sum, prod) &#x3D;&gt; sum +&#x3D; prod.ListPrice);</span><br></pre></td></tr></table></figure><ul><li>Aggregate Multiply</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">value &#x3D; Products.Aggregate(0m, (sum, prod &#x3D;&gt; sum +&#x3D; prod.ListPrice * prod.Qty));</span><br></pre></td></tr></table></figure><ul><li>Aggregate with GroupBy and Having</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var stats &#x3D; Products.GroupBy(sale &#x3D;&gt; sale.Size)</span><br><span class="line">    .Where(sizeGroup &#x3D;&gt; sizeGroup.Count() &gt; 0)</span><br><span class="line">    .Select(sizeGroup &#x3D;&gt; new &#123;</span><br><span class="line">        Size &#x3D; sizeGroup.Key,</span><br><span class="line">        TotalProducts &#x3D; sizeGroup.Count(),</span><br><span class="line">        Max &#x3D; sizeGroup.Max(s &#x3D;&gt; s.ListPrice),</span><br><span class="line">        Min &#x3D; sizeGroup.Min(s &#x3D;&gt; s.ListPrice),</span><br><span class="line">        Average &#x3D; sizeGroup.Average(s &#x3D;&gt; s.ListPrice)</span><br><span class="line">    &#125;)</span><br><span class="line">    .OrderBy(result &#x3D;&gt; result.Size)</span><br><span class="line">    .Select(result &#x3D;&gt; result);</span><br></pre></td></tr></table></figure><h2 id="deferred-execution"><a class="markdownIt-Anchor" href="#deferred-execution"></a> Deferred Execution</h2><ul><li>A LINQ query is a data structure ready to execute</li><li>Query is not executed until a value is needed</li><li>The execution happens with one of the folloing functions (<code>foreach()</code>, <code>Count()</code>, <code>ToList()</code>, <code>OrderBy()</code>…)</li></ul><h2 id="streaming-operators"><a class="markdownIt-Anchor" href="#streaming-operators"></a> Streaming Operators</h2><ul><li>Results can be returned prior to the entire collection is read</li><li>Examples: Distinct(), GroupBy(), Join(), Select(), Skip(), Take(), Union(), Where()</li></ul><h2 id="non-streaming-operators"><a class="markdownIt-Anchor" href="#non-streaming-operators"></a> Non-Streaming Operators</h2><ul><li>All data in collection must be read before a result can be returned</li><li>Examples: Except(), GroupBy(), GroupJoin(), Intersect(), Join(), OrderBy(), ThenBy()</li></ul><h2 id="the-yield-keyword"><a class="markdownIt-Anchor" href="#the-yield-keyword"></a> The yield keyword</h2><p>When write our own Filter function, we could use <code>yield</code> to make the function to be Streaming. So it returns data while looping through the collection.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public static IEnumrable&lt;T&gt; Filter&lt;T&gt; (this IEnumrable&lt;T&gt; source, Func&lt;T, bool&gt; predicate) &#123;</span><br><span class="line">    foreach(var item in source) &#123;</span><br><span class="line">        if (predicate(item)) &#123;</span><br><span class="line">            yield return item;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In the below example, Where and Take are both Streaming Operators, so this query will loop through the collection until the requirement is met. That is when it found the first item that has Color red. It doesn’t need to go through the entire collection.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Products &#x3D; Products.Where(prod &#x3D;&gt; prod.Color &#x3D;&#x3D; &quot;red&quot;).Take(1).ToList();</span><br></pre></td></tr></table></figure><p>However, in this example, because <code>OrderBy()</code> is an non-streaming operator, so it will loop through the entire list first, order them by <a href="http://prod.Name">prod.Name</a>, then apply the Where condition. Non-streaming operator will go before the Streaming operator.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Products &#x3D; Products.Where(prod &#x3D;&gt; prod.Color &#x3D;&#x3D; &quot;red&quot;).OrderBy(prod &#x3D;&gt; prod.Name).ToList();</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;linq&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#linq&quot;&gt;&lt;/a&gt; LINQ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;SQL-like syntax in C# and Visual Basic&lt;/li&gt;
&lt;li&gt;Query any ty</summary>
      
    
    
    
    
    <category term="LINQ" scheme="http://hellcy.github.io/tags/LINQ/"/>
    
  </entry>
  
  <entry>
    <title>Entity Framework Core 5</title>
    <link href="http://hellcy.github.io/2021/04/20/Entity-Framework-Core-5/"/>
    <id>http://hellcy.github.io/2021/04/20/Entity-Framework-Core-5/</id>
    <published>2021-04-20T12:54:33.000Z</published>
    <updated>2021-05-24T07:27:02.659Z</updated>
    
    <content type="html"><![CDATA[<p>Microsoft’s cross-platform data access framework for .NET</p><h2 id="orm-object-relational-mapper"><a class="markdownIt-Anchor" href="#orm-object-relational-mapper"></a> ORM (Object Relational Mapper)</h2><p>EF Core is an ORM, it is designed to reduce the friction between how data is structure in a relational database and how you define your classes. Without ORM, we need to write lots of code to transform database results to instances of the types in our software.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Microsoft’s cross-platform data access framework for .NET&lt;/p&gt;
&lt;h2 id=&quot;orm-object-relational-mapper&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#o</summary>
      
    
    
    
    
    <category term="Entity Framework" scheme="http://hellcy.github.io/tags/Entity-Framework/"/>
    
  </entry>
  
  <entry>
    <title>Building GraphQL APIs with ASP.NET Core</title>
    <link href="http://hellcy.github.io/2021/04/20/Building-GraphQL-APIs-with-ASP-NET-Core/"/>
    <id>http://hellcy.github.io/2021/04/20/Building-GraphQL-APIs-with-ASP-NET-Core/</id>
    <published>2021-04-20T12:21:54.000Z</published>
    <updated>2021-05-24T07:27:02.657Z</updated>
    
    <content type="html"><![CDATA[<p>The consumer of a GraphQL API defines the data structure it want to receive in a query</p><p>First, let us see how a REST API works.</p><p>On the far right, there is data, for example in the form of a database, and there are entity classes. Each instance of an entity class represents one row of data in the table. An object-relational mapper like Entity Framework may take care of instantiating and populating these objects, but you don’t want to expose these entities directly. So they are converted to models or data transfer objects, objects that have a data structure that is easy to consume for clients, and maybe have some validation built in using attributes. Once you have the model, it’s the controller’s job to make it available to the outside world. There’s typically a controller for each type of model. For example, it could be a product controller, an order controller, etc. What controller is activated when a request comes in is determined by routing, which maps the URL to a certain controller, and all of these controllers react to HTTP methods. Each HTTP method triggers a different operation in the controller. A GET gets data, a POST introduces new data, etc. So there are typically quite a few controllers that have quite a few operations.</p><p><img src="/../images/Building-GraphQL-APIs-with-ASP-NET-Core/1.png" alt="" /></p><p>With GraphQL, there are typically no models, there is something called Schema. This Schema declares what a consumer of the API can access. The Schema also knows how to get the data. The API support GET or POST request, and there is always a query in the request.</p><p><img src="/../images/Building-GraphQL-APIs-with-ASP-NET-Core/2.png" alt="" /></p><h2 id="queries"><a class="markdownIt-Anchor" href="#queries"></a> Queries</h2><ul><li>Determines what happens in the API</li><li>Not tied to HTTP. HTTP is just a transport used to get the quert to the API</li><li>Downside: HTTP Caching: when using HTTP, because now each request is not at a unique URL anymore, it is now difficult to do HTTP caching.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;The consumer of a GraphQL API defines the data structure it want to receive in a query&lt;/p&gt;
&lt;p&gt;First, let us see how a REST API works.&lt;/p&gt;</summary>
      
    
    
    
    
    <category term="GraphQL" scheme="http://hellcy.github.io/tags/GraphQL/"/>
    
  </entry>
  
  <entry>
    <title>Design Patterns - Repository</title>
    <link href="http://hellcy.github.io/2021/04/19/Design-Patterns-Repository/"/>
    <id>http://hellcy.github.io/2021/04/19/Design-Patterns-Repository/</id>
    <published>2021-04-19T06:44:53.000Z</published>
    <updated>2021-05-24T07:27:02.659Z</updated>
    
    <content type="html"><![CDATA[<p>A repository encapsulates the data access so the consumer on longer has to know about the underlying data structure</p><p><img src="/../Design-Patterns-Repository/1.png" alt="" /></p><h3 id="why-this-design-is-problematic"><a class="markdownIt-Anchor" href="#why-this-design-is-problematic"></a> Why this Design is Problematic</h3><ul><li>The controller is tightly coupled with the data access layer</li><li>it is difficult to write a test for the controller without side effects</li><li>Hard to extend entities with domain specific behavior</li></ul><p><img src="/../Design-Patterns-Repository/2.png" alt="" /></p><h3 id="benefits-of-the-repository-pattern"><a class="markdownIt-Anchor" href="#benefits-of-the-repository-pattern"></a> Benefits of the Repository Pattern</h3><ul><li>The consumer(controller) is now separated (decoupled) from the data access</li><li>Easy to write a test without side-effects<ul><li>In production, we use the Repository Pattern to communicate with the Data layer. In Test, we replace the Repository with a faked local Data store. This can be done using Strategy Pattern.</li></ul></li><li>Modify and extend entities before they are passed on to the consumer</li><li>A sharable abstraction resulting in less duplication of code</li><li>Improved maintainability</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;A repository encapsulates the data access so the consumer on longer has to know about the underlying data structure&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/../</summary>
      
    
    
    
    
    <category term="Design Patterns" scheme="http://hellcy.github.io/tags/Design-Patterns/"/>
    
  </entry>
  
  <entry>
    <title>Design Patterns - Proxy</title>
    <link href="http://hellcy.github.io/2021/04/19/Design-Patterns-Proxy/"/>
    <id>http://hellcy.github.io/2021/04/19/Design-Patterns-Proxy/</id>
    <published>2021-04-19T04:19:43.000Z</published>
    <updated>2021-05-24T07:27:02.659Z</updated>
    
    <content type="html"><![CDATA[<h2 id="problem"><a class="markdownIt-Anchor" href="#problem"></a> Problem</h2><p>Need to control access to a type for performance, security or other reasons.</p><p><img src="/../Design-Patterns-Proxy/1.png" alt="" /></p><p>Client should not know if they were calling the real service or a proxy.</p><p>Proxy also gives us time to do necessary things before sending request to real service and before sending response back to client.(like logging, caching, encrypt/decrypt…)</p><p><img src="/../Design-Patterns-Proxy/2.png" alt="" /></p><p>Proxy has similar structure as the Decorator Pattern, but the intent is different, Decorator pattern is for adding extra funcationalities to the original class whereas Proxy is focusing on control the access to the object.</p><p><img src="/../Design-Patterns-Proxy/3.png" alt="" /></p><p>This is another implementation of the Proxy Pattern, it doesn’t have the interface so we need to compose the RealService object in Proxy Class. One thing to notice is that the RealService properties and methods need to be marked as virtual for the Proxy Class to override them.</p><h2 id="proxy-variants"><a class="markdownIt-Anchor" href="#proxy-variants"></a> Proxy Variants</h2><ul><li>Virtual Proxy<ul><li>stand in for expensive to create objects</li></ul></li><li>Remote Proxy<ul><li>Hide the detail to work with remote data or services.</li></ul></li><li>Smart Proxy<ul><li>Performs additional actions when a resource is accessed</li></ul></li><li>Protective Proxy<ul><li>controls access to a sensitive resource by checking for whether or not the client is authorized to perform those operations.</li></ul></li></ul><h2 id="virtual-proxy"><a class="markdownIt-Anchor" href="#virtual-proxy"></a> Virtual Proxy</h2><p>Stands in for an expensive-to-create object. Typically responsible for getting real object. UI placeholders. Lazy-loaded Entity Properties.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class ExpensiveToFullyLoad : BaseClassWithHistory</span><br><span class="line">&#123;</span><br><span class="line">    public static ExpensiveToFullyLoad Create()</span><br><span class="line">    &#123;</span><br><span class="line">        return new VirtualExpensiveToFullyLoad();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public virtual IEnumerable&lt;ExpensiveEntity&gt; HomeEntities &#123; get; protected set; &#125;</span><br><span class="line">    public virtual IEnumerable&lt;ExpensiveEntity&gt; AwayEntities &#123; get; protected set; &#125;</span><br><span class="line">    </span><br><span class="line">    protected ExpensiveToFullyLoad()</span><br><span class="line">    &#123;</span><br><span class="line">        History.Add(&quot;Constructor called.&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>When you have some expensive properties. You don’t want to create them when you don’t need them. So we could create a Proxy Class(VirtualExpensiveToFullyLoad), which will only create the property when its getting called.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">public class VirtualExpensiveToFullyLoad : ExpensiveToFullyLoad</span><br><span class="line">&#123;</span><br><span class="line">    public override IEnumerable&lt;ExpensiveEntity&gt; AwayEntities </span><br><span class="line">    &#123;</span><br><span class="line">        get</span><br><span class="line">        &#123;</span><br><span class="line">            if(base.AwayEntities &#x3D;&#x3D; null)</span><br><span class="line">            &#123;</span><br><span class="line">                base.AwayEntities &#x3D; ExpensiveDataSource.GetEntities(this);</span><br><span class="line">            &#125;</span><br><span class="line">            return base.AwayEntities;</span><br><span class="line">        &#125;</span><br><span class="line">        protected set &#x3D;&gt; base.AwayEntities &#x3D; value; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public override IEnumerable&lt;ExpensiveEntity&gt; HomeEntities </span><br><span class="line">    &#123;</span><br><span class="line">        get</span><br><span class="line">        &#123;</span><br><span class="line">            if (base.HomeEntities &#x3D;&#x3D; null)</span><br><span class="line">            &#123;</span><br><span class="line">                base.HomeEntities &#x3D; ExpensiveDataSource.GetEntities(this);</span><br><span class="line">            &#125;</span><br><span class="line">            return base.HomeEntities;</span><br><span class="line">        &#125;</span><br><span class="line">        protected set &#x3D;&gt; base.HomeEntities &#x3D; value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>When we test the class, we can see object history will only increase after we get the Entities from the class.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[Fact]</span><br><span class="line">public void LogsCollectionLoadingToHistory()</span><br><span class="line">&#123;</span><br><span class="line">    var obj &#x3D; ExpensiveToFullyLoad.Create();</span><br><span class="line">    var list &#x3D; obj.HomeEntities;</span><br><span class="line"></span><br><span class="line">    Assert.Equal(2, obj.History.Count());</span><br><span class="line"></span><br><span class="line">    var anotherList &#x3D; obj.AwayEntities;</span><br><span class="line">    Assert.Equal(3, obj.History.Count());</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We could also use the C# <code>Lazy&lt;T&gt;</code> type which will handle the lazy instantiation and thread-safe for use</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class LazyExpensiveToFullyLoad : BaseClassWithHistory</span><br><span class="line">&#123;</span><br><span class="line">    private Lazy&lt;IEnumerable&lt;ExpensiveEntity&gt;&gt; _homeEntities;</span><br><span class="line">    public IEnumerable&lt;ExpensiveEntity&gt; HomeEntities &#123; get &#123; return _homeEntities.Value; &#125; &#125;</span><br><span class="line"></span><br><span class="line">    private Lazy&lt;IEnumerable&lt;ExpensiveEntity&gt;&gt; _awayEntities;</span><br><span class="line">    public IEnumerable&lt;ExpensiveEntity&gt; AwayEntities &#123; get &#123; return _awayEntities.Value; &#125; &#125;</span><br><span class="line"></span><br><span class="line">    public LazyExpensiveToFullyLoad()</span><br><span class="line">    &#123;</span><br><span class="line">        History.Add(&quot;Constructor called.&quot;);</span><br><span class="line">        _homeEntities &#x3D; new Lazy&lt;IEnumerable&lt;ExpensiveEntity&gt;&gt;(() &#x3D;&gt; ExpensiveDataSource.GetEntities(this));</span><br><span class="line">        _awayEntities &#x3D; new Lazy&lt;IEnumerable&lt;ExpensiveEntity&gt;&gt;(() &#x3D;&gt; ExpensiveDataSource.GetEntities(this));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="remote-proxy"><a class="markdownIt-Anchor" href="#remote-proxy"></a> Remote Proxy</h2><p>Client works with proxy as if remote resource were local. Hides network details from client. Centralizes knowledge of network details.</p><h2 id="smart-proxy"><a class="markdownIt-Anchor" href="#smart-proxy"></a> Smart Proxy</h2><p>Performs additional logic around resource access. Example: Resource counting, Cache management, Locking shared resources</p><p>Here we are trying to open the same file two times, normally this will throw an exception.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var fs &#x3D; new FileSmartProxy();</span><br><span class="line"></span><br><span class="line">byte[] outputBytes1 &#x3D; Encoding.ASCII.GetBytes(&quot;1. ardalis.com\n&quot;);</span><br><span class="line">byte[] outputBytes2 &#x3D; Encoding.ASCII.GetBytes(&quot;2. weeklydevtips.com\n&quot;);</span><br><span class="line">using var file &#x3D; fs.OpenWrite(_testFile);</span><br><span class="line">using var file2 &#x3D; fs.OpenWrite(_testFile);</span><br><span class="line"></span><br><span class="line">file.Write(outputBytes1);</span><br><span class="line">file2.Write(outputBytes2);</span><br><span class="line"></span><br><span class="line">file.Close();</span><br><span class="line">file2.Close();</span><br></pre></td></tr></table></figure><p>But we are using FileSmartProxy() Class, when we catch the exception, we will check if the file is already opened, and return the same reference to the file stream.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">public class FileSmartProxy : IFile</span><br><span class="line">&#123;</span><br><span class="line">    Dictionary&lt;string, FileStream&gt; _openStreams &#x3D; new Dictionary&lt;string, FileStream&gt;();</span><br><span class="line"></span><br><span class="line">    public FileStream OpenWrite(string path)</span><br><span class="line">    &#123;</span><br><span class="line">        try</span><br><span class="line">        &#123;</span><br><span class="line">            var stream &#x3D; File.OpenWrite(path);</span><br><span class="line">            _openStreams.Add(path, stream);</span><br><span class="line">            return stream;</span><br><span class="line">        &#125;</span><br><span class="line">        catch (IOException)</span><br><span class="line">        &#123;</span><br><span class="line">            if(_openStreams.ContainsKey(path))</span><br><span class="line">            &#123;</span><br><span class="line">                var stream &#x3D; _openStreams[path];</span><br><span class="line"></span><br><span class="line">                if(stream !&#x3D; null &amp;&amp; stream.CanWrite)</span><br><span class="line">                &#123;</span><br><span class="line">                    return stream;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            throw;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="protective-proxy"><a class="markdownIt-Anchor" href="#protective-proxy"></a> Protective Proxy</h2><p>Manages access to a resource based on authorization rules. Eliminates repetitive security checks from client code and othe resource itself. Acts as a gatekeeper around a resource</p><h2 id="summary"><a class="markdownIt-Anchor" href="#summary"></a> Summary</h2><p>If we are not using the Proxy Pattern, we often end up mixing the concerns of access control, or lazy loading or other funcationality in the resource class itself. Every client the consume this class must perform this work. The concerns of access control are mixed with the concerns of client or the resource. Proxy Pattern helps us to separate this.</p><p>Usually Proxy Pattern has built in class that support it.(Remote Proxy)</p><h2 id="related-patterns"><a class="markdownIt-Anchor" href="#related-patterns"></a> Related Patterns</h2><ul><li>Decorator: the structure is similar, but the intent of Decorator Pattern is to add funcationality. Whereas the intent of Proxy Pattern is to control access.</li><li>Prototype: Prototype and Virtual Proxy Pattern both deal with objects that are expensive to create. But Virtual Proxy Pattern only provides a placeholder of the object and fetch it when required. The Prototype Pattern keeps a copy of the object on hand and can clone it when required.</li><li>Adapter: similar structure, but the intent of the Adapter Pattern is to convert an incompatible interface into one that works for the client.</li><li>Flyweight: designed to manage many reference to a shared instance.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;problem&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#problem&quot;&gt;&lt;/a&gt; Problem&lt;/h2&gt;
&lt;p&gt;Need to control access to a type for performance, securit</summary>
      
    
    
    
    
    <category term="Design Patterns" scheme="http://hellcy.github.io/tags/Design-Patterns/"/>
    
  </entry>
  
  <entry>
    <title>Design Patterns - Adapter</title>
    <link href="http://hellcy.github.io/2021/04/19/Design-Patterns-Adapter/"/>
    <id>http://hellcy.github.io/2021/04/19/Design-Patterns-Adapter/</id>
    <published>2021-04-18T16:27:56.000Z</published>
    <updated>2021-05-24T07:27:02.658Z</updated>
    
    <content type="html"><![CDATA[<h2 id="problem"><a class="markdownIt-Anchor" href="#problem"></a> Problem</h2><p>Incompatible interfaces between a client and a service provider.</p><p>Adapters convert the interface of one class into an interface a client expects.</p><h2 id="two-kinds-of-adapters"><a class="markdownIt-Anchor" href="#two-kinds-of-adapters"></a> Two Kinds of Adapters</h2><h3 id="object-adapters"><a class="markdownIt-Anchor" href="#object-adapters"></a> Object Adapters</h3><ul><li>Hold an instance of the Adaptee</li><li>Implement or inherit the adapter type</li><li>Use composition and single inheritance</li></ul><p><img src="/../images/Design-Patterns-Adapter/1.png" alt="" /></p><p>C# doesn’t support multiple inheritance, and a design principle of C# is to prefer composition over inheritance. So C# is prefer object adapter.</p><p>The Client is calling method on an adapter abstraction(IAdapter). A specific adapter is created for each specific adaptee.</p><h3 id="class-adapters"><a class="markdownIt-Anchor" href="#class-adapters"></a> Class Adapters</h3><ul><li>Inherit from the adaptee</li><li>Implement the adapter interface</li></ul><p><img src="/../images/Design-Patterns-Adapter/2.png" alt="" /></p><p>The Client is calling a target class’s particular method, but it wants to use a different implementation(incompatibleMethod) now. The adapter class inherits from both classes and overrides the SomeMethod() call, so that instead of doing what it did in the target class, it now calls the IncompatibleMethod() and does any work necessary to make it compatible with the SomeMethod() interface.</p><p><img src="/../images/Design-Patterns-Adapter/3.png" alt="" /></p><p>What C# can do is to implement the interface the Client is calling and rather than holding onto an instance of the concrete adaptee type, we can inherit from it. SomeMethod() calls IncompetibleMethod() and does any necessary work to modify it to work with the SomeMethod() interface.</p><p>Example: We are going to read a list of People and there are two ways of doing it. First, we could read People from a file. Second, we could call a Web API.</p><p>IAdapter interface will only have a method, GetCharacters(), get it returns a list of Peoson</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public interface ICharacterSourceAdapter</span><br><span class="line">&#123;</span><br><span class="line">    Task&lt;IEnumerable&lt;Person&gt;&gt; GetCharacters();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Get list of Person from a web API is easy.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public async Task&lt;List&lt;Person&gt;&gt; GetCharacters()</span><br><span class="line">&#123;</span><br><span class="line">    using (var client &#x3D; new HttpClient())</span><br><span class="line">    &#123;</span><br><span class="line">        string url &#x3D; &quot;https:&#x2F;&#x2F;swapi.co&#x2F;api&#x2F;people&quot;;</span><br><span class="line">        string result &#x3D; await client.GetStringAsync(url);</span><br><span class="line">        var people &#x3D; JsonConvert.DeserializeObject&lt;ApiResult&lt;Person&gt;&gt;(result).Results;</span><br><span class="line"></span><br><span class="line">        return people;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>But get list of Person from a file need a parameter (filename)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public async Task&lt;List&lt;Person&gt;&gt; GetCharactersFromFile(string filename)</span><br><span class="line">&#123;</span><br><span class="line">    var characters &#x3D; JsonConvert.DeserializeObject&lt;List&lt;Person&gt;&gt;(await File.ReadAllTextAsync(filename));</span><br><span class="line"></span><br><span class="line">    return characters;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>To make it work with the GetCharacters() method, we need to create an Adapter Class</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public class CharacterFileSourceAdapter : ICharacterSourceAdapter</span><br><span class="line">&#123;</span><br><span class="line">    private string _fileName;</span><br><span class="line">    private readonly CharacterFileSource _characterFileSource;</span><br><span class="line"></span><br><span class="line">    public CharacterFileSourceAdapter(string fileName, CharacterFileSource characterFileSource)</span><br><span class="line">    &#123;</span><br><span class="line">        _fileName &#x3D; fileName;</span><br><span class="line">        _characterFileSource &#x3D; characterFileSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public async Task&lt;IEnumerable&lt;Person&gt;&gt; GetCharacters()</span><br><span class="line">    &#123;</span><br><span class="line">        return await _characterFileSource.GetCharactersFromFile(_fileName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>It implements the IAdapter interface, and inside GetCharacters() method, it calls the GetCharactersFromFile(_filename) method to make it compatible with our interface method.</p><p>When we use it, it doesn’t need to know anything about the filename or which way we choose to get the list of Person.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var people &#x3D; await _characterSourceAdapter.GetCharacters();</span><br></pre></td></tr></table></figure><h2 id="related-patterns"><a class="markdownIt-Anchor" href="#related-patterns"></a> Related Patterns</h2><ul><li><p>Decorator: has a similar structure, but the intent of a decorator is to add functionality.</p></li><li><p>Bridge: has a similar structure, but it allows interfaces and their implementations to vary independently from one another.</p></li><li><p>Proxy: similar structure, but its intent is to control access to a resource, not to convert an incompatible interface</p></li><li><p>Repository: sometimes it acts an adapter, providing a common interface for persistence that can map various incompatible interfaces to a single common data access strategy</p></li><li><p>Strategy: very frequently used with Adapter pattern as a way of injecting different implementations of behavior into a particular client class.</p></li><li><p>Facade: the intent of facade is similar to the adapters in that it alters an interface to make it easier for a client to use. The difference is Facade often sits in front of multiple different types and its goal is to simplify a complex set of operation</p></li></ul><h2 id="summary"><a class="markdownIt-Anchor" href="#summary"></a> Summary</h2><ul><li>An Adapter converts an incompatible interface into a compatible one</li><li>In C#, the Adapter pattern uses composition and is known as an object adapter. It means that your adapter implementation will contain instances of the incompatible type and will delegate calls to this instalce’s incompatible methods or properties.</li><li>Adapters can work with service providers but can also wrap result types.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;problem&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#problem&quot;&gt;&lt;/a&gt; Problem&lt;/h2&gt;
&lt;p&gt;Incompatible interfaces between a client and a service pr</summary>
      
    
    
    
    
    <category term="Design Patterns" scheme="http://hellcy.github.io/tags/Design-Patterns/"/>
    
  </entry>
  
  <entry>
    <title>Design Patterns - Decorator</title>
    <link href="http://hellcy.github.io/2021/04/18/Design-Patterns-Decorator/"/>
    <id>http://hellcy.github.io/2021/04/18/Design-Patterns-Decorator/</id>
    <published>2021-04-18T11:26:18.000Z</published>
    <updated>2021-05-24T07:27:02.658Z</updated>
    
    <content type="html"><![CDATA[<h2 id="decorator-pattern"><a class="markdownIt-Anchor" href="#decorator-pattern"></a> Decorator Pattern</h2><p>A structural design pattern used for dynamically adding behavior to a class without making changes to that class.</p><p><img src="/../images/Design-Patterns-Decorator/1.png" alt="" /></p><p>The Decorator Class will take an object implementing the same interface. This allows us to pass the object being decorated into the decorator object and allows the decorator object to act as a wrapper<br />around this original object.</p><p><img src="/../images/Design-Patterns-Decorator/2.png" alt="" /></p><p>The Decorator object will keep a reference of the object being decorated(the component object). Because the decorator object implement the same interface as the original component object, it now has a chance to intercept any method calls on the interface and inject some additional behavior into those calls.</p><p><img src="/../images/Design-Patterns-Decorator/3.png" alt="" /></p><p>Decorator Class and be nested.</p><p><img src="/../images/Design-Patterns-Decorator/4.png" alt="" /></p><p>This is the Example we are going to use.</p><h2 id="using-decorator-objects"><a class="markdownIt-Anchor" href="#using-decorator-objects"></a> Using Decorator Objects</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Standard component instantiation</span><br><span class="line">IWeatherService weatherService &#x3D; new WeatherService();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Instantiation with decorator objects</span><br><span class="line">IWeatherService weatherService &#x3D; </span><br><span class="line">    new CachingDecorator(</span><br><span class="line">        new LogginDecorator(</span><br><span class="line">            new WeatherService()));</span><br></pre></td></tr></table></figure><p>To achieve this, we need to make sure the original component class and all the decorator classes need to implement from the same interface. And all decortor classes need to take the object of type IWeatherService in their constructors.</p><h2 id="logging-decorator"><a class="markdownIt-Anchor" href="#logging-decorator"></a> Logging Decorator</h2><p>Log how often a method was called, how long it took, parameters and responses.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public interface IWeatherService</span><br><span class="line">&#123;</span><br><span class="line">    CurrentWeather GetCurrentWeather(String location);</span><br><span class="line"></span><br><span class="line">    LocationForecast GetForecast(String location);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This is the interface for our original WeatherService Class and our new Decorator Class</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">public class WeatherServiceLoggingDecorator : IWeatherService</span><br><span class="line">&#123;</span><br><span class="line">    private IWeatherService _weatherService;</span><br><span class="line">    private ILogger&lt;WeatherServiceLoggingDecorator&gt; _logger;</span><br><span class="line"></span><br><span class="line">    public WeatherServiceLoggingDecorator(IWeatherService weatherService, ILogger&lt;WeatherServiceLoggingDecorator&gt; logger)</span><br><span class="line">    &#123;</span><br><span class="line">        _weatherService &#x3D; weatherService;</span><br><span class="line">        _logger &#x3D; logger;</span><br><span class="line">    &#125;</span><br><span class="line">    public CurrentWeather GetCurrentWeather(string location)</span><br><span class="line">    &#123;</span><br><span class="line">        Stopwatch sw &#x3D; Stopwatch.StartNew();</span><br><span class="line">        CurrentWeather currentWeather &#x3D; _weatherService.GetCurrentWeather(location);</span><br><span class="line">        sw.Stop();</span><br><span class="line">        long elapsedMillis &#x3D; sw.ElapsedMilliseconds;</span><br><span class="line"></span><br><span class="line">        _logger.LogWarning(&quot;Retrieved weather data for &#123;location&#125; - Elapsed ms: &#123;&#125; &#123;@currentWeather&#125;&quot;, location, elapsedMillis, currentWeather);</span><br><span class="line"></span><br><span class="line">        return currentWeather;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public LocationForecast GetForecast(string location)</span><br><span class="line">    &#123;</span><br><span class="line">        Stopwatch sw &#x3D; Stopwatch.StartNew();</span><br><span class="line">        LocationForecast locationForecast &#x3D; _weatherService.GetForecast(location);</span><br><span class="line">        sw.Stop();</span><br><span class="line">        long elapsedMillis &#x3D; sw.ElapsedMilliseconds;</span><br><span class="line"></span><br><span class="line">        _logger.LogWarning(&quot;Retrieved weather data for &#123;location&#125; - Elapsed ms: &#123;&#125; &#123;@locationForecast&#125;&quot;, location, elapsedMillis, locationForecast);</span><br><span class="line"></span><br><span class="line">        return locationForecast;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This is our new Decorator Class, we implement from the IWeatherService Interface, it is taking the interface as a parameter in the constructor, and implemented two methods. In the GetCurrentWeather() method, it logs the time it takes to run the method, then calling the original _weatherService.GetCurrentWeather() method.</p><h2 id="caching-decorator"><a class="markdownIt-Anchor" href="#caching-decorator"></a> Caching Decorator</h2><p>Cache weather conditions, forecasts for a city to reduce the number of external API calls.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">public class WeatherServiceCachingDecorator : IWeatherService</span><br><span class="line">&#123;</span><br><span class="line">    private IWeatherService _weatherService;</span><br><span class="line">    private IMemoryCache _cache;</span><br><span class="line"></span><br><span class="line">    public WeatherServiceCachingDecorator(IWeatherService weatherService, IMemoryCache cache)</span><br><span class="line">    &#123;</span><br><span class="line">        _weatherService &#x3D; weatherService;</span><br><span class="line">        _cache &#x3D; cache;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public CurrentWeather GetCurrentWeather(string location)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; if we can found value in the cache, return it</span><br><span class="line">        &#x2F;&#x2F; otherwise get the current weather then add it to the cache for 30 mins</span><br><span class="line">        string cacheKey &#x3D; $&quot;WeatherConditions::&#123;location&#125;&quot;;</span><br><span class="line">        if (_cache.TryGetValue&lt;CurrentWeather&gt;(cacheKey, out var currentWeather))</span><br><span class="line">        &#123;</span><br><span class="line">            return currentWeather;</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            var currentConditions &#x3D; _weatherService.GetCurrentWeather(location);</span><br><span class="line">            _cache.Set&lt;CurrentWeather&gt;(cacheKey, currentConditions, TimeSpan.FromMinutes(30));</span><br><span class="line">            return currentConditions;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public LocationForecast GetForecast(string location)</span><br><span class="line">    &#123;</span><br><span class="line">        string cacheKey &#x3D; $&quot;WeatherForecast::&#123;location&#125;&quot;;</span><br><span class="line">        if (_cache.TryGetValue&lt;LocationForecast&gt;(cacheKey, out var forecast))</span><br><span class="line">        &#123;</span><br><span class="line">            return forecast;</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            var locationForecast &#x3D; _weatherService.GetForecast(location);</span><br><span class="line">            _cache.Set&lt;LocationForecast&gt;(cacheKey, locationForecast, TimeSpan.FromMinutes(30));</span><br><span class="line">            return locationForecast;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And meanwhile in the HomeController, we need to build this onion like structure from inside to outside.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">IWeatherService weatherService &#x3D; new WeatherService(apiKey);</span><br><span class="line">IWeatherService withLoggingDecorator &#x3D; new WeatherServiceLoggingDecorator(weatherService, _loggerFactory.CreateLogger&lt;WeatherServiceLoggingDecorator&gt;());</span><br><span class="line">IWeatherService withCachingDecorator &#x3D; new WeatherServiceCachingDecorator(withLoggingDecorator, memoryCache);</span><br><span class="line"></span><br><span class="line">_weatherService &#x3D; withCachingDecorator;</span><br></pre></td></tr></table></figure><p>The call stack will be: CachingDecorator =&gt; LoggingDecorator =&gt; WeatherService</p><h2 id="decorator-summary"><a class="markdownIt-Anchor" href="#decorator-summary"></a> Decorator Summary</h2><ul><li>Multiple decorators can be used in conjunction with one another</li><li>Each decorator can focus on a single task, promoting separation of concerns</li><li>Decorator classes allow functionality to be added dynamically</li></ul><h3 id="decorator-pattern-characteristics"><a class="markdownIt-Anchor" href="#decorator-pattern-characteristics"></a> Decorator Pattern Characteristics</h3><ol><li>Implement the same base interface as the original object</li><li>Take a instance of the original object as part of their constructor</li><li>Add new behaviors to the original object they are wrapping</li></ol><h2 id="using-decorators-with-dependency-injection-container"><a class="markdownIt-Anchor" href="#using-decorators-with-dependency-injection-container"></a> Using Decorators with Dependency Injection Container</h2><p>.NET Core has built in IoC container which will help us to create WeatherService object when we need it and manage the lifetime of object.</p><p>We could simplify the HomeController constructor to this</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">private readonly IWeatherService _weatherService;</span><br><span class="line"></span><br><span class="line">public HomeController(ILogger&lt;HomeController&gt; logger, IWeatherService weatherService)</span><br><span class="line">&#123;</span><br><span class="line">    _weatherService &#x3D; weatherService;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And in the startUp.cs, we configure the IoC container to this</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public void ConfigureServices(IServiceCollection services)</span><br><span class="line">&#123;</span><br><span class="line">    services.AddControllersWithViews();</span><br><span class="line"></span><br><span class="line">    services.AddMemoryCache();</span><br><span class="line"></span><br><span class="line">    String apiKey &#x3D; Configuration.GetValue&lt;String&gt;(&quot;OpenWeatherMapApiKey&quot;);</span><br><span class="line">    services.AddScoped&lt;IWeatherService&gt;(serviceProvider &#x3D;&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        String apiKey &#x3D; Configuration.GetValue&lt;String&gt;(&quot;OpenWeatherMapApiKey&quot;);</span><br><span class="line"></span><br><span class="line">        var logger &#x3D; serviceProvider.GetService&lt;ILogger&lt;WeatherServiceLoggingDecorator&gt;&gt;();</span><br><span class="line"></span><br><span class="line">        var memoryCache &#x3D; serviceProvider.GetService&lt;IMemoryCache&gt;();</span><br><span class="line"></span><br><span class="line">        IWeatherService weatherService &#x3D; new WeatherService(apiKey);</span><br><span class="line">        IWeatherService withLoggingDecorator &#x3D; new WeatherServiceLoggingDecorator(weatherService, logger);</span><br><span class="line">        IWeatherService withCachingDecorator &#x3D; new WeatherServiceCachingDecorator(withLoggingDecorator, memoryCache);</span><br><span class="line"></span><br><span class="line">        return withCachingDecorator;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now whenever we need a IWeatherService object, it will be created and provided to us with this structure. (CachingDecorator =&gt; LoggingDecorator =&gt; WeatherService)</p><h2 id="when-to-use-decorator-pattern"><a class="markdownIt-Anchor" href="#when-to-use-decorator-pattern"></a> When to use Decorator Pattern</h2><ul><li>Cross cutting concerns<ul><li>Logging, Performance Tracking(Timer, StopWatch…), Caching, Authorization</li></ul></li><li>Manipulate data going to/from component<ul><li>object we need to encrypt and decrypt before being passed to a component</li></ul></li></ul><h3 id="question-what-if-your-component-does-not-have-an-interfaceextend-from-a-base-class"><a class="markdownIt-Anchor" href="#question-what-if-your-component-does-not-have-an-interfaceextend-from-a-base-class"></a> Question: What if your component does not have an interface/extend from a base class?</h3><ul><li>Extract an interface from the class</li></ul><h3 id="what-if-you-cant-modify-the-class"><a class="markdownIt-Anchor" href="#what-if-you-cant-modify-the-class"></a> What if you can’t modify the class?</h3><ul><li>Adapter Pattern</li></ul><p>To put a class in front of your component and extract an interface from the Adapter Class</p><p><img src="/../images/Design-Patterns-Decorator/5.png" alt="" /></p><h2 id="summary"><a class="markdownIt-Anchor" href="#summary"></a> Summary</h2><ul><li>Design Patterns are about ideas</li><li>Interfaces allow us to create loosely coupled designs</li><li>the decorator pattern adds the ability to dynamically add behavior</li><li>This is accomplished by wrapping around the original object and intercepting methods</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;decorator-pattern&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#decorator-pattern&quot;&gt;&lt;/a&gt; Decorator Pattern&lt;/h2&gt;
&lt;p&gt;A structural design pattern</summary>
      
    
    
    
    
    <category term="Design Patterns" scheme="http://hellcy.github.io/tags/Design-Patterns/"/>
    
  </entry>
  
  <entry>
    <title>Design Patterns - Factory and Abstract Factory</title>
    <link href="http://hellcy.github.io/2021/04/17/Design-Patterns-Factory-and-Abstract-Factory/"/>
    <id>http://hellcy.github.io/2021/04/17/Design-Patterns-Factory-and-Abstract-Factory/</id>
    <published>2021-04-17T13:40:29.000Z</published>
    <updated>2021-05-24T07:27:02.658Z</updated>
    
    <content type="html"><![CDATA[<h2 id="what-is-factory-pattern"><a class="markdownIt-Anchor" href="#what-is-factory-pattern"></a> What is Factory Pattern</h2><p>A factory is an object for creating objects</p><h2 id="factory-pattern-variations"><a class="markdownIt-Anchor" href="#factory-pattern-variations"></a> Factory Pattern Variations</h2><ul><li>Simple Factory</li><li>Factory Method</li><li>Abstract Factory</li></ul><h2 id="factory-pattern-characteristics"><a class="markdownIt-Anchor" href="#factory-pattern-characteristics"></a> Factory Pattern Characteristics</h2><ul><li>Client: Asks for a created product<ul><li>Shopping cart</li></ul></li><li>Creator: Facilitates a creation<ul><li>ShippingProviderFactory</li></ul></li><li>Product: The product of the creation<ul><li>ShippingProvider Instance</li></ul></li></ul><p>The Client no longer needs to know how to create an object or exactly what flavor of that class it will use</p><h2 id="simple-factory-example"><a class="markdownIt-Anchor" href="#simple-factory-example"></a> Simple Factory Example</h2><p>We have a ShoppingCart Class and inside this Class we create a shippingProvider object. It will create different shippingProvider based on order’s sender country</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">if (order.Sender.Country &#x3D;&#x3D; &quot;Australia&quot;)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;Australia Post Shipping Provider</span><br><span class="line">&#125;</span><br><span class="line">else if (order.Sender.Country &#x3D;&#x3D; &quot;Sweden&quot;)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;Swedish Postal Service Shipping Provider</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    throw new NotSupportedException(&quot;No shipping provider found for origin country&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>But the shippingProvider object should not be created inside the ShoppingCart Class, ShoppingCart Class should just ask a ShippingProviderFactory Class for a shippingProvider object, and it will be provided one.</p><p>So we should moved the code to a new ShippingProviderFactory Class and invoke this class’s Creation method.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var shippingProvider &#x3D; ShippingProviderFactory.CreateShippingProvider(order.Sender.Country);</span><br></pre></td></tr></table></figure><p>One problem is not we are still hardcoding the Country inside our ShippingProviderFactory Class. We should add another layer of abstraction between the ShippingProviderFactory and the implementation of the ShippingProvider.</p><h2 id="factory-method"><a class="markdownIt-Anchor" href="#factory-method"></a> Factory Method</h2><p>The Factory Method Pattern is introduced to allow for a flexible and extensible application</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public abstract class ShippingProviderFactory &#123;</span><br><span class="line">    public abstract ShippingProvider CreateShippingProvider(string country);</span><br><span class="line"></span><br><span class="line">    public ShippingProvider GetShippingProvider(string country) &#123;</span><br><span class="line">        var provider &#x3D; CreateShippingProvider(country)</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; we may want to do some common changes on the shippingProvider created </span><br><span class="line">        &#x2F;&#x2F; before we return it back to the caller (ShoppingCart)</span><br><span class="line">        if (country &#x3D;&#x3D; &quot;Sweden&quot; &amp;&amp; provider.InsuranceOptions.ProviderHasInsurance)</span><br><span class="line">        &#123;</span><br><span class="line">            provider.RequireSignature &#x3D; false;</span><br><span class="line">        &#125;</span><br><span class="line">        return provider;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>It contains two methods.</p><p>The CreateShippingProvider() method will be implemented by its subclasses with different implementations.</p><p>The GetShippingProvider() method will allow user to decide what’s passed into the creation. And it allows user to do additional common interactions with the result of the creation before it’s being passed back to the caller(ShoppingCart).</p><p><img src="/../images/Design-Patterns-Factory-and-Abstract-Factory/1.png" alt="" /></p><p>Now we can create different implementations of the creation of a shippingProvider based on the input parameter(country).</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class StandardShippingProviderFactory : ShippingProviderFactory</span><br><span class="line">&#123;</span><br><span class="line">    public override ShippingProvider CreateShippingProvider(string country)</span><br><span class="line">    &#123;</span><br><span class="line">        return new StandardShippingProviderFactory();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class GlobalExpressShippingProviderFactory : ShippingProviderFactory</span><br><span class="line">&#123;</span><br><span class="line">    public override ShippingProvider CreateShippingProvider(string country)</span><br><span class="line">    &#123;</span><br><span class="line">        return new GlobalExpressShippingProvider();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In the caller Class (ShoppingCart) we can inject ShippingProviderFactory</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; inject ShippingProviderFactory into the ShoppingCart Constructor</span><br><span class="line">public ShoppingCart(Order order, ShippingProviderFactory shippingProviderFactory)</span><br><span class="line">&#123;</span><br><span class="line">    this.order &#x3D; order;</span><br><span class="line">    this.shippingProviderFactory &#x3D; shippingProviderFactory;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Also compose the ShippingProviderFactory object on app start</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var cart &#x3D; new ShoppingCart(order, new StandardShippingProviderFactory());</span><br></pre></td></tr></table></figure><h2 id="abstract-factory-pattern"><a class="markdownIt-Anchor" href="#abstract-factory-pattern"></a> Abstract Factory Pattern</h2><p>The abstract factory pattern provides a way to encapsulete a group of individual factories that have a common theme without specifying their concrete classes.</p><p><img src="/../images/Design-Patterns-Factory-and-Abstract-Factory/2.png" alt="" /></p><p>It adds another layer of abstraction which allow users to choose which factory to use on app start.</p><p>Different factories have the same methods but with different implementations</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">public interface IPurchaseProviderFactory</span><br><span class="line">&#123;</span><br><span class="line">    ShippingProvider CreateShippingProvider(Order order);</span><br><span class="line">    IInvoice CreateInvoice(Order order);</span><br><span class="line">    ISummary CreateSummary(Order order);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class AustraliaPurchaseProviderFactory : IPurchaseProviderFactory</span><br><span class="line">&#123;</span><br><span class="line">    public IInvoice CreateInvoice(Order order)</span><br><span class="line">    &#123;</span><br><span class="line">        return new GSTInvoice();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public ShippingProvider CreateShippingProvider(Order order)</span><br><span class="line">    &#123;</span><br><span class="line">        var shippingProviderFactory &#x3D; new StandardShippingProviderFactory();</span><br><span class="line"></span><br><span class="line">        return shippingProviderFactory.GetShippingProvider(order.Sender.Country);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public ISummary CreateSummary(Order order)</span><br><span class="line">    &#123;</span><br><span class="line">        return new CSVSummary();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class SwedenPurchaseProviderFactory : IPurchaseProviderFactory</span><br><span class="line">&#123;</span><br><span class="line">    public IInvoice CreateInvoice(Order order)</span><br><span class="line">    &#123;</span><br><span class="line">        if (order.Recipient.Country !&#x3D; order.Sender.Country)</span><br><span class="line">        &#123;</span><br><span class="line">            return new NoVATInvoice();</span><br><span class="line">        &#125;</span><br><span class="line">        return new VATInvoice();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public ShippingProvider CreateShippingProvider(Order order)</span><br><span class="line">    &#123;</span><br><span class="line">        ShippingProviderFactory shippingProviderFactory;</span><br><span class="line"></span><br><span class="line">        if (order.Sender.Country !&#x3D; order.Recipient.Country)</span><br><span class="line">        &#123;</span><br><span class="line">            shippingProviderFactory &#x3D; new GlobalExpressShippingProviderFactory();</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            shippingProviderFactory &#x3D; new StandardShippingProviderFactory();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return shippingProviderFactory.GetShippingProvider(order.Sender.Country);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public ISummary CreateSummary(Order order)</span><br><span class="line">    &#123;</span><br><span class="line">        return new EmailSummary();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Client (ShoppingCart) Class doesn’t need to know which factory to use, it just needs to know when to create a product using the factory.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public ShoppingCart(Order order, IPurchaseProviderFactory purchaseProviderFactory)  </span><br><span class="line">&#123;</span><br><span class="line">    this.order &#x3D; order;</span><br><span class="line">    this.purchaseProviderFactory &#x3D; purchaseProviderFactory;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public string Finalize()</span><br><span class="line">&#123;</span><br><span class="line">    var shippingProvider &#x3D; purchaseProviderFactory.CreateShippingProvider(order);</span><br><span class="line"></span><br><span class="line">    var invoice &#x3D; purchaseProviderFactory.CreateInvoice(order);</span><br><span class="line"></span><br><span class="line">    var summary &#x3D; purchaseProviderFactory.CreateSummary(order);</span><br><span class="line"></span><br><span class="line">    summary.Send();</span><br><span class="line"></span><br><span class="line">    order.ShippingStatus &#x3D; ShippingStatus.ReadyForShippment;</span><br><span class="line"></span><br><span class="line">    return shippingProvider.GenerateShippingLabelFor(order);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The concrete factory object will be instantiated on app starts(or based on user input).</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">IPurchaseProviderFactory purchaseProviderFactory;</span><br><span class="line"></span><br><span class="line">if (order.Sender.Country &#x3D;&#x3D; &quot;Sweden&quot;)</span><br><span class="line">&#123;</span><br><span class="line">    purchaseProviderFactory &#x3D; new SwedenPurchaseProviderFactory();</span><br><span class="line">&#125;</span><br><span class="line">else if (order.Sender.Country &#x3D;&#x3D; &quot;Australia&quot;)</span><br><span class="line">&#123;</span><br><span class="line">    purchaseProviderFactory &#x3D; new AustraliaPurchaseProviderFactory();</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    throw new Exception(&quot;Country not supported.&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var cart &#x3D; new ShoppingCart(order, purchaseProviderFactory);</span><br></pre></td></tr></table></figure><h2 id="factory-pattern-in-testing"><a class="markdownIt-Anchor" href="#factory-pattern-in-testing"></a> Factory Pattern in Testing</h2><p>Extract creation of mocked, facked or commonly oused intances in tests.</p><p>We could use the Factory Pattern in our Unit Tests. it will be easier to test the parts that use them as you can inhect faked or mocked implementations</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">public abstract class OrderFactory</span><br><span class="line">&#123;</span><br><span class="line">    protected abstract Order CreateOrder();</span><br><span class="line"></span><br><span class="line">    public Order GetOrder()</span><br><span class="line">    &#123;</span><br><span class="line">        var order &#x3D; CreateOrder();</span><br><span class="line"></span><br><span class="line">        order.LineItems.Add(</span><br><span class="line">            new Item(&quot;testA&quot;, &quot;testB&quot;, 100m), 1</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        order.LineItems.Add(</span><br><span class="line">            new Item(&quot;TestC&quot;, &quot;TestD&quot;, decimal.MaxValue), 1</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        return order;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class StandardOrderFactory : OrderFactory</span><br><span class="line">&#123;</span><br><span class="line">    protected override Order CreateOrder()</span><br><span class="line">    &#123;</span><br><span class="line">        var order &#x3D; new Order</span><br><span class="line">        &#123;</span><br><span class="line">            Recipient &#x3D; new Address</span><br><span class="line">            &#123;</span><br><span class="line">                To &#x3D; &quot;Yuan&quot;,</span><br><span class="line">                Country &#x3D; &quot;Australia&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            Sender &#x3D; new Address</span><br><span class="line">            &#123;</span><br><span class="line">                To &#x3D; &quot;Someone else&quot;,</span><br><span class="line">                Country &#x3D; &quot;Australia&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        return order;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class InternationalOrderFactory : OrderFactory</span><br><span class="line">&#123;</span><br><span class="line">    protected override Order CreateOrder()</span><br><span class="line">    &#123;</span><br><span class="line">        var order &#x3D; new Order</span><br><span class="line">        &#123;</span><br><span class="line">            Recipient &#x3D; new Address</span><br><span class="line">            &#123;</span><br><span class="line">                To &#x3D; &quot;Yuan&quot;,</span><br><span class="line">                Country &#x3D; &quot;Australia&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            Sender &#x3D; new Address</span><br><span class="line">            &#123;</span><br><span class="line">                To &#x3D; &quot;Someone else&quot;,</span><br><span class="line">                Country &#x3D; &quot;Sweden&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        return order;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="summary"><a class="markdownIt-Anchor" href="#summary"></a> Summary</h2><ul><li><p>Separates the client(ShoppingCart) from the creation</p></li><li><p>Introduce subclasses (StandardShippingProviderFactory, GlobalExpressShippingProviderFactory) and concrete implementations to add functionality.</p></li><li><p>Factory Pattern is very common when writing tests</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;what-is-factory-pattern&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#what-is-factory-pattern&quot;&gt;&lt;/a&gt; What is Factory Pattern&lt;/h2&gt;
&lt;p&gt;A factory</summary>
      
    
    
    
    
    <category term="Design Patterns" scheme="http://hellcy.github.io/tags/Design-Patterns/"/>
    
  </entry>
  
  <entry>
    <title>Design Patterns - Command</title>
    <link href="http://hellcy.github.io/2021/04/16/Design-Patterns-Command/"/>
    <id>http://hellcy.github.io/2021/04/16/Design-Patterns-Command/</id>
    <published>2021-04-16T08:15:56.000Z</published>
    <updated>2021-05-24T07:27:02.658Z</updated>
    
    <content type="html"><![CDATA[<h2 id="command-pattern-characteristics"><a class="markdownIt-Anchor" href="#command-pattern-characteristics"></a> Command Pattern Characteristics</h2><ul><li>Command<ul><li>Holds the instructions and references to things that it needs in order for it to be executed</li></ul></li><li>Receiver<ul><li>Command will execute Receiver</li></ul></li><li>Invoker<ul><li>Invoker will execute Command, and will also keep track of all executed commands</li></ul></li><li>Client<ul><li>Client decides which command to schedule for execution</li></ul></li></ul><p><img src="/../images/Design-Patterns-Command/1.png" alt="" /></p><p>A command contains all the data to process the request now or at a later time. This means we could execute the command right away once the client schedule that command, or we could schedule all the commands to be executed later on in the lifetime of our application.</p><p>Example: AddToCartCommand</p><ul><li>The product which should be added to the cart</li><li>The shopping cart</li><li>A way to check stock availability</li></ul><p><img src="/../images/Design-Patterns-Command/2.png" alt="" /></p><h2 id="icommand-interface"><a class="markdownIt-Anchor" href="#icommand-interface"></a> ICommand Interface</h2><p>Because we may need to implement different command, we should create a ICommand interface.</p><p>It contains three methods. Execute() will execute the command. CanExecute() will check if a command can be execute of not. Undo() will undo all commands we executed before (using a Stack to maintain all executed commands)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public interface ICommand</span><br><span class="line">&#123;</span><br><span class="line">    void Execute();</span><br><span class="line">    bool CanExecute();</span><br><span class="line">    void Undo();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Next we need to implement CommandManager, which is the Invoker component. It contains a Stack Data Structure to maintain the Commands list. When the Client (UI Button) adds a command to the CommandManager, it will be added to the list. (We can also add extra feature like introduce a delay of executing commands or redo all commands later).</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public class CommandManager</span><br><span class="line">&#123;</span><br><span class="line">    private Stack&lt;ICommand&gt; commands &#x3D; new Stack&lt;ICommand&gt;();</span><br><span class="line"></span><br><span class="line">    public void Invoke(ICommand command)</span><br><span class="line">    &#123;</span><br><span class="line">        if (command.CanExecute())</span><br><span class="line">        &#123;</span><br><span class="line">            commands.Push(command);</span><br><span class="line">            command.Execute();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void Undo()</span><br><span class="line">    &#123;</span><br><span class="line">        while (commands.Count &gt; 0)</span><br><span class="line">        &#123;</span><br><span class="line">            var command &#x3D; commands.Pop();</span><br><span class="line">            command.Undo();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Next we start to implement a command AddToCartCommand</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public class AddToCartCommand : ICommand</span><br></pre></td></tr></table></figure><p>It takes a shoppingCartRepository object, a productRepository object and a product</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public AddToCartCommand(IShoppingCartRepository shoppingCartRepository,</span><br><span class="line">    IProductRepository productRepository,</span><br><span class="line">    Product product)</span><br><span class="line">&#123;</span><br><span class="line">    this.shoppingCartRepository &#x3D; shoppingCartRepository;</span><br><span class="line">    this.productRepository &#x3D; productRepository;</span><br><span class="line">    this.product &#x3D; product;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Just a reminder, the Repository is a pattern for abstracting data access. We could have access the data store from a SQL DB, a web service or a CSV file, but our application doesn’t need to know that.</p><p>In our case, the shoppingCartRepository and the productRepository are both just a local Dictionary data structure.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public bool CanExecute()</span><br><span class="line">&#123;</span><br><span class="line">    if (product &#x3D;&#x3D; null) return false;</span><br><span class="line"></span><br><span class="line">    return productRepository.GetStockFor(product.ArticleId) &gt; 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CanExecute() will check if our productRepository actually has the required product.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public void Execute()</span><br><span class="line">&#123;</span><br><span class="line">    if (product &#x3D;&#x3D; null) return;</span><br><span class="line"></span><br><span class="line">    productRepository.DecreaseStockBy(product.ArticleId, 1);</span><br><span class="line"></span><br><span class="line">    shoppingCartRepository.Add(product);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Execute() will decrease the product quantity by one and add it to shoppingCartRepository</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public void Undo()</span><br><span class="line">&#123;</span><br><span class="line">    if (product &#x3D;&#x3D; null) return;</span><br><span class="line"></span><br><span class="line">    var lineItem &#x3D; shoppingCartRepository.Get(product.ArticleId);</span><br><span class="line"></span><br><span class="line">    productRepository.IncreaseStockBy(product.ArticleId, lineItem.Quantity);</span><br><span class="line"></span><br><span class="line">    shoppingCartRepository.RemoveAll(product.ArticleId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Undo() will put the product from shoppingCartRepository back to the productRepository</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">var shoppingCartRepository &#x3D; new ShoppingCartRepository();</span><br><span class="line">var productsRepository &#x3D; new ProductsRepository();</span><br><span class="line"></span><br><span class="line">var product &#x3D; productsRepository.FindBy(&quot;SM7B&quot;);</span><br><span class="line"></span><br><span class="line">var addToCartCommand &#x3D; new AddToCartCommand(shoppingCartRepository,</span><br><span class="line">    productsRepository,</span><br><span class="line">    product);</span><br><span class="line"></span><br><span class="line">var increaseQuantityCommand &#x3D; new ChangeQuantityCommand(</span><br><span class="line">    ChangeQuantityCommand.Operation.Increase,</span><br><span class="line">    shoppingCartRepository,</span><br><span class="line">    productsRepository,</span><br><span class="line">    product);</span><br><span class="line"></span><br><span class="line">var manager &#x3D; new CommandManager();</span><br><span class="line">manager.Invoke(addToCartCommand);</span><br><span class="line">manager.Invoke(increaseQuantityCommand);</span><br><span class="line">manager.Invoke(increaseQuantityCommand);</span><br><span class="line">manager.Invoke(increaseQuantityCommand);</span><br><span class="line">manager.Invoke(increaseQuantityCommand);</span><br></pre></td></tr></table></figure><p>Finally we just need to compose all the necessary objects on app starts. And add the commands to CommandManager.</p><h2 id="command-pattern-in-wpf"><a class="markdownIt-Anchor" href="#command-pattern-in-wpf"></a> Command Pattern in WPF</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">public interface ICommand</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;</span><br><span class="line">    &#x2F;&#x2F; Summary:</span><br><span class="line">    &#x2F;&#x2F;     Occurs when changes occur that affect whether or not the command should execute.</span><br><span class="line">    event EventHandler CanExecuteChanged;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;</span><br><span class="line">    &#x2F;&#x2F; Summary:</span><br><span class="line">    &#x2F;&#x2F;     Defines the method that determines whether the command can execute in its current</span><br><span class="line">    &#x2F;&#x2F;     state.</span><br><span class="line">    &#x2F;&#x2F;</span><br><span class="line">    &#x2F;&#x2F; Parameters:</span><br><span class="line">    &#x2F;&#x2F;   parameter:</span><br><span class="line">    &#x2F;&#x2F;     Data used by the command. If the command does not require data to be passed,</span><br><span class="line">    &#x2F;&#x2F;     this object can be set to null.</span><br><span class="line">    &#x2F;&#x2F;</span><br><span class="line">    &#x2F;&#x2F; Returns:</span><br><span class="line">    &#x2F;&#x2F;     true if this command can be executed; otherwise, false.</span><br><span class="line">    bool CanExecute(object parameter);</span><br><span class="line">    &#x2F;&#x2F;</span><br><span class="line">    &#x2F;&#x2F; Summary:</span><br><span class="line">    &#x2F;&#x2F;     Defines the method to be called when the command is invoked.</span><br><span class="line">    &#x2F;&#x2F;</span><br><span class="line">    &#x2F;&#x2F; Parameters:</span><br><span class="line">    &#x2F;&#x2F;   parameter:</span><br><span class="line">    &#x2F;&#x2F;     Data used by the command. If the command does not require data to be passed,</span><br><span class="line">    &#x2F;&#x2F;     this object can be set to null.</span><br><span class="line">    void Execute(object parameter);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>WPF application has built in ICommand interface. If we want to use our Command implementation (RemoveAllFromCartCommand) with this ICommand interface. We could bind the method with a UI button, then create a RelayCommand Class, which will invoke RemoveAllFromCartCommand method.</p><ul><li>UI Button -&gt;(bind)-&gt; ICommand method -&gt;(invoke)-&gt; RelayCommand -&gt;(invoke)-&gt; RemoveAllFromCartCommand</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Button Margin&#x3D;&quot;0 5 5 0&quot; Command&#x3D;&quot;&#123;Binding RemoveAllFromCartCommand&#125;&quot;&gt;Clear&lt;&#x2F;Button&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public System.Windows.Input.ICommand RemoveAllFromCartCommand &#123; get; private set; &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">RemoveAllFromCartCommand &#x3D; new RelayCommand(</span><br><span class="line">    execute: () &#x3D;&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        removeAllFromCartCommand.Execute();</span><br><span class="line"></span><br><span class="line">        Refresh();</span><br><span class="line">    &#125;, </span><br><span class="line">    canExecute:() &#x3D;&gt; removeAllFromCartCommand.CanExecute()</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">public class RelayCommand : System.Windows.Input.ICommand</span><br><span class="line">&#123;</span><br><span class="line">    private readonly Action execute;</span><br><span class="line">    private readonly Func&lt;bool&gt; canExecute;</span><br><span class="line"></span><br><span class="line">    public RelayCommand(Action execute, Func&lt;bool&gt; canExecute)</span><br><span class="line">    &#123;</span><br><span class="line">        this.execute &#x3D; execute;</span><br><span class="line">        this.canExecute &#x3D; canExecute;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public bool CanExecute(object parameter)</span><br><span class="line">    &#123;</span><br><span class="line">        return canExecute?.Invoke() ?? false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void Execute(object parameter)</span><br><span class="line">    &#123;</span><br><span class="line">        execute?.Invoke();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public event EventHandler CanExecuteChanged</span><br><span class="line">    &#123;</span><br><span class="line">        add &#123; CommandManager.RequerySuggested +&#x3D; value; &#125;</span><br><span class="line">        remove &#123; CommandManager.RequerySuggested -&#x3D; value; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void RaiseCanExecuteChanged()</span><br><span class="line">    &#123;</span><br><span class="line">        CommandManager.InvalidateRequerySuggested();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="summary"><a class="markdownIt-Anchor" href="#summary"></a> Summary</h2><p>Command Pattern converts the request from Client to an object(ICommand). And the children implementation of the ICommand (AddToCartCommand) will take the Receiver as one of its input parameters (ShoppingCartRepository, ProductRepository). And it will implement the Execute() method, decide what should the Receiver do in Execute() method. And the Receiver should have all the needed information about the request(Product)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;command-pattern-characteristics&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#command-pattern-characteristics&quot;&gt;&lt;/a&gt; Command Pattern Character</summary>
      
    
    
    
    
    <category term="Design Patterns" scheme="http://hellcy.github.io/tags/Design-Patterns/"/>
    
  </entry>
  
  <entry>
    <title>Design Patterns - Strategy</title>
    <link href="http://hellcy.github.io/2021/04/16/Design-Patterns-Strategy/"/>
    <id>http://hellcy.github.io/2021/04/16/Design-Patterns-Strategy/</id>
    <published>2021-04-16T05:34:42.000Z</published>
    <updated>2021-05-24T07:27:02.659Z</updated>
    
    <content type="html"><![CDATA[<p>Strategy pattern is also called Policy pattern</p><h2 id="strategy-pattern-characteristics"><a class="markdownIt-Anchor" href="#strategy-pattern-characteristics"></a> Strategy Pattern Characteristics</h2><ul><li>Context: has a reference to a strategy and invokes it<ul><li>Calls IStrategy.Method(object);</li></ul></li><li>IStrategy: Defines the interface for the given strategy<ul><li>Defines the contract Method(object)</li></ul></li><li>Strategy: A concrete implementation of the strategy<ul><li>Implementation of Method(object)</li></ul></li></ul><p>Select an implementation at runtime based on user input without having to extend the class.</p><p>Example: ISalesTaxStrategy is an interface. We have multiple different implementations of Strategies to calculate tax. They all implement the ISalesTaxStrategy interface.</p><p>The code below doesn’t need to know what Strategy is chosen at this step. It only needs to invoke the GetTaxFor() Method.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public ISalesTaxStrategy SalesTaxStrategy &#123; get; set; &#125;</span><br><span class="line"></span><br><span class="line">public decimal GetTax()</span><br><span class="line">&#123;</span><br><span class="line">    return SalesTaxStrategy &#x3D;&#x3D; null ? 0m : SalesTaxStrategy.GetTaxFor(this);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="what-did-we-achieve"><a class="markdownIt-Anchor" href="#what-did-we-achieve"></a> What did we achieve?</h3><ul><li>A more extensible, object oriented and dynamic implementation</li><li>Easily add new strategies without affecting existing ones</li><li>Cleaner approach with single responsiblity in mind</li></ul><p>Another thing we could do is to pass the interface to the GetTax() method.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public decimal GetTax(ISalesTaxStrategy salesTaxStrategy) &#123;</span><br><span class="line">    return salesTaxStrategy &#x3D;&#x3D; null ? 0m : salesTaxStrategy.GetTaxFor(this);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And the concrete implementation of the strategy could be determined when we invoke the GetTax() Method</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">order.GetTax(new SwedenSalesTaxStrategy()</span><br></pre></td></tr></table></figure><p>This is still meaning we have a hard dependency between the Order and the SalesTaxStrategy</p><h2 id="strategy-pattern-with-dependency-injection"><a class="markdownIt-Anchor" href="#strategy-pattern-with-dependency-injection"></a> Strategy Pattern with Dependency Injection</h2><p>Pass the already created SalesTaxStrategy to the Order Contructor will help us remove the hard dependency between the Order and the Strategy.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">private ISalesTaxStrategy _salesTaxStrategy;</span><br><span class="line">private IInvoiceStrategy _invoiceStrategy;</span><br><span class="line">private IShippingStrategy _shippingStrategy;</span><br><span class="line"></span><br><span class="line">public Order(ISalesTaxStrategy salesTaxStrategy, IInvoiceStrategy invoiceStrategy, IShippingStrategy shippingStrategy)</span><br><span class="line">&#123;</span><br><span class="line">    _salesTaxStrategy &#x3D; salesTaxStrategy;</span><br><span class="line">    _invoiceStrategy &#x3D; invoiceStrategy;</span><br><span class="line">    _shippingStrategy &#x3D; shippingStrategy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then Order(Context in Strategy Pattern) just need to invoke Strategy implementations without having to know which imeplementation it is invoking.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public decimal GetTax()</span><br><span class="line">&#123;</span><br><span class="line">    return _salesTaxStrategy &#x3D;&#x3D; null ? 0m : _salesTaxStrategy.GetTaxFor(this);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void FinalizeOrder()</span><br><span class="line">&#123;</span><br><span class="line">    if (SelectedPayments.Any(x &#x3D;&gt; x.PaymentProvider &#x3D;&#x3D; PaymentProvider.Invoice) &amp;&amp; AmountDue &gt; 0 &amp;&amp; ShippingStatus &#x3D;&#x3D; ShippingStatus.WaitingForPayment)</span><br><span class="line">    &#123;</span><br><span class="line">        _invoiceStrategy.Generate(this);</span><br><span class="line">        ShippingStatus &#x3D; ShippingStatus.ReadyForShippment;</span><br><span class="line">    &#125;</span><br><span class="line">    else if (AmountDue &gt; 0)</span><br><span class="line">    &#123;</span><br><span class="line">        throw new Exception(&quot;Unable to finalize order&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    _shippingStrategy.Ship(this);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>On Application start we create different Strategies based on user input</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">switch (origin)</span><br><span class="line">&#123;</span><br><span class="line">    case EnumTaxStrategy.Sweden:</span><br><span class="line">        salesTaxStrategy &#x3D; new SwedenSalesTaxStrategy();</span><br><span class="line">        break;</span><br><span class="line">    case EnumTaxStrategy.USA:</span><br><span class="line">        salesTaxStrategy &#x3D; new USAStateSalesTaxStrategy();</span><br><span class="line">        break;</span><br><span class="line">    default:</span><br><span class="line">        salesTaxStrategy &#x3D; new SwedenSalesTaxStrategy();</span><br><span class="line">        break;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">switch (inputInvoiceStrategy)</span><br><span class="line">&#123;</span><br><span class="line">    case EnumInvoiceStrategy.Email:</span><br><span class="line">        invoiceStrategy &#x3D; new EmailInvoiceStrategy();</span><br><span class="line">        break;</span><br><span class="line">    case EnumInvoiceStrategy.File:</span><br><span class="line">        invoiceStrategy &#x3D; new FileInvoiceStrategy();</span><br><span class="line">        break;</span><br><span class="line">    case EnumInvoiceStrategy.PrintOnDemand:</span><br><span class="line">        invoiceStrategy &#x3D; new PrintOnDemandInvoiceStrategy();</span><br><span class="line">        break;</span><br><span class="line">    default:</span><br><span class="line">        invoiceStrategy &#x3D; new FileInvoiceStrategy();</span><br><span class="line">        break;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">switch (inputShippingStrategy)</span><br><span class="line">&#123;</span><br><span class="line">    case EnumShippingStrategy.DHL:</span><br><span class="line">        shippingStrategy &#x3D; new DHLShippingStrategy();</span><br><span class="line">        break;</span><br><span class="line">    case EnumShippingStrategy.Fedex:</span><br><span class="line">        shippingStrategy &#x3D; new FedexShippingStrategy();</span><br><span class="line">        break;</span><br><span class="line">    case EnumShippingStrategy.SwedishPostalService:</span><br><span class="line">        shippingStrategy &#x3D; new SwedishPostalServiceShippingStrategy();</span><br><span class="line">        break;</span><br><span class="line">    case EnumShippingStrategy.UPS:</span><br><span class="line">        shippingStrategy &#x3D; new UPSShippingStrategy();</span><br><span class="line">        break;</span><br><span class="line">    case EnumShippingStrategy.USPS:</span><br><span class="line">        shippingStrategy &#x3D; new UnitedStatesPostalServiceShippingStrategy();</span><br><span class="line">        break;</span><br><span class="line">    default:</span><br><span class="line">        shippingStrategy &#x3D; new DHLShippingStrategy();</span><br><span class="line">        break;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="summary"><a class="markdownIt-Anchor" href="#summary"></a> Summary</h2><ul><li>One of the most commonly used patterns</li><li>Decouple the context and the concrete implementation</li><li>Allows for a cleaner implementation in the context</li><li>Easily extend with additional startegies without affecting current implementations</li><li>Makes testing a lot easier as you can write mocked implementations to inject</li><li>Identify existing implementations and where you have used the pattern before</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Strategy pattern is also called Policy pattern&lt;/p&gt;
&lt;h2 id=&quot;strategy-pattern-characteristics&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#strategy</summary>
      
    
    
    
    
    <category term="Design Patterns" scheme="http://hellcy.github.io/tags/Design-Patterns/"/>
    
  </entry>
  
  <entry>
    <title>Design Patterns - Singleton</title>
    <link href="http://hellcy.github.io/2021/04/15/Design-Patterns-Singleton/"/>
    <id>http://hellcy.github.io/2021/04/15/Design-Patterns-Singleton/</id>
    <published>2021-04-15T12:03:02.000Z</published>
    <updated>2021-05-24T07:27:02.659Z</updated>
    
    <content type="html"><![CDATA[<p>A singleton is a class designed to only ever have one instance.</p><h2 id="singleton-features"><a class="markdownIt-Anchor" href="#singleton-features"></a> Singleton Features</h2><ul><li>At any time, only 0 or 1 instance of the Singleton class exists in the application</li><li>Singleton classes are created without parameters</li><li>Assume lazy instantiation as the default</li><li>A single, private, parameterless constructor</li><li>Sealed class</li><li>A private, static field holds the only reference to the instance</li><li>A public static method provides access to the field</li></ul><h2 id="naive-implementation-of-singleton"><a class="markdownIt-Anchor" href="#naive-implementation-of-singleton"></a> Naive implementation of Singleton</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">namespace Singleton</span><br><span class="line">&#123;</span><br><span class="line">#nullable enable</span><br><span class="line">    public sealed class Singleton</span><br><span class="line">    &#123;</span><br><span class="line">        private static Singleton? _instance;</span><br><span class="line">        public static Singleton Instance</span><br><span class="line">        &#123;</span><br><span class="line">            get</span><br><span class="line">            &#123;</span><br><span class="line">                &#x2F;&#x2F; lazy instantiate</span><br><span class="line">                Logger.Log(&quot;Instance called&quot;);</span><br><span class="line">                return _instance ??&#x3D; new Singleton();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        private Singleton()</span><br><span class="line">        &#123;</span><br><span class="line">            &#x2F;&#x2F; cannot be created except within this class</span><br><span class="line">            Logger.Log(&quot;Constructor invoked&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The problem of this native implementation is Thread safety. In multi-thread environment, the If block can be reached by multiple threads concurrently, resulting in multiple instantiations of Singleton.</p><h2 id="thread-safe-singleton"><a class="markdownIt-Anchor" href="#thread-safe-singleton"></a> Thread Safe Singleton</h2><p>One way to make sure the Singleton Instance will not be created in a multiple thread environment is to use a lock</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">private static readonly object padlock &#x3D; new object();</span><br></pre></td></tr></table></figure><p>This lock is a private static readonly object that will be shared by all references to the Singleton instance</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; this lock is used on every reference to Singleton</span><br><span class="line">lock (padlock)</span><br><span class="line">&#123;</span><br><span class="line">    Logger.Log(&quot;Instance called.&quot;);</span><br><span class="line">    &#x2F;&#x2F; lazy instantiation</span><br><span class="line">    return _instance ??&#x3D; new Singleton();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>A slight better way to add lock is to use the double check locking pattern, this gives us a better performance because we don’t need to check lock very often</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">if (_instance &#x3D;&#x3D; null)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; this lock is used on every reference to Singleton</span><br><span class="line">    lock (padlock)</span><br><span class="line">    &#123;</span><br><span class="line">        Logger.Log(&quot;Instance called.&quot;);</span><br><span class="line">        &#x2F;&#x2F; lazy instantiation</span><br><span class="line">        _instance &#x3D; new Singleton();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">return _instance;</span><br></pre></td></tr></table></figure><ul><li>Locking adds thread safety</li><li>First version imposes lock on every access, not just first time</li><li>Second version is better, but has some issues with the ECMA CLI spec that may be a concern</li><li>Neither approach works as well as the next ones</li></ul><h2 id="static-constructors"><a class="markdownIt-Anchor" href="#static-constructors"></a> Static Constructors</h2><ul><li>C# static constructors only run once per app domain</li><li>static constructors are called when any static member of a type is referenced</li><li>Make sure you use an explicit static constructor to avoid issue with C# compiler and beforefieldinit (beforefieldinit is a hint the compiler uses to let it know static initializers can be called sooner, and this is the default if the type does not have an explicit static constructor. Adding an explicit static constructor avoids having beforefieldinit applied, which helps make our singleton behavior <strong>lazier</strong>)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">public sealed class StaticConstructorSingleton : ISingleton</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; reading this will initialize the instance</span><br><span class="line">    public static readonly string GREETING &#x3D; &quot;Hi!&quot;;</span><br><span class="line"></span><br><span class="line">    public static StaticConstructorSingleton Instance</span><br><span class="line">    &#123;</span><br><span class="line">        get</span><br><span class="line">        &#123;</span><br><span class="line">            Logger.Log(&quot;Instance called&quot;);</span><br><span class="line">            return Nested._instance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private class Nested</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F;Tell C# compiler not to mark type as beforefieldinit</span><br><span class="line">        static Nested()</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        internal static readonly StaticConstructorSingleton _instance &#x3D; new StaticConstructorSingleton();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private StaticConstructorSingleton()</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; cannot be created except within this class</span><br><span class="line">        Logger.Log(&quot;Constructor invoked.&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This approach is Thread-safe, no locks (good performance), but is complex and non-intuitive.</p><h2 id="lazyt"><a class="markdownIt-Anchor" href="#lazyt"></a> Lazy<T></h2><p>One difference between this approach and the naive approach is that the private static readonly field is type of <code>Lazy&lt;Singleton&gt;</code> rather than just Singleton, this field is initilized at construction to create a new <code>Lazy&lt;T&gt;</code> instance, and a lambda function is passed into the <code>Lazy&lt;T&gt;</code> constructor with the logic needed to create the singleton instance.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public sealed class LazyTSingleton</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; reading this will initilize the instance</span><br><span class="line">    private static readonly Lazy&lt;LazyTSingleton&gt; _lazy &#x3D; new Lazy&lt;LazyTSingleton&gt;(() &#x3D;&gt; new LazyTSingleton());</span><br><span class="line"></span><br><span class="line">    public static LazyTSingleton Instance</span><br><span class="line">    &#123;</span><br><span class="line">        get</span><br><span class="line">        &#123;</span><br><span class="line">            Logger.Log(&quot;Instance called.&quot;);</span><br><span class="line">            return _lazy.Value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private LazyTSingleton()</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; cannot be created except within this class</span><br><span class="line">        Logger.Log(&quot;Constructor invoked.&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This approach is very easy to understand and has the performance and thread safe feature.</p><h2 id="singletons-vs-static-classes"><a class="markdownIt-Anchor" href="#singletons-vs-static-classes"></a> Singletons vs Static Classes</h2><table><thead><tr><th>Singletons</th><th style="text-align:center">Static Classes</th></tr></thead><tbody><tr><td>Can implement interfaces</td><td style="text-align:center">No interfaces</td></tr><tr><td>Can be passed as an argument</td><td style="text-align:center">Cannot be passed as arguments</td></tr><tr><td>Can be assigned to variables</td><td style="text-align:center">Cannot be assigned</td></tr><tr><td>Support polymorphism</td><td style="text-align:center">Purely procedural</td></tr><tr><td>Can have state</td><td style="text-align:center">Can only access global state</td></tr><tr><td>Can be serialized</td><td style="text-align:center">No support for serialization</td></tr></tbody></table><h2 id="singleton-behavior-using-containersioc"><a class="markdownIt-Anchor" href="#singleton-behavior-using-containersioc"></a> Singleton Behavior Using Containers(IoC)</h2><ul><li>.NET Core has built-in support for IoC Containers</li><li>Classes request dependencies via constructor</li><li>Classes should follow Explicit Dependencies Principle</li><li>Container manages abstraction-implementation mapping</li><li>Container manages instnace lifetime</li></ul><p>Manage Lifetime Using Container, not Class Design</p><p>Easily manage and modify individual class lifetimes using an IoC container</p><p>Can also be used by any service, console application, etc…</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public void ConfigureService(ServiceCollection services) </span><br><span class="line">&#123;</span><br><span class="line">    services.AddTransient&lt;IOrderService, OrderService&gt;();</span><br><span class="line">    services.AddScoped&lt;IOrderRepository, OrderRepository&gt;();</span><br><span class="line">    services.AddSingleton&lt;IConnectionManager, ConnectionManager&gt;();</span><br><span class="line">    services.AddSingleton&lt;SomeInstance&gt;(new SomeInstance);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Transient: A new instance of the type is provided any time a class requests that type as a dependency.</p><p>Scope: Define a scope and any instance requested within that scope will be shared if it’s requested again within that socpe. The first request will get a new instance and all subsequent requests in that scope will get that same instance.</p><p>Singleton: only one instance will be created and shared by all references. Just like the Singleton pattern.</p><p>IoC containers are probably the best approach in systems that already use them. Otherwise, <code>Laszy&lt;T&gt;</code> provides an elegant, easily understood approach.</p><h2 id="summary"><a class="markdownIt-Anchor" href="#summary"></a> Summary</h2><ul><li>A Singleton class is designed to only ever have one instance created.</li><li>The Singleton pattern makes the class itself responsible for enforcing Singleton behavior</li><li>It’s easy to get the pattern wrong when implementing by hand</li><li><code>Lazy&lt;T&gt;</code> is one of the better ways to apply the pattern</li><li>Singletons are different from Static Classes</li><li>IoC/DI containers are usually a better place to manage instance lifetime in .NET applications.</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;A singleton is a class designed to only ever have one instance.&lt;/p&gt;
&lt;h2 id=&quot;singleton-features&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#singl</summary>
      
    
    
    
    
    <category term="Design Patterns" scheme="http://hellcy.github.io/tags/Design-Patterns/"/>
    
  </entry>
  
  <entry>
    <title>Creating Automated Browser Tests with Selenium in C#</title>
    <link href="http://hellcy.github.io/2021/04/14/Creating-Automated-Browser-Tests-with-Selenium-in-C/"/>
    <id>http://hellcy.github.io/2021/04/14/Creating-Automated-Browser-Tests-with-Selenium-in-C/</id>
    <published>2021-04-14T04:20:04.000Z</published>
    <updated>2021-05-24T07:27:02.658Z</updated>
    
    <content type="html"><![CDATA[<h2 id="what-is-selenium"><a class="markdownIt-Anchor" href="#what-is-selenium"></a> What is Selenium?</h2><p>Selenium is a portable framework for testing web applications. The tests can then run against most modern web browsers. Selenium runs on Windows, Linux, and macOS.</p><h3 id="some-of-the-features-we-can-do-using-selenium-webdriver"><a class="markdownIt-Anchor" href="#some-of-the-features-we-can-do-using-selenium-webdriver"></a> Some of the features we can do using Selenium WebDriver</h3><ul><li>Navigate to a specific page/forware/back</li><li>Click the button with an ID</li><li>Type text into the <code>&lt;input&gt;</code></li><li>Get the text content of the SPAN that has a CSS class</li><li>Choose a radio button</li><li>Check a tick box</li><li>Get the title of the current page</li><li>Maximum the browser window</li><li>Take a screenshot</li></ul><h3 id="selenium-webdriver-testing-architecture"><a class="markdownIt-Anchor" href="#selenium-webdriver-testing-architecture"></a> Selenium WebDriver Testing Architecture</h3><p><img src="/../images/Creating-Automated-Browser-Tests-with-Selenium-in-C/1.png" alt="" /></p><h3 id="the-limitations-of-automated-browser-tests"><a class="markdownIt-Anchor" href="#the-limitations-of-automated-browser-tests"></a> The Limitations of Automated Browser Tests</h3><ul><li>Slower than other types of tests (unit tests)</li><li>Not a replacement of all manuall testing</li><li>Additional dependencies (Selenium, WebDriver…)</li></ul><h2 id="setting-up-the-test-project"><a class="markdownIt-Anchor" href="#setting-up-the-test-project"></a> Setting up the test project</h2><h3 id="install-nuget-packages"><a class="markdownIt-Anchor" href="#install-nuget-packages"></a> Install NuGet Packages</h3><ol><li>Selenium.WebDriver</li><li>Selenium.WebDriver.ChromeDriver</li></ol><h3 id="your-first-test-case"><a class="markdownIt-Anchor" href="#your-first-test-case"></a> Your first test case</h3><p>The Web App has to be running for Selenium to work</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">private string baseUrl &#x3D; &quot;http:&#x2F;&#x2F;localhost:29128&#x2F;&quot;;</span><br><span class="line"></span><br><span class="line">[Test]</span><br><span class="line">[Category(&quot;Login&quot;)]</span><br><span class="line">public void ShouldLogin()</span><br><span class="line">&#123;</span><br><span class="line">    using (IWebDriver driver &#x3D; new ChromeDriver())</span><br><span class="line">    &#123;</span><br><span class="line">        driver.Navigate().GoToUrl(baseUrl);</span><br><span class="line"></span><br><span class="line">        var userNameBox &#x3D; driver.FindElement(By.Id(&quot;username&quot;));</span><br><span class="line">        userNameBox.SendKeys(&quot;admin&quot;);</span><br><span class="line"></span><br><span class="line">        Thread.Sleep(1000);</span><br><span class="line"></span><br><span class="line">        var passwordBox &#x3D; driver.FindElement(By.Id(&quot;password&quot;));</span><br><span class="line">        passwordBox.SendKeys(&quot;admin&quot;);</span><br><span class="line"></span><br><span class="line">        Thread.Sleep(1000);</span><br><span class="line"></span><br><span class="line">        var submitButton &#x3D; driver.FindElement(By.Id(&quot;submit&quot;));</span><br><span class="line">        submitButton.Click();</span><br><span class="line"></span><br><span class="line">        Thread.Sleep(1000);</span><br><span class="line"></span><br><span class="line">        var currentPageTitle &#x3D; driver.Title;</span><br><span class="line">        Assert.That(currentPageTitle, Is.EqualTo(&quot;identityOne - Home Page&quot;));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="get-page-title"><a class="markdownIt-Anchor" href="#get-page-title"></a> Get Page Title</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[Test]</span><br><span class="line">[Category(&quot;Test&quot;)]</span><br><span class="line">public void GetPageTitle()</span><br><span class="line">&#123;</span><br><span class="line">    using (IWebDriver driver &#x3D; new ChromeDriver())</span><br><span class="line">    &#123;</span><br><span class="line">        driver.Navigate().GoToUrl(baseUrl);</span><br><span class="line"></span><br><span class="line">        Assert.That(&quot;identityOne - Home Page&quot;, driver.Title);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="read-current-url"><a class="markdownIt-Anchor" href="#read-current-url"></a> Read current URL</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[Test]</span><br><span class="line">[Category(&quot;Test&quot;)]</span><br><span class="line">public void ReadCurrentUrl()</span><br><span class="line">&#123;</span><br><span class="line">    using (IWebDriver driver &#x3D; new ChromeDriver())</span><br><span class="line">    &#123;</span><br><span class="line">        driver.Navigate().GoToUrl(baseUrl);</span><br><span class="line"></span><br><span class="line">        Assert.That(baseUrl, driver.Url);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="reload-current-page-go-backwardforward"><a class="markdownIt-Anchor" href="#reload-current-page-go-backwardforward"></a> Reload current page / go backward/forward</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[Test]</span><br><span class="line">[Category(&quot;Test&quot;)]</span><br><span class="line">public void ReloadCurrentPage()</span><br><span class="line">&#123;</span><br><span class="line">    using (IWebDriver driver &#x3D; new ChromeDriver())</span><br><span class="line">    &#123;</span><br><span class="line">        driver.Navigate().GoToUrl(baseUrl);</span><br><span class="line"></span><br><span class="line">        driver.Navigate().Refresh();</span><br><span class="line">        driver.Navigate().Back();</span><br><span class="line">        driver.Navigate().Forward();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="manipulating-html-elements"><a class="markdownIt-Anchor" href="#manipulating-html-elements"></a> Manipulating HTML Elements</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">[Test]</span><br><span class="line">[Category(&quot;Test&quot;)]</span><br><span class="line">public void ReloadCurrentPage()</span><br><span class="line">&#123;</span><br><span class="line">    using (IWebDriver driver &#x3D; new ChromeDriver())</span><br><span class="line">    &#123;</span><br><span class="line">        driver.Navigate().GoToUrl(baseUrl);</span><br><span class="line"></span><br><span class="line">        IWebElement textElement &#x3D; driver.FindElement(By.Id(&quot;username&quot;)); &#x2F;&#x2F; find element by ID</span><br><span class="line">        string usernameText &#x3D; textElement.Text; &#x2F;&#x2F; Get HTML element text</span><br><span class="line"></span><br><span class="line">        IWebElement buttonElement &#x3D; driver.FindElement(By.Name(&quot;button&quot;)); &#x2F;&#x2F; find element by Name</span><br><span class="line">        buttonElement.Click(); &#x2F;&#x2F; Click a button or link</span><br><span class="line"></span><br><span class="line">        IWebElement linkElement &#x3D; driver.FindElement(By.LinkText(&quot;link&quot;)); &#x2F;&#x2F; find element by LinkText</span><br><span class="line">        linkElement.Click(); &#x2F;&#x2F; Click a button or link</span><br><span class="line"></span><br><span class="line">        IWebElement buttonElement &#x3D; driver.FindElement(By.CssSelector(&quot;body&quot;)); &#x2F;&#x2F; find element by CssSelector</span><br><span class="line"></span><br><span class="line">        IWebElement buttonElement &#x3D; driver.FindElement(By.ClassName(&quot;TestClass&quot;)); &#x2F;&#x2F; find element by class name</span><br><span class="line"></span><br><span class="line">        IWebElement textElement &#x3D; driver.FindElement(By.TagName(&quot;td&quot;)); &#x2F;&#x2F; find element by tag name</span><br><span class="line"></span><br><span class="line">        IWebElement linkElement &#x3D; driver.FindElement(By.PartialLinkText(&quot;Partial Text&quot;)); &#x2F;&#x2F; find element by PartialLinkText</span><br><span class="line"></span><br><span class="line">        IWebElement linkElement &#x3D; driver.FindElement(By.XPath(&quot;&#x2F;html&#x2F;body&#x2F;div[4]&#x2F;p&#x2F;a&quot;)); &#x2F;&#x2F; find element by XPath</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; this relative XPath will find all &lt;a&gt; elements with its text contains &#39;some text&#39;</span><br><span class="line">        IWebElement linkElement &#x3D; driver.FindElement(By.XPath(&quot;&#x2F;&#x2F;a[text()[contains(.,&#39;some text&#39;)]]&quot;)); &#x2F;&#x2F; find element by Relative XPath</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; WebDriverWait is given a timeout value indicating how long to wait for the condition.</span><br><span class="line">        WebDriverWait wait &#x3D; new WebDriverWait(driver, TimeSpan.FromSeconds(1));</span><br><span class="line">        &#x2F;&#x2F; Selenium will try to find the linkElement until the timeout value is reached</span><br><span class="line">        IWebElement linkElement &#x3D; wait.Until(d &#x3D;&gt; d.FineElement(By.LinkText(&quot;some text&quot;)));</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; Selecting multiple elements</span><br><span class="line">        ReadOnlyCollection&lt;IWebElement&gt; tableCells &#x3D; driver.FindElements(By.TagName(&quot;td&quot;));</span><br><span class="line"></span><br><span class="line">        Assert.That(&quot;first cell&quot;, tableCells[0].Text);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;what-is-selenium&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#what-is-selenium&quot;&gt;&lt;/a&gt; What is Selenium?&lt;/h2&gt;
&lt;p&gt;Selenium is a portable framew</summary>
      
    
    
    
    
    <category term="Selenium" scheme="http://hellcy.github.io/tags/Selenium/"/>
    
    <category term="Functional Tests" scheme="http://hellcy.github.io/tags/Functional-Tests/"/>
    
  </entry>
  
  <entry>
    <title>Dependency Injection in .NET</title>
    <link href="http://hellcy.github.io/2021/04/12/Dependency-Injection-in-NET/"/>
    <id>http://hellcy.github.io/2021/04/12/Dependency-Injection-in-NET/</id>
    <published>2021-04-12T11:05:18.000Z</published>
    <updated>2021-05-24T07:27:02.658Z</updated>
    
    <content type="html"><![CDATA[<h2 id="what-is-dependency-injection"><a class="markdownIt-Anchor" href="#what-is-dependency-injection"></a> What is dependency injection?</h2><p>Dependency injection is a programming technique that makes a class independent of its dependencies. It achieves that by decoupling the usage of an object from its creation. This helps you to follow SOLID’s dependency inversion and single responsiblity principles.</p><h3 id="benefits-of-loose-coupling"><a class="markdownIt-Anchor" href="#benefits-of-loose-coupling"></a> Benefits of Loose Coupling</h3><ul><li>Easy to extend</li><li>Easy to test</li><li>Easy to maintain</li><li>Facilitates parallel development (rare conflict)</li><li>Facilitates late binding (runtime data binding)</li></ul><h3 id="dependency-injection-patterns"><a class="markdownIt-Anchor" href="#dependency-injection-patterns"></a> Dependency Injection Patterns</h3><ul><li>Constructor Injection</li><li>Property Injection</li><li>Method Injection</li><li>Ambient Context</li><li>Service Locator</li></ul><h2 id="application-overview"><a class="markdownIt-Anchor" href="#application-overview"></a> Application Overview</h2><p>The application contains four layers</p><ol><li>View (UI elements) such as the buttons and the list box</li><li>Presentation (UI logic): functions that the buttons call and the property that the data bound to the list box in the UI.</li><li>Data Access: Code that knows how to interact with the data store. It knows how to make a web service call, and then translate the results into objects that the Presentation layer can use.</li><li>Data Store: where we get the actual data, in this case, the web service.</li></ol><h3 id="tight-coupled-code"><a class="markdownIt-Anchor" href="#tight-coupled-code"></a> Tight Coupled Code</h3><p>In the initial code, all four layers are tightly coupled.</p><p>In the view layer, it creates PeopleViewModel()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public PeopleViewerWindow()</span><br><span class="line">&#123;</span><br><span class="line">    InitializeComponent();</span><br><span class="line">    viewModel &#x3D; new PeopleViewModel();</span><br><span class="line">    this.DataContext &#x3D; viewModel;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In the Presentation layer, it creates serviceReader()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public PeopleViewModel()</span><br><span class="line">&#123;</span><br><span class="line">    DataReader &#x3D; new ServiceReader();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In the Data Access layer, it hardcoded the web service url</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public class ServiceReader</span><br><span class="line">&#123;</span><br><span class="line">    WebClient client &#x3D; new WebClient();</span><br><span class="line">    string baseUri &#x3D; &quot;http:&#x2F;&#x2F;localhost:9874&#x2F;api&#x2F;people&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="potential-problems"><a class="markdownIt-Anchor" href="#potential-problems"></a> Potential problems</h3><ol><li><p>Hard to create unit test.<br />If I want to test UI element (like a button), I have to run the web services because they are tightly coupled. (PeopleViewerWindow needs PeopleViewModel which needs ServiceReader which needs WebClient).</p></li><li><p>Hard to extend<br />If I want to add another Data Store like read data from a CSV file or SQL DB, and I also want to have the option to choose to use cached data store. Then in the PeopleViewModel I need to write something like this</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public PeopleViewModel() &#123;</span><br><span class="line">    switch(dataReaderType) &#123;</span><br><span class="line">        case &#39;service&#39;: DataReader &#x3D; new ServiceReader();</span><br><span class="line">            break;</span><br><span class="line">        case &#39;service_cached&#39;: DataReader &#x3D; new CachedServiceReader();</span><br><span class="line">            break;</span><br><span class="line">        case &#39;text&#39;: DataReader &#x3D; new CSVReader();</span><br><span class="line">            break;</span><br><span class="line">        case &#39;text_cached&#39;: DataReader &#x3D; new CachedCSVReader();</span><br><span class="line">            break;</span><br><span class="line">        case &#39;sql&#39;: DataReader &#x3D; new SQLReader();</span><br><span class="line">            break;</span><br><span class="line">        case &#39;sql_cached&#39;: DataReader &#x3D; new CachedSQLReader();</span><br><span class="line">            break;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This breaks the Single Responsibility Principle, which is one of the SOLID principles. Because it is now doing too many things</p><ol><li>Presentation logic</li><li>Picking the data source (hardcoded web service url)</li><li>Managing object lifetime</li><li>Deciding when to use a cache</li></ol><h2 id="repository-pattern"><a class="markdownIt-Anchor" href="#repository-pattern"></a> Repository Pattern</h2><p>Mediates between the domain and data mapping layers using a collection-like interface for accessing domain objects.</p><p>It separates our application from the data storage technology.</p><p>In other words, we can say that a Repository Design Patternacts as a middleman or middle layer between the rest of the application and the data access logic. That means a repository pattern isolates all the data access code from the rest of the application. The advantage of doing so is that, if you need to do any change then you need to do in one place. Another benefit is that testing your controllers becomes easy because the testing framework need not run against the actual database access code.</p><p>The idea is that the repository knows how to communicate with the data store whether it is using HTTP, reading a file from the file system, or making a database call. It then takes the data that comes back and turns it into normal C# objects that the rest of the application can understand. This is exactly what the service reader does now. It makes a HTTP request to the web service, then parses the JSON result into Person objects that the application can use.</p><h3 id="crud-repository"><a class="markdownIt-Anchor" href="#crud-repository"></a> CRUD Repository</h3><p>The Interface Segregation Principle says that interfaces should only contain what the client needs. Normally a Repository should contain all Create, Read, Update and Delete. But in this case we only need Read.</p><h2 id="using-dependency-injection-to-build-loosely-coupled-application"><a class="markdownIt-Anchor" href="#using-dependency-injection-to-build-loosely-coupled-application"></a> Using Dependency Injection to Build Loosely-coupled Application</h2><p>Create a new interface</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public interface IPersonReader</span><br><span class="line">&#123;</span><br><span class="line">    IEnumerable&lt;Person&gt; GetPeople();</span><br><span class="line">    Person GetPerson(int id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In the Presentation layer, inject IPersonReader</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public PeopleViewModel(IPersonReader dataReader)</span><br><span class="line">&#123;</span><br><span class="line">    DataReader &#x3D; dataReader;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now we don’t create new ServiceReader in the Presentation layer, instead we make it someone else’s responsibility by adding IPersonReader to a contrcutor parameter.</p><p>IPersonReader could be ServiceReader or SQLReader or CSVReader but PeopleViewModel doesn’t care.</p><p>IPersonReader need to be created before creating PeopleViewModel.</p><p>In the UI layer, inject PeopleViewModel</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public PeopleViewerWindow(PeopleViewModel peopleViewModel)</span><br><span class="line">&#123;</span><br><span class="line">    InitializeComponent();</span><br><span class="line">    viewModel &#x3D; peopleViewModel;</span><br><span class="line">    this.DataContext &#x3D; viewModel;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Similar things happened in UI layer, now we don’t create new PeopleViewModel, instead we inject it to the constrctor.</p><p>PeopleViewModel need to be created before creating PeopleViewerWindow but it doesn’t care, as long as it is being passed to the constructor.</p><h3 id="dependency-inversion-principle"><a class="markdownIt-Anchor" href="#dependency-inversion-principle"></a> Dependency Inversion Principle</h3><p>This is Dependency Inversion Principle in action, now the View Model and the Viewer Window are no longer responsible for creating or managing the lifetime of the dependencies. Instead, the dependency, the data reader, is given to the View Model and the Viewer Window to use.</p><h3 id="object-composition"><a class="markdownIt-Anchor" href="#object-composition"></a> Object composition</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">private static void ComposeObjects()</span><br><span class="line">&#123;</span><br><span class="line">    var serviceReader &#x3D; new ServiceReader();</span><br><span class="line">    var peopleViewModel &#x3D; new PeopleViewModel(serviceReader);</span><br><span class="line">    Application.Current.MainWindow &#x3D; new PeopleViewerWindow(peopleViewModel);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The ServiceReader and PeopleViewModel objects have been created when the app starts. This code will run OnAppStarts.</p><h3 id="get-data-from-csv-file"><a class="markdownIt-Anchor" href="#get-data-from-csv-file"></a> Get Data from CSV file</h3><p>Because now the presentation layer and the data access layer are loosely coupled, if we want to change the data source, we could just create a CSVReader() instead of ServiceReader()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">private static void ComposeObjects()</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;var serviceReader &#x3D; new ServiceReader();</span><br><span class="line">    var serviceReader &#x3D; new CSVReader();</span><br><span class="line">    var peopleViewModel &#x3D; new PeopleViewModel(serviceReader);</span><br><span class="line">    Application.Current.MainWindow &#x3D; new PeopleViewerWindow(peopleViewModel);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We just need to implement CSVReader class and create a new CSV object. We don’t need to change any existing code.</p><h2 id="decorator-pattern"><a class="markdownIt-Anchor" href="#decorator-pattern"></a> Decorator pattern</h2><p>Wrap an existing interface to add functionality</p><p>The idea is we wrap an existing data reader, add the caching functionality and then expose the same data reader interface to the outside world.</p><p>Our service reader implements the IPersonReader interface. We take that service reader and wrap it in a caching reader. This adds the caching funcationality that we need. The caching reader is also an IPersonReader. So it looks just like any other data reader to the rest of the application. By using a Decorator, we can wrap any of our existing data readers.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public class CachingReader : IPersonReader</span><br><span class="line">&#123;</span><br><span class="line">    private IPersonReader _wrappedReader;</span><br><span class="line">    private TimeSpan _cacheDuration &#x3D; new TimeSpan(0, 0, 30);</span><br><span class="line"></span><br><span class="line">    private IEnumerable&lt;Person&gt; _cachedItems;</span><br><span class="line">    private DateTime _dataDateTime;</span><br><span class="line"></span><br><span class="line">    public CachingReader(IPersonReader wrappedReader)</span><br><span class="line">    &#123;</span><br><span class="line">        _wrappedReader &#x3D; wrappedReader;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public IEnumerable&lt;Person&gt; GetPeople() &#123;...&#125;</span><br><span class="line"></span><br><span class="line">    public Person GetPerson(int id) &#123;...&#125;</span><br><span class="line"></span><br><span class="line">    private bool IsCacheValid &#123;...&#125;</span><br><span class="line"></span><br><span class="line">    private void ValidateCache() &#123;...&#125;</span><br><span class="line"></span><br><span class="line">    private void InvalidateCache() &#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In this implementation, CachingReader implements IPersonReader, so it also has GetPeople and GetPerson functions. But it has some other functions (extra caching funcationality).</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">private static void ComposeObjects()</span><br><span class="line">&#123;</span><br><span class="line">    var wrappedReader &#x3D; new ServiceReader();</span><br><span class="line">    var reader &#x3D; new CachingReader(wrappedReader);</span><br><span class="line">    var peopleViewModel &#x3D; new PeopleViewModel(reader);</span><br><span class="line">    Application.Current.MainWindow &#x3D; new PeopleViewerWindow(peopleViewModel);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>When we want to use the CachingReader, we could first create a ServiceReader, so it has GetPeople and GetPerson function, and we inject this ServiceReader to the CachingReader’s contructor, which adds the extra caching funcationality.</p><p>This follows the <strong>Open/Closed Principle</strong>. Existing data readers can be extended without being modified.</p><p>This also follows the <strong>Liskov substitution principle</strong>. This principle says that descendent classes (CachingReader) should behave the same way the base class (ServiceReader) behave. Meaning we could substitude a child class (CachingReader) for a base class (ServiceReader) in our application, and the application does not know the difference.</p><p>We have extended the behavior in the child class, but the calling code does not know the difference.</p><h2 id="unit-testing-with-dependency-injection"><a class="markdownIt-Anchor" href="#unit-testing-with-dependency-injection"></a> Unit Testing with Dependency Injection</h2><p>Before when we need to test the ViewModel, the data service needs to run. Because of the old code looks like this.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public PeopleViewModel() &#123;</span><br><span class="line">    DataReader &#x3D; new ServiceReader();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class ServiceReader() &#123;</span><br><span class="line">    WebClient client &#x3D; new WebClient();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now we can just create a fake Reader and provide some fake Person data. The test of ViewModel is isolated from the Data Store.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[Test]</span><br><span class="line">public void Test() &#123;</span><br><span class="line">    &#x2F;&#x2F; Arrange</span><br><span class="line">    IPersonReader reader &#x3D; GetFakeReader();</span><br><span class="line">    var viewModel &#x3D; new PeopleViewModel(reader);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Act</span><br><span class="line">    viewModel.RefreshPeople();</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Assert</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Below is the real unit test code. By passing the FakeReader() to the PeopleViewModel(), we don’t need to create WebClient any more, which makes it easier to write unit test.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[TestMethod]</span><br><span class="line">public void People_OnRefreshPeople_IsPopulated()</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Arrange</span><br><span class="line">    var reader &#x3D; new FakeReader();</span><br><span class="line">    var viewModel &#x3D; new PeopleViewModel(reader);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Act</span><br><span class="line">    viewModel.RefreshPeople();</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Assert</span><br><span class="line">    Assert.IsNotNull(viewModel.People);</span><br><span class="line">    Assert.AreEqual(2, viewModel.People.Count());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Next we want to test CSVReader(), but we need to put a real CSV data file in the project directory to make it work because it is expecting a filePath.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public CSVReader()</span><br><span class="line">&#123;</span><br><span class="line">    string filePath &#x3D; AppDomain.CurrentDomain.BaseDirectory + &quot;People.txt&quot;;</span><br><span class="line">    FileLoader &#x3D; new CSVFileLoader(filePath);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Luckly, the FileLoader is a public property which can be overrided.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public ICSVFileLoader FileLoader &#123; get; set; &#125;</span><br></pre></td></tr></table></figure><p>So we could create a FakeFileReader that provides the fake data. We override the property with our own behavior so it doesn’t depend on the file system. This is called <strong>Property Injection</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[TestMethod]</span><br><span class="line">public void GetPeople_WithGoodRecords_ReturnsAllRecords()</span><br><span class="line">&#123;</span><br><span class="line">    var reader &#x3D; new CSVReader();</span><br><span class="line">    reader.FileLoader &#x3D; new FakeFileLoader(&quot;Good&quot;);</span><br><span class="line"></span><br><span class="line">    var result &#x3D; reader.GetPeople();</span><br><span class="line"></span><br><span class="line">    Assert.AreEqual(2, result.Count());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="property-injection"><a class="markdownIt-Anchor" href="#property-injection"></a> Property Injection</h3><p>Class property is initialized for standard behavior. By default, the standard behavior is used. Property can be set to provide alternate behavior.</p><p>One question is, why not use Constructor Injection like what we did in the previous charpter? Instead of creating CSVFileLoader in the CSVReader constructor, we could inject FileLoader.</p><p>This is because we only use FakeFileLoader when doing unit test. In production, it will use CSVFileLoader 100% of the time.</p><p>So Constructor injection is only good for when we want to force a decision on a dependency. Property injection is good for when we have a default dependency (CSVFileLoader) that we want to use most of the time.</p><h2 id="dependency-injection-containers"><a class="markdownIt-Anchor" href="#dependency-injection-containers"></a> Dependency Injection Containers</h2><ul><li>Autofac</li><li>Ninject</li><li>Unity</li><li>Castle Windsor</li><li><a href="http://Spring.NET">Spring.NET</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;what-is-dependency-injection&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#what-is-dependency-injection&quot;&gt;&lt;/a&gt; What is dependency injection?&lt;/</summary>
      
    
    
    
    
    <category term="Dependency Injection" scheme="http://hellcy.github.io/tags/Dependency-Injection/"/>
    
  </entry>
  
  <entry>
    <title>SQL Fundamentals</title>
    <link href="http://hellcy.github.io/2021/04/11/SQL-Fundamentals/"/>
    <id>http://hellcy.github.io/2021/04/11/SQL-Fundamentals/</id>
    <published>2021-04-11T10:05:17.000Z</published>
    <updated>2021-05-24T07:27:02.660Z</updated>
    
    <content type="html"><![CDATA[<h2 id="where"><a class="markdownIt-Anchor" href="#where"></a> WHERE</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM Table WHERE ColumnName &lt;&gt; &#39;Some value&#39;.</span><br></pre></td></tr></table></figure><p>This Query will not return Null values.</p><p>To return Null values we need to check if <code>Column is NULL</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM Table WHERE ColumnName IS NULL</span><br></pre></td></tr></table></figure><h2 id="like"><a class="markdownIt-Anchor" href="#like"></a> LIKE</h2><p>If a column has type <code>varchar(50)</code>, and in one row its value doesn’t have length 50. Spaces will be added to the end.</p><p>So <code>WHERE ColumnName LIKE '%SomeValue'</code> will return nothing. You can write the query like this. <code>WHERE ColumnName LIKE '%SomeValue%'</code></p><h2 id="functions"><a class="markdownIt-Anchor" href="#functions"></a> Functions</h2><ul><li>LEFT(): return the left most char from string</li><li>RIGHT(): return the right most char from string</li><li>LTRIM(): remove the spaces on the left of string</li><li>RTRIM(): remove the spaces on the right of string</li></ul><h2 id="group-by-and-having"><a class="markdownIt-Anchor" href="#group-by-and-having"></a> GROUP BY and HAVING</h2><p>GROUP BY will group values into different groups. HAVING can filter out some values after GROUP BY.</p><h2 id="join"><a class="markdownIt-Anchor" href="#join"></a> JOIN</h2><h3 id="inner-join"><a class="markdownIt-Anchor" href="#inner-join"></a> INNER JOIN</h3><p>The default JOIN, rows will be returned if they appear in both tables</p><h3 id="cross-join"><a class="markdownIt-Anchor" href="#cross-join"></a> CROSS JOIN</h3><p>Will return the combination of rows from Table A and Table B. If Table A has 4 rows and Table B has 10 row, it will return 40 rows.</p><h3 id="outer-join"><a class="markdownIt-Anchor" href="#outer-join"></a> OUTER JOIN</h3><ul><li>LEFT OUTER JOIN (LEFT JOIN)</li></ul><p>The OUTER keyword is optional. LEFT OUTER JOIN is the same as LEFT JOIN. Values will be returned if it appear in the LEFT table. It doesn’t need to be in the RIGHT table.</p><ul><li>RIGHT OUTER JOIN (RIGHT JOIN)</li></ul><p>RIGHT OUTER JOIN is the same as RIGHT JOIN. Values will be returned if it appear in the RIGHT table. It doesn’t need to be in the LEFT table.</p><ul><li>FULL OUTER JOIN (FULL JOIN)</li></ul><p>Values will be returned if they appear in either LEFT table or RIGHT table.</p><h2 id="union"><a class="markdownIt-Anchor" href="#union"></a> UNION</h2><p>UNION can be placed between SELECT queries.</p><p>Rows will be appended for each SELECT.</p><p>Each SELECT must have same number of Columns and DataType needs to match.</p><h3 id="union-all"><a class="markdownIt-Anchor" href="#union-all"></a> UNION ALL</h3><p>If SELECT queries return same rows, they will all be returned.</p><h2 id="insert"><a class="markdownIt-Anchor" href="#insert"></a> INSERT</h2><h3 id="insert-select"><a class="markdownIt-Anchor" href="#insert-select"></a> INSERT SELECT</h3><p>The values returned from SELECT will be inserted immediately. Works will multiple rows.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO TableA(ColumnA, ColumnB)</span><br><span class="line">SELECT ColumnA, ColumnB</span><br><span class="line">FROM TableB</span><br></pre></td></tr></table></figure><h2 id="update-and-delete"><a class="markdownIt-Anchor" href="#update-and-delete"></a> UPDATE and DELETE</h2><p>If we want to delete some value in a row, we could SET it to NULL</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE Table SET ColumnName &#x3D; NULL WHERE RowId &#x3D; 1</span><br></pre></td></tr></table></figure><h2 id="create-table"><a class="markdownIt-Anchor" href="#create-table"></a> CREATE TABLE</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE TableName </span><br><span class="line">(</span><br><span class="line">ProductId int NOT NULL,</span><br><span class="line">Quantity int NOT NULL DEFAULT 1,</span><br><span class="line">ProductName varchar(10) NULL</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="create-view"><a class="markdownIt-Anchor" href="#create-view"></a> CREATE VIEW</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE VIEW ViewName AS </span><br><span class="line">SELECT *</span><br><span class="line">FROM Table</span><br><span class="line">WHERE ...</span><br></pre></td></tr></table></figure><p>VIEW is a temp Table, it can save complex SELECT queries and can be reused later.</p><h2 id="transaction"><a class="markdownIt-Anchor" href="#transaction"></a> TRANSACTION</h2><p>If there is error in the middle of a TRANSACTION, it will not COMMIT</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">BEGIN TRANSACTION</span><br><span class="line">-- Multiple UPDATE&#x2F;INSERT&#x2F;DELETE queries</span><br><span class="line">COMMIT TRANSACTION</span><br></pre></td></tr></table></figure><h3 id="savepoint-and-rollback"><a class="markdownIt-Anchor" href="#savepoint-and-rollback"></a> SAVEPOINT and ROLLBACK</h3><p>If error happens in the middle of a TRANSACTION and we don’t want to ROLLBACK to the start. We can create SAVEPOINT and let it ROLLBACK to that point.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">BEGIN TRANSACTION</span><br><span class="line"></span><br><span class="line">INSERT INTO Table(ColumnA, ColumnB) VALUES (1, 2);</span><br><span class="line"></span><br><span class="line">SAVE TRANSACTION PointOne;</span><br><span class="line"></span><br><span class="line">INSERT INTO Table(ColumnA, ColumnB) VALUE (1, 2);</span><br><span class="line"></span><br><span class="line">If @@ERROR &lt;&gt; 0 ROLLBACK TRANSACTION PointOne;</span><br><span class="line"></span><br><span class="line">COMMIT TRANSACTION</span><br></pre></td></tr></table></figure><p>In the above code, if the second INSERT failed, @@ERROR will return a non-zero value, it will ROLLBACK to SAVEPOINT PointOne.</p><h2 id="constraint"><a class="markdownIt-Anchor" href="#constraint"></a> Constraint</h2><ul><li>Primary key</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Table </span><br><span class="line">(</span><br><span class="line">    RowId int NOT NULL PRIMARY KEY</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li>Foreign key</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Table </span><br><span class="line">(</span><br><span class="line">    RowId int NOT NULL PRIMARY KEY,</span><br><span class="line">    ForeignId int NOT NULL REFERENCES TableB(Id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>Foreign Key values must come from Primary key in the other table.</p><p>Primary key records cannot be deleted unless all Foreign key records were deleted first.</p><p>Some DBMS support CASCADE DELETE, which will delete the Primary key record and related Foreign key record in other tables.</p><ul><li>UNIQUE</li></ul><p>One table could have multiple UNIQUE Constraint.</p><ul><li>CHECK</li></ul><p>Further restrict values in this Column</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Table </span><br><span class="line">(</span><br><span class="line">    quantity int NOT NULL CHECK (quantity &gt; 0),</span><br><span class="line">    gender varchar(1) NOT NULL CHECK (gender LIKE &#39;[MF]&#39;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="index"><a class="markdownIt-Anchor" href="#index"></a> INDEX</h2><p>If you create an index on a Column, DB will sort this Column and store it. Next time you SELECT by this Column, DB will search faster (binary search) because it is sorted.</p><p>But add index to a Column will decrease the efficiency of doing UPDATE/INSERT/DELETE on those Columns. Because DB needs to update INDEX on those Columns.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE INDEX Table_Column_Index</span><br><span class="line">ON Table (Column);</span><br></pre></td></tr></table></figure><h2 id="trigger"><a class="markdownIt-Anchor" href="#trigger"></a> TRIGGER</h2><p>TRIGGER will be execute when certain changes happen to a table</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TRIGGER Table_trigger</span><br><span class="line">ON Table</span><br><span class="line">FOR INSERT, UPDATE</span><br><span class="line">AS </span><br><span class="line">UPDATE Table</span><br><span class="line">SET ColumnName &#x3D; Upper(ColumnName)</span><br><span class="line">WHERE Table.Id &#x3D; inserted.Id</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;where&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#where&quot;&gt;&lt;/a&gt; WHERE&lt;/h2&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre</summary>
      
    
    
    
    
    <category term="SQL" scheme="http://hellcy.github.io/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>.NET with NUnit Test</title>
    <link href="http://hellcy.github.io/2021/04/08/NET-with-NUnit-Test/"/>
    <id>http://hellcy.github.io/2021/04/08/NET-with-NUnit-Test/</id>
    <published>2021-04-08T13:06:15.000Z</published>
    <updated>2021-05-24T07:27:02.659Z</updated>
    
    <content type="html"><![CDATA[<h2 id="what-is-nunit"><a class="markdownIt-Anchor" href="#what-is-nunit"></a> What is NUnit?</h2><p>NUnit is a unit-testing framework for all .Net languages. Initially ported from JUnit, the current production release, version 3, has been completely rewritten with many new features and support for a wide range of .NET platforms.</p><h3 id="nuget-packages"><a class="markdownIt-Anchor" href="#nuget-packages"></a> NuGet Packages</h3><ol><li>NUnit</li><li>NUnit3TestAdapter</li><li>Microsoft.NET.Test.Sdk</li></ol><h3 id="your-first-nunit-test-case"><a class="markdownIt-Anchor" href="#your-first-nunit-test-case"></a> Your First NUnit Test Case</h3><p>Add <code>[TestFixture]</code> and <code>[Test]</code> to mark code as tests</p><p>Test can be run in Test Explorer and in Command Line</p><h2 id="why-write-automated-tests"><a class="markdownIt-Anchor" href="#why-write-automated-tests"></a> Why Write Automated Tests?</h2><p>Help to find defects and regressions. When we make a change to the project, we may find that unintentionally break one of the existing tests. Something that once working is no longer working.</p><p>Automated Tests give us greater confidence that the software is working as it should.</p><h2 id="understanding-the-nunit-test-framework"><a class="markdownIt-Anchor" href="#understanding-the-nunit-test-framework"></a> Understanding the NUnit Test Framework</h2><ul><li><p>NUnit Library</p><ul><li>Attributes e.g. <code>[Test]</code></li><li>Assertions</li></ul></li><li><p>Test Runner</p><ul><li>Recognizes attributes</li><li>Execute test methods</li><li>Report test results</li><li>Test explorer</li><li>donet test</li></ul></li></ul><h3 id="nunit-attributes-overview"><a class="markdownIt-Anchor" href="#nunit-attributes-overview"></a> NUnit attributes Overview</h3><ol><li><code>[TestFixture]</code>: Mark a class that contains tests</li><li><code>[Test]</code>: Mark a method as a test</li><li><code>[Category]</code>: Organize tests into categories</li><li><code>[TestCase]</code>: Data driven test cases</li><li><code>[Values]</code>: Data driven test parameters</li><li><code>[Sequential]</code>: How to combine test data</li><li><code>[SetUp]</code>: Run code before each test</li><li><code>[OneTimeSetUp]</code>: Run code before first test in class</li></ol><h3 id="nunite-assertions-overview"><a class="markdownIt-Anchor" href="#nunite-assertions-overview"></a> NUnite Assertions Overview</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Constraint Model of assertions (newer)</span><br><span class="line">Assert.That(sut.Years, Is.EqualTo(1));</span><br><span class="line">Assert.That(test result, constraint instance);</span><br></pre></td></tr></table></figure><p>This Classic Model is still supported but since no new features have been added to it for some time. the constraint-based model must be used in order to have full access to NUnit’s capabilities.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Classic Model of assertions (older)</span><br><span class="line">Assert.AreEqual(1, sut.Years);</span><br><span class="line">Assert.NotNull(sut.Years);</span><br><span class="line">Assert.xyz(...);</span><br></pre></td></tr></table></figure><h3 id="the-logical-arrange-act-assert-test-phases"><a class="markdownIt-Anchor" href="#the-logical-arrange-act-assert-test-phases"></a> The Logical Arrange, Act, Assert Test Phases</h3><ol><li>Arrange: Set up test objects, initialize test data</li><li>Act: call methods, set property, to cause some effect in the project</li><li>Assert: compare returned value/end state with expected</li></ol><h3 id="qualities-of-good-tests"><a class="markdownIt-Anchor" href="#qualities-of-good-tests"></a> Qualities of Good Tests</h3><ul><li>Fast</li><li>Repeatable</li><li>Isolated: One Test should not depend on others to run</li><li>Trustworthy</li><li>Valuable</li></ul><h2 id="asserting-on-different-types-of-results"><a class="markdownIt-Anchor" href="#asserting-on-different-types-of-results"></a> Asserting on Different Types of Results</h2><p><strong>Asserts</strong>: Evaluate and verify the outcome of a test based on a returned result, final object state, or the occurence of events observed during execution. An assert should either pass or fail.</p><h3 id="how-many-asserts-per-test"><a class="markdownIt-Anchor" href="#how-many-asserts-per-test"></a> How many asserts per test?</h3><p>A single test usually focuses on testing a single ‘behaviour’. Multiple asserts are usually ok if all the asserts are related to testing this single behaviour.</p><h3 id="asserting-on-equality"><a class="markdownIt-Anchor" href="#asserting-on-equality"></a> Asserting on Equality</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; compare value</span><br><span class="line">Assert.That(a, Is.EqualTo(...));</span><br><span class="line">Assert.That(a, Is.Not.EqualTo(...));</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; compare reference</span><br><span class="line">Assert.That(a, Is.SameAs(...));</span><br><span class="line">Assert.That(a, Is.Not.SameAs(...));</span><br></pre></td></tr></table></figure><h3 id="adding-custom-failure-message"><a class="markdownIt-Anchor" href="#adding-custom-failure-message"></a> Adding custom failure message</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Assert.That(a, Is.EqualTo(...), &quot;Custom Error Message&quot;);</span><br></pre></td></tr></table></figure><h3 id="asserting-on-floating-numbers"><a class="markdownIt-Anchor" href="#asserting-on-floating-numbers"></a> Asserting on Floating Numbers</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Assert.That(a, Is.EqualTo(0.33).Within(0.001));</span><br><span class="line">Assert.That(a, Is.EqualTo(0.33).Within(10).Percent);</span><br></pre></td></tr></table></figure><h3 id="asserting-on-null-values"><a class="markdownIt-Anchor" href="#asserting-on-null-values"></a> Asserting on Null Values</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">string name &#x3D; &quot;yuan&quot;;</span><br><span class="line"></span><br><span class="line">Assert.That(name, Is.Null); &#x2F;&#x2F; fail</span><br><span class="line">Assert.That(name, Is.Not.Null); &#x2F;&#x2F; pass</span><br></pre></td></tr></table></figure><h3 id="asserting-on-string-values"><a class="markdownIt-Anchor" href="#asserting-on-string-values"></a> Asserting on String Values</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">string name &#x3D; &quot;yuan&quot;;</span><br><span class="line"></span><br><span class="line">Assert.That(name, Is.Empty); &#x2F;&#x2F; fail</span><br><span class="line">Assert.That(name, Is.Not.Empty); &#x2F;&#x2F; pass</span><br><span class="line"></span><br><span class="line">Assert.That(name, Is.EqualTo(&quot;yuan&quot;)); &#x2F;&#x2F; pass</span><br><span class="line">Assert.That(name, Is.EqualsTo(&quot;YUAN&quot;)); &#x2F;&#x2F; fail, case-sensitive</span><br><span class="line">Assert.That(name, Is.EqualTo(&quot;YUAN&quot;).IgnoreCase); &#x2F;&#x2F; pass</span><br><span class="line"></span><br><span class="line">Assert.That(name, Does.StartWith(&quot;yu&quot;)); &#x2F;&#x2F; pass</span><br><span class="line">Assert.That(name, Does.EndWith(&quot;an&quot;)); &#x2F;&#x2F; pass</span><br><span class="line">Assert.That(name, Does.Contain(&quot;ua)); &#x2F;&#x2F; pass</span><br><span class="line">Assert.That(name, Does.Not.Contain(&quot;kk&quot;)); &#x2F;&#x2F; pass</span><br><span class="line">Assert.That(name, Does.StartWith(&quot;yu&quot;)</span><br><span class="line">                    .And</span><br><span class="line">                    .EndWith(&quot;an&quot;)); &#x2F;&#x2F; pass</span><br><span class="line">Assert.That(name, Does.StartWith(&quot;kk&quot;)</span><br><span class="line">                    .Or</span><br><span class="line">                    .EndWith(&quot;an&quot;)); &#x2F;&#x2F; pass</span><br></pre></td></tr></table></figure><h3 id="asserting-on-boolean-values"><a class="markdownIt-Anchor" href="#asserting-on-boolean-values"></a> Asserting on Boolean Values</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">bool isTrue &#x3D;  true;</span><br><span class="line"></span><br><span class="line">Assert.That(isTrue); &#x2F;&#x2F; pass</span><br><span class="line">Assert.That(isTrue, Is.True); &#x2F;&#x2F; pass</span><br><span class="line"></span><br><span class="line">bool isFalse &#x3D; false;</span><br><span class="line"></span><br><span class="line">Assert.That(isFalse &#x3D;&#x3D; false); &#x2F;&#x2F; pass</span><br><span class="line">Assert.That(isFalse, Is.False); &#x2F;&#x2F; pass</span><br><span class="line">Assert.That(isFalse, Is.Not.True); &#x2F;&#x2F; pass</span><br></pre></td></tr></table></figure><h3 id="asserting-within-ranges"><a class="markdownIt-Anchor" href="#asserting-within-ranges"></a> Asserting within Ranges</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">int i &#x3D; 42;</span><br><span class="line"></span><br><span class="line">Assert.That(i, Is.GreaterThan(42)); &#x2F;&#x2F; fail</span><br><span class="line">Assert.That(i, Is.GreaterThanOrEqualTo(42)); &#x2F;&#x2F; pass</span><br><span class="line">Assert.That(i, Is.LessThan(42)); &#x2F;&#x2F; fail</span><br><span class="line">Assert.That(i, Is.GreaterThanOrEqualTo(42)); &#x2F;&#x2F; pass</span><br><span class="line">Assert.That(i, Is.InRange(40, 50)); &#x2F;&#x2F; pass</span><br><span class="line"></span><br><span class="line">DateTiem d1 &#x3D; new DateTime(2021, 2, 20);</span><br><span class="line">DateTiem d2 &#x3D; new DateTime(2021, 2, 25);</span><br><span class="line"></span><br><span class="line">Assert.That(d1, Is.EqualTo(d2)); &#x2F;&#x2F; fail</span><br><span class="line">Assert.That(d1, Is.EqualTo(d2).Within(4).Days); &#x2F;&#x2F; fail</span><br><span class="line">Assert.That(d1, Is.EqualTo(d2).Within(5).Days); &#x2F;&#x2F; pass</span><br></pre></td></tr></table></figure><h3 id="asserting-on-objects"><a class="markdownIt-Anchor" href="#asserting-on-objects"></a> Asserting on Objects</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">class Product &#123;</span><br><span class="line">    int ProductId &#123;get; set;&#125;</span><br><span class="line">    string ProductName &#123;get; set;&#125;</span><br><span class="line"></span><br><span class="line">    Product(int ProductId, string ProductName) &#123;</span><br><span class="line">        this.ProductId &#x3D; ProductId;</span><br><span class="line">        this.ProductName &#x3D; ProductName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var products &#x3D; new List&lt;Product&gt; &#123;</span><br><span class="line">    new Product(1, &quot;a&quot;),</span><br><span class="line">    new Product(2, &quot;b&quot;),</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Assert.That(products, Has.Exactly(2).Items); &#x2F;&#x2F; pass</span><br><span class="line">Assert.That(products, Is,Unique); &#x2F;&#x2F; pass</span><br><span class="line">Assert.That(products, Has.Exactly(1)</span><br><span class="line">                        .Property(&quot;ProductName&quot;).EqualTo(&quot;a&quot;)</span><br><span class="line">                        .And</span><br><span class="line">                        .Property(&quot;ProductId).EqualTo(1));</span><br><span class="line"></span><br><span class="line">Assert.That(products, Has.Exactly(1)</span><br><span class="line">                        .Matches&lt;Product&gt;(</span><br><span class="line">                        item &#x3D;&gt; item.ProductName &#x3D;&#x3D; &quot;a&quot; &amp;&amp;</span><br><span class="line">                                item.ProductId &#x3D;&#x3D; 1</span><br><span class="line">                        ));</span><br></pre></td></tr></table></figure><h2 id="controlling-test-execution"><a class="markdownIt-Anchor" href="#controlling-test-execution"></a> Controlling Test Execution</h2><p>Use <code>[Ignore]</code> to skip tests. <code>[Ignore]</code> could also be put before class to skip the entire test class</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[Test]</span><br><span class="line">[Ignore(&quot;Custom reason why we need to skip this test&quot;)]</span><br><span class="line">public void TestWillNotRun() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Use <code>[Category]</code> to add test cases to categories, we can only run tests for certain category.</p><p>In Test Explorer, we can group tests by <strong>Traits</strong>, which is just another name for Category</p><p>One Test Case can belongs to multiple <code>[Category]</code>.</p><p><code>[Category]</code> can be applied to <strong>Class</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[Test]</span><br><span class="line">[Category(&quot;Category 1&quot;)]</span><br><span class="line">public void TestInCategoryOne() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>[SetUp]</code> code will be executed before each test. So it is a good place to define variables and objects.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class TestClass &#123;</span><br><span class="line">    private List&lt;Product&gt; products;</span><br><span class="line">    private string test;</span><br><span class="line"></span><br><span class="line">    [SetUp]</span><br><span class="line">    public void Setup() &#123;</span><br><span class="line">        products &#x3D; new List&lt;Products&gt; &#123;</span><br><span class="line">            new Product(1, &quot;a&quot;),</span><br><span class="line">            new Product(2, &quot;b&quot;),</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        test &#x3D; &quot;test&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>[TearDown]</code> code will be executed after each test, it is the place to dispose all unnecessary objects</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class TestClass &#123;</span><br><span class="line">    [TearDown]</span><br><span class="line">    public void Setup() &#123;</span><br><span class="line">        if (products !&#x3D; null) &#123;</span><br><span class="line">            ((IDisposable)products).Dispose();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>[OneTimeSetUp]</code> code will be executed once before the first test case. Define objects that will not be modified by test cases here.</p><p><code>[OneTimeTearDown]</code> code will be executed once after the last test case. Dispose any objects here.</p><h2 id="data-driven-tests-and-reducing-code-duplication"><a class="markdownIt-Anchor" href="#data-driven-tests-and-reducing-code-duplication"></a> Data Driven Tests and Reducing Code Duplication</h2><p><code>[TestCase]</code>: If we want to run the same test but with different data, we could pass different variables into the test function.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[Test]</span><br><span class="line">[TestCase(200_000, 6.5, 30, 1264.14)]</span><br><span class="line">[TestCase(200_000, 10, 30, 1755.14)]</span><br><span class="line">[TestCase(500_000, 10, 30, 4387.86)]</span><br><span class="line">public void CalculateCorrectMonthlyRepayment(decimal principal, decimal interestRate, int termInYears, decimal expectedMonthlyPayment)</span><br><span class="line">&#123;</span><br><span class="line">    var sut &#x3D; new LoanRepaymentCalculator();</span><br><span class="line"></span><br><span class="line">    var monthlyPayment &#x3D; sut.CalculateMonthlyRepayment(</span><br><span class="line">                            new LoanAmount(&quot;USD&quot;, principal), interestRate, new LoanTerm(termInYears));</span><br><span class="line"></span><br><span class="line">    Assert.That(monthlyPayment, Is.EqualTo(expectedMonthlyPayment));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[Test]</span><br><span class="line">[TestCase(200_000, 6.5, 30, ExpectedResult &#x3D; 1264.14)]</span><br><span class="line">[TestCase(200_000, 10, 30, ExpectedResult &#x3D; 1755.14)]</span><br><span class="line">[TestCase(500_000, 10, 30, ExpectedResult &#x3D; 4387.86)]</span><br><span class="line">public decimal CalculateCorrectMonthlyRepayment_SimplifiedTestCase(decimal principal, decimal interestRate, int termInYears)</span><br><span class="line">&#123;</span><br><span class="line">    var sut &#x3D; new LoanRepaymentCalculator();</span><br><span class="line"></span><br><span class="line">    return sut.CalculateMonthlyRepayment(new LoanAmount(&quot;USD&quot;, principal), interestRate, new LoanTerm(termInYears));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="create-test-case-from-centralized-data-class"><a class="markdownIt-Anchor" href="#create-test-case-from-centralized-data-class"></a> Create Test Case from Centralized Data Class</h3><p><code>[TestCaseSource(typeof(Class_Name), &quot;Function_Name&quot;)]</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[Test]</span><br><span class="line">[TestCaseSource(typeof(MonthlyRepaymentTestData), &quot;TestCases&quot;)]</span><br><span class="line">public void CalculateCorrectMonthlyRepayment_Centralized(decimal principal, decimal interestRate, int termInYears, decimal expectedMonthlyPayment)</span><br><span class="line">&#123;</span><br><span class="line">    var sut &#x3D; new LoanRepaymentCalculator();</span><br><span class="line"></span><br><span class="line">    var monthlyPayment &#x3D; sut.CalculateMonthlyRepayment(</span><br><span class="line">                            new LoanAmount(&quot;USD&quot;, principal), interestRate, new LoanTerm(termInYears));</span><br><span class="line"></span><br><span class="line">    Assert.That(monthlyPayment, Is.EqualTo(expectedMonthlyPayment));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="create-test-case-with-data-from-file"><a class="markdownIt-Anchor" href="#create-test-case-with-data-from-file"></a> Create Test Case with Data from File</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[Test]</span><br><span class="line">[TestCaseSource(typeof(MonthlyRepaymentCsvData), &quot;GetTestCases&quot;, new object[] &#123; &quot;Data.csv&quot; &#125;)]</span><br><span class="line">public void CalculateCorrectMonthlyRepayment_Csv(decimal principal, decimal interestRate, int termInYears, decimal expectedMonthlyPayment)</span><br><span class="line">&#123;</span><br><span class="line">    var sut &#x3D; new LoanRepaymentCalculator();</span><br><span class="line"></span><br><span class="line">    var monthlyPayment &#x3D; sut.CalculateMonthlyRepayment(</span><br><span class="line">                            new LoanAmount(&quot;USD&quot;, principal), interestRate, new LoanTerm(termInYears));</span><br><span class="line"></span><br><span class="line">    Assert.That(monthlyPayment, Is.EqualTo(expectedMonthlyPayment));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="create-test-cases-with-values-sequential-and-range"><a class="markdownIt-Anchor" href="#create-test-cases-with-values-sequential-and-range"></a> Create Test Cases with Values, Sequential and Range</h3><p>Without <code>[Sequential]</code>, it will create 3 * 3 * 3 = 27 test cases<br />With <code>[Sequential]</code>, it will only create 3 test cases</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[Test]</span><br><span class="line">[Sequential]</span><br><span class="line">public void CalculateCorrectMonthlyRepayment_Combinatorial(</span><br><span class="line">    [Values(100_000, 200_000, 500_000)] decimal principal,</span><br><span class="line">    [Values(6.5, 10, 20)] decimal interestRate,</span><br><span class="line">    [Values(10, 20, 30)] int termInYears)</span><br><span class="line">&#123;</span><br><span class="line">    var sut &#x3D; new LoanRepaymentCalculator();</span><br><span class="line"></span><br><span class="line">    var monthlyPayment &#x3D; sut.CalculateMonthlyRepayment(new LoanAmount(&quot;USD&quot;, principal), interestRate, new LoanTerm(termInYears));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="create-custom-category-attribute"><a class="markdownIt-Anchor" href="#create-custom-category-attribute"></a> Create Custom Category Attribute</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[AttributeUsage(AttributeTargets.Method | AttributeTargets.Class, AllowMultiple &#x3D; false)]</span><br><span class="line">class ProductComparisonAttribute : CategoryAttribute</span><br><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure><p>Then we can use Custom Attribute like this</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[Test]</span><br><span class="line">[ProductComparison]</span><br><span class="line">public void CustomAttributeTest() &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;what-is-nunit&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#what-is-nunit&quot;&gt;&lt;/a&gt; What is NUnit?&lt;/h2&gt;
&lt;p&gt;NUnit is a unit-testing framework for </summary>
      
    
    
    
    
    <category term="Unit Tests" scheme="http://hellcy.github.io/tags/Unit-Tests/"/>
    
    <category term=".NET" scheme="http://hellcy.github.io/tags/NET/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript Fundamentals</title>
    <link href="http://hellcy.github.io/2021/04/03/JavaScript-Fundamentals/"/>
    <id>http://hellcy.github.io/2021/04/03/JavaScript-Fundamentals/</id>
    <published>2021-04-02T23:31:11.000Z</published>
    <updated>2021-05-24T07:27:02.659Z</updated>
    
    <content type="html"><![CDATA[<h2 id="data-types"><a class="markdownIt-Anchor" href="#data-types"></a> Data Types</h2><ol><li>undefined</li><li>Boolean</li><li>Number</li><li>String</li><li>Symbol</li><li>null</li><li>object</li></ol><h3 id="undefined-and-null-in-javascript"><a class="markdownIt-Anchor" href="#undefined-and-null-in-javascript"></a> undefined and null in JavaScript</h3><ul><li>undefined mean a variable has been declared but not yet been assigned a value. The data type of undefined variable is also undefined. (undefined is a data type).</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var x;</span><br><span class="line">alert(x); &#x2F;&#x2F; undefined</span><br><span class="line">alert(typeof x); &#x2F;&#x2F; undefined</span><br></pre></td></tr></table></figure><ul><li>null is an assignment value, it can be assigned to a variable as a representation of no value. The data type of null variable is an object.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var x &#x3D; null;</span><br><span class="line">alert(x); &#x2F;&#x2F; null</span><br><span class="line">alert(typeof x); &#x2F;&#x2F; object</span><br></pre></td></tr></table></figure><ul><li>undefined and null are equal in value but different in type.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">typeof undefined; &#x2F;&#x2F; undefined</span><br><span class="line">typeof null; &#x2F;&#x2F; object</span><br><span class="line"></span><br><span class="line">null &#x3D;&#x3D;&#x3D; undefined; &#x2F;&#x2F; false</span><br><span class="line">null &#x3D;&#x3D; undefined; &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure><h2 id="declare-variable"><a class="markdownIt-Anchor" href="#declare-variable"></a> Declare variable</h2><ul><li>var: normal way to declare a variable.</li><li>let: the variable you declared will only be used within the scope of where you declare it.</li><li>const: the variable value will never change</li></ul><h2 id="scope"><a class="markdownIt-Anchor" href="#scope"></a> Scope</h2><ul><li>Local scope</li><li>Global scope</li></ul><p>JavaScript has function scope, each function creates a new scope. Scope determines the accessibility of these variables. Variables defined inside a function are not accessible from outside the function</p><h2 id="array"><a class="markdownIt-Anchor" href="#array"></a> Array</h2><ul><li>push: Add anitem to the end of the array</li><li>pop: Remove an item from the end of the array</li><li>shift: Remove an item from the beginning of an array</li><li>unshift: Add an item to the beginning of an array</li><li>indexOf: find the index of an item in the array</li><li>splice: Remove items from an index position.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">let vegetables &#x3D; [&#39;Cabbage&#39;, &#39;Turnip&#39;, &#39;Radish&#39;, &#39;Carrot&#39;]</span><br><span class="line">console.log(vegetables)</span><br><span class="line">&#x2F;&#x2F; [&quot;Cabbage&quot;, &quot;Turnip&quot;, &quot;Radish&quot;, &quot;Carrot&quot;]</span><br><span class="line"></span><br><span class="line">let pos &#x3D; 1</span><br><span class="line">let n &#x3D; 2</span><br><span class="line"></span><br><span class="line">let removedItems &#x3D; vegetables.splice(pos, n)</span><br><span class="line">&#x2F;&#x2F; this is how to remove items, n defines the number of items to be removed,</span><br><span class="line">&#x2F;&#x2F; starting at the index position specified by pos and progressing toward the end of array.</span><br><span class="line"></span><br><span class="line">console.log(vegetables)</span><br><span class="line">&#x2F;&#x2F; [&quot;Cabbage&quot;, &quot;Carrot&quot;] (the original array is changed)</span><br><span class="line"></span><br><span class="line">console.log(removedItems)</span><br><span class="line">&#x2F;&#x2F; [&quot;Turnip&quot;, &quot;Radish&quot;]</span><br></pre></td></tr></table></figure><ul><li>slice: copy an array</li></ul><h3 id="objectfreeze"><a class="markdownIt-Anchor" href="#objectfreeze"></a> Object.freeze</h3><ul><li>const: creates an immutable binding, you cannot re-assign a new value to the binding. But if you delcare a const array or object. You can set new value to the element in the array or object</li><li>object.freeze: makes an object immutable, so you cannot change its properties.</li></ul><h2 id="object-dynamic-properties"><a class="markdownIt-Anchor" href="#object-dynamic-properties"></a> Object Dynamic Properties</h2><p>The property ‘test’ is a dynamic property, it’s value will be evaluated during runtime. So obj will have a property name ‘test’ with value 52.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">const test &#x3D; &#39;answer&#39;;</span><br><span class="line"></span><br><span class="line">const obj &#x3D; &#123;</span><br><span class="line">    p1:10,</span><br><span class="line">    p2:20,</span><br><span class="line">    [test]: 52</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">console.log(obj.test);</span><br><span class="line">console.log(obj.answer);</span><br></pre></td></tr></table></figure><h2 id="anonymous-function"><a class="markdownIt-Anchor" href="#anonymous-function"></a> Anonymous function</h2><ul><li>functions without name. You can also pass that function to a variable</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var magic &#x3D; function() &#123;</span><br><span class="line">    return new Date();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="arrow-function"><a class="markdownIt-Anchor" href="#arrow-function"></a> Arrow function</h2><ul><li>You can convert anonymous function to arrow function</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var magic &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">    return new Date();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var magic &#x3D; () &#x3D;&gt; new Date();</span><br></pre></td></tr></table></figure><ul><li>Arrow function with parameters</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var myConcat &#x3D; (var1, var2) &#x3D;&gt; arr1.concat(arr2);</span><br></pre></td></tr></table></figure><p>Example: Filter the array with only positive numbers and return the square of all remain elements in a new array</p><ul><li>Array.filter: The filter() method creates a new array with all elements that pass the test implemented by the provided function.</li><li>Array.map: The map() method creates a new array populated with the results of calling a provided function on every element in the calling array.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">const array &#x3D; [1,2,-3,4,-5,6,7];</span><br><span class="line"></span><br><span class="line">const squareList &#x3D; arr &#x3D;&gt; &#123;</span><br><span class="line">    const squaredList &#x3D; arr.filter(function callback(num) &#123;</span><br><span class="line">        return Number.isInteger(num) &amp;&amp; num &gt; 0;</span><br><span class="line">    &#125;).map(function square(num) &#123;</span><br><span class="line">        return num * num;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    return squaredList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const squaredIntegers &#x3D; squareList(array);</span><br><span class="line"></span><br><span class="line">console.log(squaredIntegers);</span><br></pre></td></tr></table></figure><ul><li>Using Arrow functions</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const array &#x3D; [1,2,-3,4,-5,6,7];</span><br><span class="line"></span><br><span class="line">const squareList &#x3D; arr &#x3D;&gt; &#123;</span><br><span class="line">    const squaredList &#x3D; arr.filter(num &#x3D;&gt; Number.isInteger(num) &amp;&amp; num &gt; 0).map(num &#x3D;&gt; num * num);</span><br><span class="line">    return squaredList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const squaredIntegers &#x3D; squareList(array);</span><br><span class="line">console.log(squaredIntegers);</span><br></pre></td></tr></table></figure><p>Example: Write a function that takes multiple parameters and add them up</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function sum(x, y, z) &#123;</span><br><span class="line">    args &#x3D; [x, y, z];</span><br><span class="line">    return args.reduce((accumulator, currentValue) &#x3D;&gt; accumulator + currentValue, 0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(sum(1,2,3));</span><br></pre></td></tr></table></figure><ul><li><p>Regular functions give access to their calling environment while arrow functions give access to their defining environment</p></li><li><p>The value of the ‘this’ keyword inside a regular function depends on HOW the function was CALLED (the OBJECT that made the call)</p></li><li><p>In arrow functions, this keyword doesn’t mean the caller of the arrow function. The value of the ‘this’ keyword inside an arrow function depends on WHERE the function was DEFINED (the scope that defined the function). This makes it great for delayed execution cases like events and listeners.</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">const test &#x3D; (function test () &#123;</span><br><span class="line">    const testerObj &#x3D; &#123;</span><br><span class="line">        func1: function() &#123;</span><br><span class="line">            console.log(&#39;func1&#39;, this);</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        func2: () &#x3D;&gt; &#123;</span><br><span class="line">            console.log(&#39;func2&#39;, this);</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    testerObj.func1();</span><br><span class="line">    testerObj.func2();    </span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><h2 id="using-rest-operator-to-represent-multiple-parameters"><a class="markdownIt-Anchor" href="#using-rest-operator-to-represent-multiple-parameters"></a> Using Rest operator to represent multiple parameters</h2><ul><li><p>Rest Operator: The rest parameter syntax allows a function to accept an indefinite number of arguments as an array,</p></li><li><p>Reduce: The reduce() method executes a reducer function (that you provide) on each element of the array, resulting in single output value.</p></li><li><p>The reducer function takes four arguments:</p></li></ul><ol><li>Accumulator</li><li>Current Value</li><li>Current Index</li><li>Source Array</li></ol><ul><li>Your reducer function’s returned value is assigned to the accumulator, whose value is remembered across each iteration throughout the array, and ultimately becomes the final, single resulting value.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function sum(...args) &#123;</span><br><span class="line">    return args.reduce((accumulator, currentValue) &#x3D;&gt; accumulator + currentValue, 0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(sum(1,2,3,4));</span><br></pre></td></tr></table></figure><h2 id="spread-syntax"><a class="markdownIt-Anchor" href="#spread-syntax"></a> Spread syntax</h2><p>Spread syntax (…) allows an iterable such as an array expression or string to be expanded in places where zero or more arguments (for function calls) or elements (for array literals) are expected, or an object expression to be expanded in places where zero or more key-value pairs (for object literals) are expected.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">const arr1 &#x3D; [&#39;JAN&#39;, &#39;FEB&#39;, &#39;MAR&#39;, &#39;APR&#39;, &#39;MAY&#39;];</span><br><span class="line"></span><br><span class="line">let arr2;</span><br><span class="line"></span><br><span class="line">(function () &#123;</span><br><span class="line">    &#x2F;&#x2F; spread arr1 into individual elements and create a new array by surrond it with []</span><br><span class="line">    arr2 &#x3D; [...arr1];</span><br><span class="line">    arr1[0] &#x3D; &#39;potato&#39;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; arr2[0] will still be &#39;JAN&#39;</span><br><span class="line">console.log(arr2);</span><br></pre></td></tr></table></figure><h2 id="destructuring-assignment"><a class="markdownIt-Anchor" href="#destructuring-assignment"></a> Destructuring assignment</h2><p>The destructuring assignment syntax is a JavaScript expression that makes it possible to unpack values from arrays, or properties from objects, into distinct variables.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var obj &#x3D; &#123;x:3.6, y:7.4, z:6.5&#125;;</span><br><span class="line"></span><br><span class="line">const &#123;x : a, y: b, z: c&#125; &#x3D; obj;</span><br><span class="line"></span><br><span class="line">console.log(&#96;$&#123;a&#125; $&#123;b&#125; $&#123;c&#125;&#96;);</span><br></pre></td></tr></table></figure><ul><li>Destructuring Assignment: Nested Objects</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">const LOCAL_FORECAST &#x3D; &#123;</span><br><span class="line">    today: &#123;min : 72, max: 83&#125;,</span><br><span class="line">    tomorrow : &#123;min : 73.3, max: 84.6&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">function getMaxOfTmw(forecast) &#123;</span><br><span class="line">    const &#123;tomorrow : &#123;max : maxOfTomorrow &#125;&#125; &#x3D; forecast;</span><br><span class="line"></span><br><span class="line">    return maxOfTomorrow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(getMaxOfTmw(LOCAL_FORECAST));</span><br></pre></td></tr></table></figure><ul><li>Destructuring Assignment: Arrays</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const[x, y, , z] &#x3D; [1,2,3,4,5,6];</span><br><span class="line">console.log(x, y, z);</span><br></pre></td></tr></table></figure><ul><li>Destructuring Assignment: Pass an object</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">const stats&#x3D; &#123;</span><br><span class="line">    max: 56.7,</span><br><span class="line">    standard_deviation: 4.34,</span><br><span class="line">    median: 34.54,</span><br><span class="line">    mode: 23.5,</span><br><span class="line">    min: -0.4,</span><br><span class="line">    average: 45.6</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function half(&#123;max, min&#125;) &#123;</span><br><span class="line">    return (max + min) &#x2F; 2.0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(half(stats));</span><br></pre></td></tr></table></figure><h2 id="object-literal-declarations-using-simple-fields"><a class="markdownIt-Anchor" href="#object-literal-declarations-using-simple-fields"></a> Object Literal Declarations Using Simple Fields</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const createPerson &#x3D; (name, age, gender) &#x3D;&gt; ( &#123;name, age, gender&#125; )</span><br><span class="line"></span><br><span class="line">console.log(createPerson(&#39;Yuan Cheng&#39;, 27, &#39;male&#39;));</span><br></pre></td></tr></table></figure><h2 id="functions-in-objects"><a class="markdownIt-Anchor" href="#functions-in-objects"></a> Functions in Objects</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const bicycle &#x3D; &#123;</span><br><span class="line">    gear : 2,</span><br><span class="line">    setGear: function(newGear) &#123;</span><br><span class="line">        this.gear &#x3D; newGear;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">bicycle.setGear(3);</span><br><span class="line">console.log(bicycle.gear);</span><br></pre></td></tr></table></figure><ul><li>we could remove the ‘function’ keyword</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const bicycle &#x3D; &#123;</span><br><span class="line">    gear : 2,</span><br><span class="line">    setGear(newGear) &#123;</span><br><span class="line">        this.gear &#x3D; newGear;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">bicycle.setGear(3);</span><br><span class="line">console.log(bicycle.gear);</span><br></pre></td></tr></table></figure><h2 id="class-syntax"><a class="markdownIt-Anchor" href="#class-syntax"></a> class syntax</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var SpaceShuttle &#x3D; function(targetPlanet) &#123;</span><br><span class="line">    this.targetPlanet &#x3D; targetPlanet;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var zeus &#x3D; new SpaceShuttle(&#39;Jupiter&#39;);</span><br><span class="line">console.log(zeus.targetPlanet);</span><br></pre></td></tr></table></figure><ul><li>Using Class and Constructor</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class SpaceShuttle &#123;</span><br><span class="line">    constructor(targetPlanet) &#123;</span><br><span class="line">        this.targetPlanet &#x3D; targetPlanet;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var zeus &#x3D; new SpaceShuttle(&#39;Jupiter&#39;);</span><br><span class="line">console.log(zeus.targetPlanet);</span><br></pre></td></tr></table></figure><h2 id="getters-and-setters"><a class="markdownIt-Anchor" href="#getters-and-setters"></a> getters and setters</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class Book &#123;</span><br><span class="line">    constructor(author) &#123;</span><br><span class="line">        this._author &#x3D; author;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; getter</span><br><span class="line">    get writer() &#123;</span><br><span class="line">        return this._author;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; setter</span><br><span class="line">    set writer(updatedAuthor) &#123;</span><br><span class="line">        this._author &#x3D; updatedAuthor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="import-vs-require"><a class="markdownIt-Anchor" href="#import-vs-require"></a> import vs require</h2><p>import functions from other js files</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123;capitalzeString&#125; from &quot;string_function&quot;</span><br></pre></td></tr></table></figure><h2 id="export"><a class="markdownIt-Anchor" href="#export"></a> export</h2><p>The export statement is used when creating JavaScript modules to export live bindings to functions, objects, or primitive values from the module so they can be used by other programs with the import statement. Bindings that are exported can still be modified locally; when imported, although they can only be read by the importing module the value updates whenever it is updated by the exporting module.</p><ul><li>below code is saved in a js file: string_function</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export const capitalizeString &#x3D; str &#x3D;&gt; str.toUpperCase();</span><br></pre></td></tr></table></figure><h2 id="to-import"><a class="markdownIt-Anchor" href="#to-import"></a> * to import</h2><p>import * will import every functions you export in the other file to a object</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import * as capitalizeStrings from &quot;capitalize_strings&quot;;</span><br></pre></td></tr></table></figure><h2 id="named-export-vs-export-default"><a class="markdownIt-Anchor" href="#named-export-vs-export-default"></a> Named export vs export default</h2><p>Named export: With named exports, one can have multiple named exports per file. Then import the specific exports they want surrounded in braces. The name of imported module has to be the same as the name of the exported module.</p><p>Export default: One can have only one default export per file.<br />The naming of import is completely independent in default export and we can use any name we like. No curly braces needed when import</p><h2 id="promises"><a class="markdownIt-Anchor" href="#promises"></a> Promises</h2><p>A promise is an object that might deliver data at a later point in the program.</p><p>Fetch API will return a promise, to consume that promise, we do a .then call on the result of fetch and supply a callback function. The Fetch API will have a raw response ‘resp’, you need to call the .json method on that response object. The json method is also a asynchronous function. It also returns a promise. So we do another .then call on the result of the json function</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const fetchData &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">    fetch(&#39;https:&#x2F;&#x2F;api.github.com&#39;).then(resp &#x3D;&gt; &#123;</span><br><span class="line">        resp.json().then(data &#x3D;&gt; &#123;</span><br><span class="line">            console.log(data);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">fetchData();</span><br></pre></td></tr></table></figure><p>The above code works, but it is difficult to read. We could use async/await.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const fetchData &#x3D; async () &#x3D;&gt; &#123;</span><br><span class="line">    const resp &#x3D; await fetch(&#39;https:&#x2F;&#x2F;api.github.com&#39;);</span><br><span class="line"></span><br><span class="line">    const data &#x3D; await resp.json();</span><br><span class="line"></span><br><span class="line">    console.log(data);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">fetchData();</span><br></pre></td></tr></table></figure><p>the async function is another way for us to consume promises without having us to use .then calls</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;data-types&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#data-types&quot;&gt;&lt;/a&gt; Data Types&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;undefined&lt;/li&gt;
&lt;li&gt;Boolean&lt;/li&gt;
&lt;li&gt;Number</summary>
      
    
    
    
    
    <category term="JavaScript" scheme="http://hellcy.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>AWS SAA Architecting For Performance Efficiency</title>
    <link href="http://hellcy.github.io/2021/03/16/AWS-SAA-Architecting-for-Performance-Efficiency/"/>
    <id>http://hellcy.github.io/2021/03/16/AWS-SAA-Architecting-for-Performance-Efficiency/</id>
    <published>2021-03-16T04:36:37.000Z</published>
    <updated>2021-05-24T07:27:02.657Z</updated>
    
    <content type="html"><![CDATA[<ol><li><a href="#Part1">Part One: Understanding the Design Principles</a></li><li><a href="#Part2">Part Two: Considering Compute Performance Options</a></li><li><a href="#Part3">Part Three: Reviewing Storage Performance Options</a></li><li><a href="#Part4">Part Four: Examing Database Performance Options</a></li><li><a href="#Part5">Part Five: Evaluating Network Performance Options</a></li><li><a href="#Part6">Part Six: Preparing to Improve Your Architecture</a></li><li><a href="#Part7">Part Seven: Monitoring Your Architecture</a></li><li><a href="#Part8">Part Eight: Understanding the Trade-offs</a></li></ol><h2 id="part-one-understanding-the-design-principles"><a class="markdownIt-Anchor" href="#part-one-understanding-the-design-principles"></a> <a href="#title" title="Part 1">Part One: Understanding the Design Principles</a></h2><p>There are three main differences compare traditional on premises application and cloud application. 1. Cost. 2. Security and 3. Performance. We are going to focus on number three. Performance.</p><p>Cloud services are changing fast.</p><p>Go global: AWS have many regions, deploy application to the region that close to the user to reduce the latancy.</p><p>Go global: local region will comply to the laws and regulations</p><ol><li>Go global</li><li>Think serverless</li><li>Use new technologies</li><li>Experiment often</li><li>Right tool for the task</li></ol><h2 id="part-two-considering-compute-performance-options"><a class="markdownIt-Anchor" href="#part-two-considering-compute-performance-options"></a> <a href="#title" title="Part 2">Part Two: Considering Compute Performance Options</a></h2><p>What does compute performance includes?</p><p>Processing -&gt; CPU</p><p>Capacity -&gt; Storage</p><p>Scaling</p><p>Responsive</p><p>Economical</p><p>Understand your workload</p><p>Undetstand AWS compute</p><p>Need to gather and analyze data, and testing</p><h3 id="aws-compute-options"><a class="markdownIt-Anchor" href="#aws-compute-options"></a> AWS compute options</h3><h4 id="ec2-elastic-cloud-compute"><a class="markdownIt-Anchor" href="#ec2-elastic-cloud-compute"></a> EC2 Elastic Cloud Compute</h4><p>The default option, virtualized servers. IssA (infrustructure as a service)</p><p>Choose resources. You own the OS.(You are responsible for patching the OS and config all aspects of it.)</p><p>EC2 General resources</p><ol><li>vCPUs</li><li>Memory</li><li>Storage</li><li>Network</li></ol><p>EC2 extra features</p><ol><li>Burstable: if your EC2 is not using its full compute power, you gain credits which you can use in the future when you need it to burst the compute power of your instance for a short period of time.</li><li>GPU</li><li>FPGA (Filled Programmable Gate Arrays): Allows you to create customized hardware accelerators</li></ol><p>Instance Types</p><ol><li>General Purpose: Standard, balanced</li><li>Compute optimized: high compute power</li><li>Memory optimized: for memory intensive workloads</li><li>Accelerated computing: GPU or FPGA</li><li>Storage optimized: high storage</li><li>Bare metal</li></ol><p>EC2 Auto Scaling</p><ol><li>Metrics based: scale up or down based on the metric you choose</li><li>Schedule based: scale up or down for a booked time</li><li>Health based: replace unhealthy instances</li></ol><h4 id="ecs-elastic-container-service"><a class="markdownIt-Anchor" href="#ecs-elastic-container-service"></a> ECS Elastic Container Service</h4><p>Similar workloads as EC2</p><p>Migrate apps to the cloud, long running apps, batch processing, Microservices</p><p>Better utilize resources. Can run multiple containers on a single instance. ELB, balance traffic to each container, Autoscaling.</p><p>AWS Fargate: manages the instances on which your containers run. you don’t need to manage the server instances.</p><h4 id="aws-lambda"><a class="markdownIt-Anchor" href="#aws-lambda"></a> AWS Lambda</h4><p>FaaS (Function as a service). Serverless computing.</p><p>Backend processing, Event processing, Stream processing, Data processing</p><p>AWS resource triggers: other resources can trigger Lambda functions</p><p>You can choose memory needed for a lambda function</p><p>Advantages: Simply execute code. We don’t need to worry about the servers that run our Lambda codes.</p><p>Automatic scaling for Lambda function.</p><p>Fault tolerant: if a function fails, AWS will trigger the function again</p><p>Pay for usage</p><h4 id="applying-our-knowledge"><a class="markdownIt-Anchor" href="#applying-our-knowledge"></a> Applying our knowledge</h4><p>1. A company called Globomantics wants to move their application to cloud. They have customers globally.</p><p>The first application they want to move to cloud is an app that collections data from clinical trails. Doctors enter information each time they do checkings.</p><p>Considerations for Choice</p><ol><li>First app of many</li><li>Time should be fast</li><li>Predicatable usage</li></ol><p>They want to use ECS. Lift and shift: Easy to containerize the app. Able to scale. Able to choose instance sizes.</p><p>Allows them to leverage for future applications. Different containers in a single instance. Save costs</p><p>2. They also want to build a new web application for the cloud. Allow people to register medical devices. Share medical devices globally.</p><p>Considerations for Choice</p><ol><li>Manage costs</li><li>Global reach</li><li>Minimal maintenance</li></ol><p>They want to go with Lambda. Services behind a static site to save costs. Only pay for runtime.</p><p>Lambda scales besed on demand. Can be deployed to multiple regions. No servers to maintain.</p><h2 id="part-three-reviewing-storage-performance-options"><a class="markdownIt-Anchor" href="#part-three-reviewing-storage-performance-options"></a> <a href="#title" title="Part 3">Part Three: Reviewing Storage Performance Options</a></h2><h3 id="s3"><a class="markdownIt-Anchor" href="#s3"></a> S3</h3><p>data is encrypted. Access Managemenet(IAM), Lifecycle management. Query in place.(Don’t need to move the data to query it using SQL like command)</p><ol><li><p>Shared Access</p></li><li><p>Low latency</p></li><li><p>High thoughput: move data in or out S3 quickly</p></li><li><p>High Availability: available for multiple availability zones</p></li><li><p>High durability: data is duplicated across multiple availability zones</p></li><li><p>Standard</p></li><li><p>Intelligent Tier</p></li><li><p>Standard Infrequent Access(IA)(high latency)</p></li><li><p>One-Zone Infrequent Access(low availability, low durability)</p></li></ol><h3 id="glacier"><a class="markdownIt-Anchor" href="#glacier"></a> Glacier</h3><p>Immutable, data do not change once they are in Glacier.</p><p>Durable</p><p>Query stored data without retrieval.</p><ol><li>Archival storage</li><li>Encrypted</li><li>Access Control</li><li>Audit logging</li></ol><p>Latency options.</p><ol><li>Expedited. latency in minutes.</li><li>Standard. Default, number of hours to get data back.</li><li>Bulk. cheaper and takes longer.</li></ol><p>Economical, put data in Glacier is cheap and high durable.</p><p>Deep Archive. The cheapest and longest. normally 6-12 hours. Do not access data frequently, 2-3 times a year.</p><h3 id="ebs-elastic-block-storage"><a class="markdownIt-Anchor" href="#ebs-elastic-block-storage"></a> EBS (Elastic Block Storage)</h3><p>Attached to EC2 instances.</p><p>Multi-Attach, storage volumn can be attached to up to 16 instances. Instances must be in same availability zone.</p><p>Data is Replicated to multiple availbility zones. high availability and durability</p><p>Access control.</p><ol><li>Provisioned IOPS SSD</li><li>Standard Purpose IOPS SSD</li><li>Cold HDD</li><li>Thoughput optimized HDD</li></ol><p>Snapshots: a snapshots of a storage in that time and can be shared to other zones.</p><p>Elastic volumes. pay for what actually stored.</p><h3 id="efs"><a class="markdownIt-Anchor" href="#efs"></a> EFS</h3><ol><li>General Purpose</li><li>MAX I/O</li></ol><p>Same example as before. Migrating to AWS storage. It is one of the web applications. It requires global access. Data will be collected from clinical trials. And some data will be entered on daliy basis.</p><p>They need shared access of data.</p><p>Data must be durable.</p><p>Data will be stored in a long term basis.</p><p>S3 and Glacier: high durable. Access from ECS containers. Multiple access. Long term storage.</p><p>New application. Provide medical devices to people who need it. Global user base.</p><p>Lower cost. Local access. Non-critical images(could be lost, no big problem).</p><p>S3: single region. Reduced Redundancy Storage(RRD).</p><h2 id="part-four-examing-database-performance-options"><a class="markdownIt-Anchor" href="#part-four-examing-database-performance-options"></a> <a href="#title" title="Part 4">Part Four: Examing Database Performance Options</a></h2><h3 id="install-on-ec2"><a class="markdownIt-Anchor" href="#install-on-ec2"></a> Install on EC2</h3><p>we could choose to install a Database on a EC2 instance. But that means we need to do all the backup, restore ourselves. We are not using the serverless managed services provided by AWS. But in some cases, we have to choose this way. Situations like: 1. Control Environment. we want to control everything. 2. Certified. Maybe the services in AWS are not certified by the customer. 3. Specific tools. Our application needs some tools that have to work with standalone database.</p><ol><li>RDS</li><li>DynamoDB</li><li>Redshift</li></ol><h3 id="rds"><a class="markdownIt-Anchor" href="#rds"></a> RDS</h3><p>Default choice. Complex queries. Consistent transactions.</p><ol><li><p>Multi-AZ</p></li><li><p>Read replicas</p></li><li><p>Encryption</p></li><li><p>Backups and snapshots</p></li><li><p>Instance type</p></li><li><p>Storage type</p></li><li><p>Network setup</p></li><li><p>Backup</p></li></ol><h3 id="dynamodb"><a class="markdownIt-Anchor" href="#dynamodb"></a> DynamoDB</h3><p>Flexible structure</p><ol><li>Flexible structure</li><li>Less complex queries: You are able to query on particular keys, the partition key and any secondary keys that you define. Can’t join tables.</li><li>Low latency</li><li>Transactions</li><li>Global tables: store data in multiple regions</li><li>Encryption</li><li>Evolving schema: supports changes and growth in your application(add/remove columns…)</li><li>Integration with Lambda</li></ol><p>Partition key: store data on different nodes of the database</p><p>Secondary indexes</p><p>Provisioned capacity: number of reads and writes. Dynamodb will auto scale</p><p>on-demand capacity: pay for what you use. No auto scaling.</p><h3 id="redshift"><a class="markdownIt-Anchor" href="#redshift"></a> Redshift</h3><p>Large scale analytics</p><p>Setup in minutes</p><p>Warehouse and data lake</p><ol><li>Encryption</li><li>Scale to petabytes</li><li>Query S3</li><li>Economical</li></ol><p>Node type</p><ol><li>Dense compute: fast CPUs, large RAM and SSD for fast performance</li><li>Dense storage</li></ol><p>Same example as before.</p><p>They want to have minimum effort to do the migration</p><p>They want to leverage managed services</p><p>Improve availability</p><p>They have decided to use RDS. Using SQL server. Structured data. No servers to manage. High availability</p><p>New application.</p><p>DynamoDB. Flexible data structure(NoSQL). Trigger action(Lambda integration). Flexible cost structure(On-demand pricing). Global tables.</p><h2 id="part-five-evaluating-network-performance-options"><a class="markdownIt-Anchor" href="#part-five-evaluating-network-performance-options"></a> <a href="#title" title="Part 5">Part Five: Evaluating Network Performance Options</a></h2><h3 id="region-and-az"><a class="markdownIt-Anchor" href="#region-and-az"></a> Region and AZ</h3><p>Regions are geographical area. One region may have multiple AZs that are also isolated to each other.</p><p>While the AZs are isolated geographically, they are connected by AWS that allows data to be transferred between each zones.</p><h4 id="local-zones"><a class="markdownIt-Anchor" href="#local-zones"></a> Local Zones</h4><p>Some users still think the regions provided by AWS have high latency. They can choose to use local zones. They are built in large cities and connected to near by regions with low latency, high throughput connectivity. Local zones don’t have all the services provided by AWS as normal AZs.</p><p>Why do we choose one region over another?</p><ol><li>Laws and Regulations: e.g. Some governments required that any data of their citizens remain in their countries</li><li>User location: put application closer to your end users.</li><li>Data location</li><li>Cost</li></ol><h3 id="cloudfront"><a class="markdownIt-Anchor" href="#cloudfront"></a> CloudFront</h3><p>Global network: CloudFront is outside of AWS regions, that deliver our applications to end users</p><p>Content delivery: Similar to CDN</p><ol><li>Static content: static content is cached to the place closer to end users to reduce latency</li><li>Dynamic content: AWS also supported Dynamic content (intelligent caching)</li><li>Intelligent: you can setup geo-restrictions to not allow edge content to deliver content to certain geo-locations</li><li>Programmable: Lambda at edge: create serverless functions at edge locations. Put compute power closer to your end users.</li></ol><h3 id="route53"><a class="markdownIt-Anchor" href="#route53"></a> Route53</h3><p>DNS solution for AWS: translate a user-friendly URL to the IP address</p><p>Private DNS: Route53 supports private DNS, you can setup friendly names for your internal services</p><h4 id="traffic-flow"><a class="markdownIt-Anchor" href="#traffic-flow"></a> Traffic flow</h4><p>If you deploy your solution to multiple regions, you can config so that your users only send requests to their regions.</p><ol><li>Latency routing: Traffic flow will determine the region that will be serving the content with the least latency</li><li>Geographic routing: route users to the cloest region.</li><li>Health based routing: not route users to a region that with unhealthy status.</li><li>Round robin routing: route user to the next region available. Route traffic evenly to all regions.</li></ol><h3 id="direct-connect"><a class="markdownIt-Anchor" href="#direct-connect"></a> Direct Connect</h3><p>Instead of going through public internet, AWS will create a dedicated line for users to connect from AWS to your data center. It is encrypted and you can config the speed.</p><h3 id="vpc-endpoints"><a class="markdownIt-Anchor" href="#vpc-endpoints"></a> VPC endpoints</h3><p>Normally, if your VPC wants to connect to other AWS services, it can only go through public internet, but with VPC endpoints, it can connect to other AWS services directly through the private internet AWS network</p><h3 id="ec2-instance-types"><a class="markdownIt-Anchor" href="#ec2-instance-types"></a> EC2 instance types</h3><p>some EC2 instance types have better internet performance than others. Pay attention to it before you launch the EC2 instance. Choose the type that suitable for your applications.</p><h3 id="apply-our-knowledge"><a class="markdownIt-Anchor" href="#apply-our-knowledge"></a> Apply our knowledge</h3><p>They want their application to be deployed in a single region but to multiple AZs. They use AWS ECS(elastic container service) to manage their application. And use AWS Fargate to manage their containers. They also choose to use Multi-AZ RDS for their DB. They also want their Data to be stored in S3. So they want a VPC endpoint for S3 to reduce latency. So when they want to access data in S3. they don’t need to go through public internet.</p><p>They also have a new application that they want to have a friendly domain name. Reduced latency and managed cost. So they have decided to use Route53. because the application is hosted on S3 buckets. They need to register domain names for each S3 bucket. And configure Route 53 to route traffic to right S3 bucket using their domain names. They also want to have a global portal that has links to each deployed regions.</p><h2 id="part-six-preparing-to-improve-your-architecture"><a class="markdownIt-Anchor" href="#part-six-preparing-to-improve-your-architecture"></a> <a href="#title" title="Part 6">Part Six: Preparing to Improve Your Architecture</a></h2><h3 id="cicd-pipeline-continuous-integration-continuous-deployment"><a class="markdownIt-Anchor" href="#cicd-pipeline-continuous-integration-continuous-deployment"></a> CI/CD pipeline (Continuous Integration/ Continuous Deployment)</h3><p>We need to have repeatable builds, repeatable infrastructrue and Controlled tests</p><p><img src="/../images/AWS-SAA-Architecting-For-Performance-Efficiency/1.png" alt="" /></p><h3 id="cloudformation"><a class="markdownIt-Anchor" href="#cloudformation"></a> CloudFormation</h3><ol><li>Infrastructure template(JSON or YAML)</li><li>Automate creation</li><li>Ensure consistency</li></ol><h3 id="cloudformation-templates"><a class="markdownIt-Anchor" href="#cloudformation-templates"></a> CloudFormation templates</h3><p><img src="/../images/AWS-SAA-Architecting-For-Performance-Efficiency/2.png" alt="" /><br /><img src="/../images/AWS-SAA-Architecting-For-Performance-Efficiency/3.png" alt="" /><br /><img src="/../images/AWS-SAA-Architecting-For-Performance-Efficiency/4.png" alt="" /></p><ol><li>Format version</li><li>Description</li><li>Parameters</li><li>Resources</li><li>Output</li></ol><h2 id="part-seven-monitoring-your-architecture"><a class="markdownIt-Anchor" href="#part-seven-monitoring-your-architecture"></a> <a href="#title" title="Part 7">Part Seven: Monitoring Your Architecture</a></h2><h3 id="monitor"><a class="markdownIt-Anchor" href="#monitor"></a> Monitor</h3><ol><li>Resources</li><li>Application</li><li>Operations</li></ol><h3 id="respond"><a class="markdownIt-Anchor" href="#respond"></a> Respond</h3><ol><li>Ignore</li><li>Manually</li><li>Automate</li><li>Modify</li></ol><h3 id="cloudwatch"><a class="markdownIt-Anchor" href="#cloudwatch"></a> CloudWatch</h3><p>Metrics</p><ol><li>Application</li><li>Infrastructure</li><li>AWS or on-premises</li></ol><p>Actions: Autoscaling.</p><p>Actions: Messages</p><p>Actions: Lambda functions can be triggered from CloudWatch</p><p>Analytics: CloudWatch can store months of histoical data for you to analyse</p><h3 id="create-a-log-to-delete-s3-object"><a class="markdownIt-Anchor" href="#create-a-log-to-delete-s3-object"></a> Create a log to delete S3 object</h3><ol><li>Create CloudTrail Trail</li><li>Create Lambda function</li><li>Create CloudWatch Rule</li></ol><p>Create a CloudTrail Trail</p><p><img src="/../images/AWS-SAA-Architecting-For-Performance-Efficiency/5.png" alt="" /></p><p>Create a Lambda function</p><p><img src="/../images/AWS-SAA-Architecting-For-Performance-Efficiency/6.png" alt="" /></p><p>Create CloudWatch Rule</p><p><img src="/../images/AWS-SAA-Architecting-For-Performance-Efficiency/7.png" alt="" /></p><h2 id="part-eight-understanding-the-trade-offs"><a class="markdownIt-Anchor" href="#part-eight-understanding-the-trade-offs"></a> <a href="#title" title="Part 8">Part Eight: Understanding the Trade-offs</a></h2><ol><li>Time</li><li>Cost</li><li>Memory</li><li>Efficiency</li><li>Complexity</li></ol><h3 id="possible-trade-offs"><a class="markdownIt-Anchor" href="#possible-trade-offs"></a> Possible Trade-offs</h3><ol><li>Queuing</li><li>Partitioning</li><li>Caching</li><li>Compression</li></ol><h3 id="queuing"><a class="markdownIt-Anchor" href="#queuing"></a> Queuing</h3><p>AWS SQS (simple queuing service)</p><ol><li>Decouple (producer, consumer)</li><li>Scale independently (add producer or delete consumer)</li><li>Acceptable delay</li><li>Time vs Efficiency</li></ol><h3 id="data-paritioning"><a class="markdownIt-Anchor" href="#data-paritioning"></a> Data Paritioning</h3><p>For example: RDBMS doesn’t have partition. so we need to consider what data goes into which instance of database, that increase complexity. Whereas many NoSQL DB already has partition. In DynamoDB, we have partition key for each table. The data that has the same partition key will go into the same node. So when choose a partition key, choose a key that roughly evenly distributed across the data.</p><ol><li>Complexity / consistency vs Time</li><li>RDBMS vs NoSQL</li><li>Distribution</li><li>Maintenance</li></ol><h3 id="caching"><a class="markdownIt-Anchor" href="#caching"></a> Caching</h3><p>Cache: heavliy used data will be stored in memory.</p><p>Read Replics: if you have a read replica of your DB, users can go into read replica if they only read. Reduce the traffic of your primary server.</p><p>CDN: take data and store data closer to users place.</p><p>Memory/ consistency vs Time</p><h3 id="compression"><a class="markdownIt-Anchor" href="#compression"></a> Compression</h3><ol><li>Code assets: reduce the size of source code to reduce the time to load the application</li><li>Files: same. redurce the size of file will reduce the transfer time</li><li>Time vs memory</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;#Part1&quot;&gt;Part One: Understanding the Design Principles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#Part2&quot;&gt;Part Two: Considering Compute Performa</summary>
      
    
    
    
    
    <category term="AWS" scheme="http://hellcy.github.io/tags/AWS/"/>
    
  </entry>
  
  <entry>
    <title>React Overview</title>
    <link href="http://hellcy.github.io/2021/03/16/React-Overview/"/>
    <id>http://hellcy.github.io/2021/03/16/React-Overview/</id>
    <published>2021-03-16T00:22:53.000Z</published>
    <updated>2021-05-24T07:27:02.660Z</updated>
    
    <content type="html"><![CDATA[<h2 id="setting-up-a-development-environment"><a class="markdownIt-Anchor" href="#setting-up-a-development-environment"></a> Setting up a Development Environment</h2><ol><li>Create folder and package.json file</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir diy-react</span><br><span class="line">cd diy-react</span><br><span class="line">npm init --y</span><br></pre></td></tr></table></figure><h3 id="install-main-dependencies"><a class="markdownIt-Anchor" href="#install-main-dependencies"></a> Install Main Dependencies</h3><ol start="2"><li>Install Express</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i express</span><br></pre></td></tr></table></figure><ol start="3"><li>Install React and React-dom</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i react react-dom</span><br></pre></td></tr></table></figure><ol start="4"><li>Install webpack</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i webpack webpack-cli</span><br></pre></td></tr></table></figure><p>Webpack is a module bunlder. A react application usually contains multiple modules and depends on many external modules too. When we ship the application to the browser we need to bundle all necessary files into a single bundle and ship it to the browser.</p><ol start="5"><li>Install Babel</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i babel-loader @babel&#x2F;core @babel&#x2F;node @babel&#x2F;preset-env @babel&#x2F;preset-react</span><br></pre></td></tr></table></figure><p>Babel is the package that compiles JSX into regular React API calls.</p><h3 id="install-development-dependencies"><a class="markdownIt-Anchor" href="#install-development-dependencies"></a> Install Development Dependencies</h3><ol start="6"><li>Install nodemon</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D nodemon</span><br></pre></td></tr></table></figure><p>nodemon is a package that lets us automatically restart node when we change things in node.</p><ol start="7"><li>Install ESLint</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D eslint babel-eslint eslint-plugin-react eslint-plugin-react-hooks</span><br></pre></td></tr></table></figure><p>ESLint will immediately analyze your code and tell you the problems, you can have consistent styling to your code by using ESLint.</p><ol start="8"><li>Configure ESLint</li></ol><p>Go to your project directory, create a new file called ‘.eslintrc.js’ and paste the below code.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">    parser: &#39;babel-eslint&#39;,</span><br><span class="line">    env: &#123;</span><br><span class="line">      browser: true,</span><br><span class="line">      commonjs: true,</span><br><span class="line">      es6: true,</span><br><span class="line">      node: true,</span><br><span class="line">      jest: true,</span><br><span class="line">    &#125;,</span><br><span class="line">    parserOptions: &#123;</span><br><span class="line">      ecmaVersion: 2020,</span><br><span class="line">      ecmaFeatures: &#123;</span><br><span class="line">        impliedStrict: true,</span><br><span class="line">        jsx: true,</span><br><span class="line">      &#125;,</span><br><span class="line">      sourceType: &#39;module&#39;,</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [&#39;react&#39;, &#39;react-hooks&#39;],</span><br><span class="line">    extends: [</span><br><span class="line">      &#39;eslint:recommended&#39;,</span><br><span class="line">      &#39;plugin:react&#x2F;recommended&#39;,</span><br><span class="line">      &#39;plugin:react-hooks&#x2F;recommended&#39;,</span><br><span class="line">    ],</span><br><span class="line">    settings: &#123;</span><br><span class="line">      react: &#123;</span><br><span class="line">        version: &#39;detect&#39;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    rules: &#123;</span><br><span class="line">      &#x2F;&#x2F; You can do your customizations here...</span><br><span class="line">      &#x2F;&#x2F; For example, if you don&#39;t want to use the prop-types package,</span><br><span class="line">      &#x2F;&#x2F; you can turn off that recommended rule with: &#39;react&#x2F;prop-types&#39;: [&#39;off&#39;]</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><ol start="9"><li>Configure Jest</li></ol><p>jest is the package to test React applications</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D jest babel-jest react-test-renderer</span><br></pre></td></tr></table></figure><ol start="10"><li>Basic React application structure</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">diy-react&#x2F;</span><br><span class="line">  dist&#x2F;</span><br><span class="line">    main.js</span><br><span class="line">  src&#x2F;</span><br><span class="line">    index.js</span><br><span class="line">    components&#x2F;</span><br><span class="line">      App.js</span><br><span class="line">    server&#x2F;</span><br><span class="line">      server.js</span><br></pre></td></tr></table></figure><p>dist: for distribution, webpack will put production-ready files to here<br />src: for React code files<br />components: for React components<br />server: for server files</p><ol start="11"><li>Configure Webpack and Babel</li></ol><p>Under project root directory, create a new file called ‘babel.config.js’ and paste the below code</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  presets: [&#39;@babel&#x2F;preset-env&#39;, &#39;@babel&#x2F;preset-react&#39;],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Under project root directory, create a new file called ‘webpack.config.js’ and paste the below code<br />This will tell webpack to invoke babel for all files that end with .js. This is to convert JSX code to regular React API calls.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: &#x2F;\.js$&#x2F;,</span><br><span class="line">        exclude: &#x2F;node_modules&#x2F;,</span><br><span class="line">        use: &#123;</span><br><span class="line">          loader: &#39;babel-loader&#39;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="12"><li>Create npm scripts for development</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;dev:server&quot;: &quot;nodemon --exec .&#x2F;node_modules&#x2F;.bin&#x2F;babel-node src&#x2F;server&#x2F;server.js --ignore dist&#x2F;&quot;,</span><br></pre></td></tr></table></figure><p>This script will run nodemon command, which is run babel-node on a server.js file</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;dev:bundler&quot;: &quot;webpack -w --mode&#x3D;development&quot;</span><br></pre></td></tr></table></figure><p>This script will run the webpack command, in Watch mode(readable code, not minified) and in development node</p><h3 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference</h3><ol><li><a href="https://jscomplete.com/learn/1rd-reactful">Setting up React Development Environment</a></li></ol><hr /><ul><li><p>For Angular, Vue and Ember they put fake JS in HTML. Whereas React put fake HTML in JS (JSX), React is Javascript-centric, makes JS more powerful to handle HTML</p></li><li><p>React is lightweighted, you can slowly migrate your app from other technologies to React</p></li><li><p>React is lean and you only import the package you want to use.</p></li><li><p>React is one way data binding, it required more code, you need to expilictly declare a change handler. But this gives you more control and east to debug</p></li></ul><h2 id="the-basics"><a class="markdownIt-Anchor" href="#the-basics"></a> The Basics</h2><h3 id="reacts-basic-concepts"><a class="markdownIt-Anchor" href="#reacts-basic-concepts"></a> React’s Basic Concepts</h3><h4 id="components"><a class="markdownIt-Anchor" href="#components"></a> Components</h4><ul><li>Like functions</li><li>Input: props, state | Output: UI</li><li>Reusable and composable</li><li>Can be used as normal HTML tags <code>&lt;Component /&gt;</code></li><li>Can manage a private state</li></ul><h4 id="reactive-updates"><a class="markdownIt-Anchor" href="#reactive-updates"></a> Reactive updates</h4><ul><li>When the state of a React component, the input, changes, the user interface it represents, the output, changes as well</li></ul><h4 id="virtual-views-in-memory"><a class="markdownIt-Anchor" href="#virtual-views-in-memory"></a> Virtual views in memory</h4><ul><li>We don’t write HTML when building applications using React. We generate HTML using Javascript</li><li>Build smaller components such as buttons, forms, then build more complex components using the smaller components. Each component consist of HTML and JS.</li></ul><h2 id="tradeoffs"><a class="markdownIt-Anchor" href="#tradeoffs"></a> Tradeoffs</h2><h3 id="framework-vs-library"><a class="markdownIt-Anchor" href="#framework-vs-library"></a> Framework vs Library</h3><ul><li>Frameworks offer more opinion and standardization, but React’s library approach allows you to select only the tools that you need and pick the best tools for your use case.</li></ul><h3 id="data-binding"><a class="markdownIt-Anchor" href="#data-binding"></a> Data Binding</h3><ul><li>Other frameworks strive to be concise, using techniques like two‑way binding and abstractions over JavaScript operations. But React is explicit, so code is more readable and scalable at the admitted expense of doing a little more typing on the keyboard.</li></ul><h3 id="js-centric"><a class="markdownIt-Anchor" href="#js-centric"></a> JS Centric</h3><ul><li>React chooses to be JavaScript‑centric instead of template‑centric. React’s JavaScript‑centric approach is easier to understand and debug and requires learning less unique syntax, but at the cost of requiring modern JavaScript knowledge.</li></ul><h3 id="separate-vs-single-file"><a class="markdownIt-Anchor" href="#separate-vs-single-file"></a> Separate vs Single File</h3><ul><li>Many frameworks utilize a separate template file. In contrast, each React component is a single autonomous file that you can work with and test in isolation.</li></ul><h3 id="standard-vs-non-standard"><a class="markdownIt-Anchor" href="#standard-vs-non-standard"></a> Standard vs Non-standard</h3><ul><li>The web component standard has been around for years, yet it continues to lack broad adoption. Non‑standard approaches, like React and Angular, remain more popular because they offer the same power, more rapid innovation, and a superior developer experience.</li></ul><h3 id="community-vs-corporate"><a class="markdownIt-Anchor" href="#community-vs-corporate"></a> Community vs Corporate</h3><ul><li>And React is corporate‑backed, which means its design is influenced by Facebook’s needs. But Facebook continues to accept input from the community and has evolved React into a highly flexible and well‑supported system.</li></ul><h2 id="decisions-to-make"><a class="markdownIt-Anchor" href="#decisions-to-make"></a> Decisions to make</h2><ol><li>Develop environment - create-react-app</li><li>Classes or Functions - Functions</li><li>Types - PropTypes, TypeScript, Flow</li></ol><ul><li>TypeScript is a superset of JavaScript that adds strong typing support and compiles down to plain JavaScript</li><li>Flow: adding static type checking to JavaScrWipt</li></ul><ol start="4"><li>States - Plain React, Flux, Redux, MobX</li></ol><ul><li>Component State: Plain React</li><li>Centralized State: Flux, Redux</li><li>Observable State: MobX</li></ul><ol start="5"><li>Styling - Plain CSS/Sass/Less, CSS in JS<br />W</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;setting-up-a-development-environment&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#setting-up-a-development-environment&quot;&gt;&lt;/a&gt; Setting up a De</summary>
      
    
    
    
    
    <category term="React" scheme="http://hellcy.github.io/tags/React/"/>
    
  </entry>
  
</feed>
