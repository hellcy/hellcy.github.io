<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Polymorphism in Java</title>
      <link href="2022/02/10/Polymorphism-in-Java/"/>
      <url>2022/02/10/Polymorphism-in-Java/</url>
      
        <content type="html"><![CDATA[<h1 id="编译时多态"><a class="markdownIt-Anchor" href="#编译时多态"></a> 编译时多态</h1><ul><li>设计时多态方法重载</li></ul><h1 id="运行时多态"><a class="markdownIt-Anchor" href="#运行时多态"></a> 运行时多态</h1><ul><li>程序运行时动态决定调用那个方法</li></ul><h1 id="必要条件"><a class="markdownIt-Anchor" href="#必要条件"></a> 必要条件</h1><ol><li>满足继承关系</li><li>父类引用指向子类对象</li></ol><h1 id="向上转型"><a class="markdownIt-Anchor" href="#向上转型"></a> 向上转型</h1><ul><li>父类引用指向子类实例，可以调用子类重写父类的方法以及父类派生的方法，无法调用子类独有的方法</li><li>父类中的静态方法无法被子类重写，所以向上转型之后，只能调用到父类原有的静态方法</li></ul><h1 id="向下转型"><a class="markdownIt-Anchor" href="#向下转型"></a> 向下转型</h1><ul><li>子类引用指向父类对象，此处可以使用<code>instanceof</code>进行检查，避免类型转换时的安全性问题</li><li>可以调用子类独有的方法</li></ul><h1 id="抽象类-abstract-class"><a class="markdownIt-Anchor" href="#抽象类-abstract-class"></a> 抽象类 abstract class</h1><ul><li>限制实例化</li><li>只能被继承</li><li>应用场景： 某个父类只是知道其子类应该包含怎样的方法，但无法准确知道这些子类如何实现这些方法</li></ul><h1 id="抽象方法-abstract-method"><a class="markdownIt-Anchor" href="#抽象方法-abstract-method"></a> 抽象方法 abstract method</h1><ul><li>不能有方法体</li><li>必须由子类实现</li><li>子类如果没有重写父类的所有抽象方法，则也要定义为抽象类</li></ul><h1 id="接口-interface"><a class="markdownIt-Anchor" href="#接口-interface"></a> 接口 Interface</h1><ul><li>当多个类具有相同能力的时候，可以使用接口抽象出相同的能力</li><li>接口定义了某一批类所需要遵守的规范</li><li>接口不关心这些类的内部数据，也不关心这些类里的方法的实现细节，它只规定这些类里必须提供某些方法</li><li>接口方法可以不写<code>abstract</code>关键字，并且默认为public的访问权限</li><li>当类实现接口时，需要去实现接口中的所有抽象方法，否则需要将该类设置为抽象类</li><li>接口中可以定义常量，默认为<code>public static final</code></li></ul><h2 id="默认方法"><a class="markdownIt-Anchor" href="#默认方法"></a> 默认方法</h2><ul><li>自JDK1.8之后，接口中可以存在默认方法，使用<code>default</code>关键字定义</li><li>默认方法可以带方法体，子类实现接口时可以不用实现默认方法</li><li>子类可以重写默认方法，并可以通过接口的引用调用</li></ul><h2 id="静态方法"><a class="markdownIt-Anchor" href="#静态方法"></a> 静态方法</h2><ul><li>自JDK1.8之后，接口中可以存在静态方法，使用<code>static</code>关键字定义</li><li>静态方法可以带方法体，子类可以通过使用接口名访问接口的静态方法</li></ul><h2 id="多重实现"><a class="markdownIt-Anchor" href="#多重实现"></a> 多重实现</h2><ul><li>子类可以继承一个父类，但是可以实现多个接口</li><li>当多个接口中具有相同签名的方法时，子类需要重写方法</li><li>当父类和接口具有相同签名的方法时，父类方法具有优先权</li><li>当父类和接口具有相同名字的变量时，子类需要重新定义该变量，父类中的变量不具有优先权</li></ul><h2 id="接口的继承"><a class="markdownIt-Anchor" href="#接口的继承"></a> 接口的继承</h2><ul><li>接口也可以实现继承关系</li><li>接口可以继承多个父接口</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public interface ParentOne &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public interface ParentTwo &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public interface Child extends ParentOne, ParentTwo &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="内部类"><a class="markdownIt-Anchor" href="#内部类"></a> 内部类</h1><ul><li>内部类提供了更好的封装，不允许其他外部类访问内部类的信息</li></ul><h2 id="成员内部类"><a class="markdownIt-Anchor" href="#成员内部类"></a> 成员内部类</h2><ul><li>最常见的内部类，也称为普通内部类</li><li>内部类在外部使用时，无法直接实例化，需要借由外部类信息才能完成实例化</li><li>内部类的访问修饰符，可以是任意的，但是访问权限会受到修饰符的影响</li><li>内部类可以直接访问外部类的成员（包括成员属性和成员方法），如果出现同名属性，优先访问内部类中定义的</li><li>外部类访问内部类的信息需要通过内部类的实例，无法直接访问</li><li>内部类编译后得class文件名：外部类$内部类.class</li></ul><h3 id="获取内部类对象实例"><a class="markdownIt-Anchor" href="#获取内部类对象实例"></a> 获取内部类对象实例</h3><ol><li>new 外部类.new 内部类</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person.Heart myHeart &#x3D; new Person().new Heart();</span><br></pre></td></tr></table></figure><ol start="2"><li>外部类对象.new 内部类</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myHeart &#x3D; myPerson.new Heart();</span><br></pre></td></tr></table></figure><ol start="3"><li>外部类对象.获取方法</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myHeart &#x3D; myPerson.getHeart();</span><br></pre></td></tr></table></figure><h2 id="静态内部类"><a class="markdownIt-Anchor" href="#静态内部类"></a> 静态内部类</h2><ul><li>静态内部类中，只能直接访问外部类的静态成员</li><li>需要使用外部类的实例对象来访问非静态成员</li><li>访问静态内部类对象实例时，可以不依赖于外部类对象</li></ul><h3 id="获取静态内部类实例"><a class="markdownIt-Anchor" href="#获取静态内部类实例"></a> 获取静态内部类实例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Person.Heart myHeart &#x3D; new Person.Heart();</span><br></pre></td></tr></table></figure><h2 id="方法内部类"><a class="markdownIt-Anchor" href="#方法内部类"></a> 方法内部类</h2><ul><li>定义在外部类方法中的内部类，也成为局部内部类</li><li>方法内部类中无法定义静态成员</li><li>类中可以使用final，abstract成员</li><li>和方法内部成员使用规则一样，class前面不可以添加public，private，protected，static等关键字</li></ul><h2 id="匿名内部类"><a class="markdownIt-Anchor" href="#匿名内部类"></a> 匿名内部类</h2><ul><li>将类的定义和类的创建放在一起完成，程序只会用到一次类的实例，所以类名无关紧要</li><li>对于抽象类Person来说，如果我们想调用其中的抽象方法，一种做法是创建一个实现read方法的子类</li><li>但是如果这个子类只会被用到一次，那这个子类的名字就不重要，就可以使用匿名内部类来解决</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public abstract class Person &#123;</span><br><span class="line">    public abstract void read();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class PersonTest &#123;</span><br><span class="line">    public void getRead(Person person) &#123;</span><br><span class="line">        person.read();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        PersonTest personTest &#x3D; new PersonTest();</span><br><span class="line"></span><br><span class="line">        personTest.getRead(new Person() &#123;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void read() &#123;</span><br><span class="line">                System.out.println(&quot;implement read method in Person parent abstract class&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCP/IP</title>
      <link href="2021/05/26/TCP-IP/"/>
      <url>2021/05/26/TCP-IP/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> TCP/IP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# LINQ</title>
      <link href="2021/04/20/C-LINQ/"/>
      <url>2021/04/20/C-LINQ/</url>
      
        <content type="html"><![CDATA[<h2 id="linq"><a class="markdownIt-Anchor" href="#linq"></a> LINQ</h2><ul><li>SQL-like syntax in C# and Visual Basic</li><li>Query any type of collection (<code>IEnumerable&lt;T&gt;</code>)</li><li>Query external data sources (xml, databases, JSON, CSV)</li></ul><h3 id="sql-query-vs-linq-query-syntax"><a class="markdownIt-Anchor" href="#sql-query-vs-linq-query-syntax"></a> SQL Query vs LINQ Query Syntax</h3><table><thead><tr><th>SQL</th><th>LINQ</th></tr></thead><tbody><tr><td>SELECT * FROM Products</td><td>FROM prod IN Products SELECT prod</td></tr><tr><td>SELECT Name FROM Products</td><td>FROM prod in Products SELECT <a href="http://prod.Name">prod.Name</a></td></tr><tr><td>SELECT * FROM Products WHERE ListPrice &gt; 10</td><td>FROM prod in Products WHERE prod.ListPrice &gt; 10 SELECT prod</td></tr></tbody></table><h3 id="two-linq-syntaxes"><a class="markdownIt-Anchor" href="#two-linq-syntaxes"></a> Two LINQ Syntaxes</h3><table><thead><tr><th>Query</th><th>Method</th></tr></thead><tbody><tr><td>FROM prod in Products SELECT prod</td><td>Products.Select(prod =&gt; prod)</td></tr><tr><td>FROM prod in Products SELECT <a href="http://prod.Name">prod.Name</a></td><td>Products.Select(prod =&gt; <a href="http://prod.Name">prod.Name</a>)</td></tr><tr><td>FROM prod in Products WHERE prod.ListPrice &gt; 10 SELECT prod</td><td>Products.Where(prod =&gt; prod.ListPrice &gt; 10).Select(prod =&gt; prod)</td></tr></tbody></table><h3 id="linq-operations"><a class="markdownIt-Anchor" href="#linq-operations"></a> LINQ Operations</h3><ul><li>Select</li><li>Projection (Change shape, select only certain properties from an object)</li><li>Order (ascending/descending)</li><li>Get an Element (find, first, last, single)</li><li>Filter (where)</li><li>Iteration/Partioning (foreach, skip, take)</li><li>Quantify (any, all, contains)</li><li>Set Comparison (equal, except, intersection)</li><li>Set Operations (union, concat)</li><li>Joining (inner joins, outer joins)</li><li>Grouping (groupby, subquery, groupjoin)</li><li>Distinct Sets (distinct)</li><li>Aggregation (count, sum, min, max, average)</li></ul><h2 id="select-and-order-operations"><a class="markdownIt-Anchor" href="#select-and-order-operations"></a> Select and Order Operations</h2><h3 id="projection-only-select-specific-columns-from-an-object"><a class="markdownIt-Anchor" href="#projection-only-select-specific-columns-from-an-object"></a> Projection (only select specific columns from an object)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">if (UseQuerySyntax)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Query Syntax</span><br><span class="line">    Products &#x3D; (from prod in Products</span><br><span class="line">                select new Product</span><br><span class="line">                &#123;</span><br><span class="line">                    ProductID &#x3D; prod.ProductID,</span><br><span class="line">                    Name &#x3D; prod.Name,</span><br><span class="line">                    Size &#x3D; prod.Size,</span><br><span class="line">                &#125;).ToList();</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Method Syntax</span><br><span class="line">    Products &#x3D; Products.Select(prod &#x3D;&gt; new Product</span><br><span class="line">    &#123;</span><br><span class="line">        ProductID &#x3D; prod.ProductID,</span><br><span class="line">        Name &#x3D; prod.Name,</span><br><span class="line">        Size &#x3D; prod.Size</span><br><span class="line">    &#125;).ToList();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="projection-with-anonymous-class"><a class="markdownIt-Anchor" href="#projection-with-anonymous-class"></a> Projection with Anonymous Class</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">if (UseQuerySyntax)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Query Syntax</span><br><span class="line">    var products &#x3D; (from prod in Products</span><br><span class="line">                    select new</span><br><span class="line">                    &#123;</span><br><span class="line">                        Identifier &#x3D; prod.ProductID,</span><br><span class="line">                        ProductName &#x3D; prod.Name,</span><br><span class="line">                        ProductSize &#x3D; prod.Size</span><br><span class="line">                    &#125;);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Loop through anonymous class</span><br><span class="line">    foreach (var prod in products)</span><br><span class="line">    &#123;</span><br><span class="line">        sb.AppendLine($&quot;Product ID: &#123;prod.Identifier&#125;&quot;);</span><br><span class="line">        sb.AppendLine($&quot;   Product Name: &#123;prod.ProductName&#125;&quot;);</span><br><span class="line">        sb.AppendLine($&quot;   Product Size: &#123;prod.ProductSize&#125;&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Method Syntax</span><br><span class="line">    var products &#x3D; Products.Select(prod &#x3D;&gt; new</span><br><span class="line">    &#123;</span><br><span class="line">        Identifier &#x3D; prod.ProductID,</span><br><span class="line">        ProductName &#x3D; prod.Name,</span><br><span class="line">        ProductSize &#x3D; prod.Size</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Loop through anonymous class</span><br><span class="line">    foreach (var prod in products)</span><br><span class="line">    &#123;</span><br><span class="line">        sb.AppendLine($&quot;Product ID: &#123;prod.Identifier&#125;&quot;);</span><br><span class="line">        sb.AppendLine($&quot;   Product Name: &#123;prod.ProductName&#125;&quot;);</span><br><span class="line">        sb.AppendLine($&quot;   Product Size: &#123;prod.ProductSize&#125;&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ordering-data"><a class="markdownIt-Anchor" href="#ordering-data"></a> Ordering Data</h3><p>When using Method Syntax to order data, the .Select() method is optional when you are simply selecting the complete object as the return value</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public void OrderBy()</span><br><span class="line">&#123;</span><br><span class="line">    if (UseQuerySyntax)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; Query Syntax</span><br><span class="line">        Products &#x3D; (from prod in Products orderby prod.Name select prod).ToList();</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; Method Syntax</span><br><span class="line">        Products &#x3D; Products.OrderBy(prod &#x3D;&gt; prod.Name).ToList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ResultText &#x3D; $&quot;Total Products: &#123;Products.Count&#125;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Order by Descending</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public void OrderByDescending()</span><br><span class="line">&#123;</span><br><span class="line">    if (UseQuerySyntax)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; Query Syntax</span><br><span class="line">        Products &#x3D; (from prod in Products orderby prod.Name descending select prod).ToList();</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; Method Syntax</span><br><span class="line">        Products &#x3D; Products.OrderByDescending(prod &#x3D;&gt; prod.Name).ToList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ResultText &#x3D; $&quot;Total Products: &#123;Products.Count&#125;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="order-by-two-fields"><a class="markdownIt-Anchor" href="#order-by-two-fields"></a> Order by Two Fields</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public void OrderByTwoFields()</span><br><span class="line">&#123;</span><br><span class="line">    if (UseQuerySyntax)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; Query Syntax</span><br><span class="line">        Products &#x3D; (from prod in Products orderby prod.Color descending, prod.Name).ToList();</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; Method Syntax</span><br><span class="line">        Products &#x3D; Products.OrderByDescending(prod &#x3D;&gt; prod.Color).ThenBy(prod &#x3D;&gt; prod.Name).ToList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ResultText &#x3D; $&quot;Total Products: &#123;Products.Count&#125;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="extract-multiple-or-single-elements"><a class="markdownIt-Anchor" href="#extract-multiple-or-single-elements"></a> Extract Multiple or Single Elements</h2><h3 id="where-expression"><a class="markdownIt-Anchor" href="#where-expression"></a> Where Expression</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public void WhereExpression()</span><br><span class="line">&#123;</span><br><span class="line">    string search &#x3D; &quot;L&quot;;</span><br><span class="line"></span><br><span class="line">    if (UseQuerySyntax)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; Query Syntax</span><br><span class="line">        Products &#x3D; (from prod in Products where prod.Name.StartsWith(search) select prod).ToList();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; Method Syntax</span><br><span class="line">        Products &#x3D; Products.Where(prod &#x3D;&gt; prod.Name.StartsWith(search)).ToList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ResultText &#x3D; $&quot;Total Products: &#123;Products.Count&#125;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Where with multiple fields</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public void WhereTwoFields()</span><br><span class="line">&#123;</span><br><span class="line">    string search &#x3D; &quot;L&quot;;</span><br><span class="line">    decimal cost &#x3D; 100;</span><br><span class="line"></span><br><span class="line">    if (UseQuerySyntax)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; Query Syntax</span><br><span class="line">        Products &#x3D; (from prod in Products where prod.Name.StartsWith(search) &amp;&amp; prod.StandardCost &gt; cost).ToList();</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; Method Syntax</span><br><span class="line">        Products &#x3D; Products.Where(prod &#x3D;&gt; prod.Name.StartsWith(search) &amp;&amp; prod.StandardCost &gt; cost).ToList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ResultText &#x3D; $&quot;Total Products: &#123;Products.Count&#125;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Using Custom Extension Method</li></ul><h3 id="extension-method"><a class="markdownIt-Anchor" href="#extension-method"></a> Extension Method</h3><p>Extension methods enable you to “add” methods to existing types without creating a new derived type, recompiling, or otherwise modifying the original type. Extension methods are static methods, but they’re called as if they were instance methods on the extended type.</p><p>The most common extension methods are the LINQ standard query operators that add query functionality to the existing <code>System.Collections.IEnumerable</code> and <code>System.Collections.Generic.IEnumerable&lt;T&gt;</code> types.</p><p>Extension methods are defined as <code>static</code> methods but are called by using instance method syntax. Their first parameter specifies which type the method operates on. The parameter is preceded by the <code>this</code> modifier.</p><p>Extension method is just a static method under the hood.</p><p>In the example, the result of <code>(from prod in Products select prod)</code> is an <code>IEnumerable&lt;Product&gt;</code> which is why <code>ByColor()</code> can be applied to this</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public static IEnumerable&lt;Product&gt; ByColor(</span><br><span class="line">    this IEnumerable&lt;Product&gt; query, string color)</span><br><span class="line">&#123;</span><br><span class="line">    return query.Where(prod &#x3D;&gt; prod.Color &#x3D;&#x3D; color);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (UseQuerySyntax)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Query Syntax</span><br><span class="line">    Products &#x3D; (from prod in Products select prod).ByColor(search).ToList();</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Method Syntax</span><br><span class="line">    Products &#x3D; Products.ByColor(search).ToList();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="select-a-single-item"><a class="markdownIt-Anchor" href="#select-a-single-item"></a> Select a Single Item</h3><ul><li>First, will throw an Exception if item not found.</li><li>Last, same as First</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">try</span><br><span class="line">&#123;</span><br><span class="line">    if (UseQuerySyntax)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; Query Syntax</span><br><span class="line">        value &#x3D; (from prod in Products select prod).First(prod &#x3D;&gt; prod.Color &#x3D;&#x3D; search);</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; Method Syntax</span><br><span class="line">        value &#x3D; Products.First(prod &#x3D;&gt; prod.Color &#x3D;&#x3D; search);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ResultText &#x3D; $&quot;Found: &#123;value&#125;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">catch</span><br><span class="line">&#123;</span><br><span class="line">    ResultText &#x3D; &quot;Not Found&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>FirstOrDefault, value will be null if item not found, will not throw an Exception</li><li>LastOrDefault, same as FirstOrDefault</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">if (UseQuerySyntax)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Query Syntax</span><br><span class="line">    value &#x3D; (from prod in Products select prod).First(prod &#x3D;&gt; prod.Color &#x3D;&#x3D; search);</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Method Syntax</span><br><span class="line">    value &#x3D; Products.First(prod &#x3D;&gt; prod.Color &#x3D;&#x3D; search);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (value &#x3D;&#x3D; null)</span><br><span class="line">&#123;</span><br><span class="line">    ResultText &#x3D; &quot;Not Found&quot;;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    ResultText &#x3D; $&quot;Found: &#123;value&#125;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Single, will throw an Exception if item not found or multiple items found.</li></ul><p>Single is supposed to be used to found a unique item, like primary key. The Exception thrown if multiple items are found is InvalidOperationException.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">try</span><br><span class="line">&#123;</span><br><span class="line">    if (UseQuerySyntax)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; Query Syntax</span><br><span class="line">        value &#x3D; (from prod in Products select prod).Single(prod &#x3D;&gt; prod.ProductID &#x3D;&#x3D; search);</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; Method Syntax</span><br><span class="line">        value &#x3D; Products.Single(prod &#x3D;&gt; prod.ProductID &#x3D;&#x3D; search);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ResultText &#x3D; $&quot;Found: &#123;value&#125;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">catch</span><br><span class="line">&#123;</span><br><span class="line">    ResultText &#x3D; &quot;Not Found, or multiple elements found&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>SingleOrDefault, value will be NULL if no item found, but will still throw an Exception if multiple items found.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">try</span><br><span class="line">&#123;</span><br><span class="line">    if (UseQuerySyntax)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; Query Syntax</span><br><span class="line">        value &#x3D; (from prod in Products select prod).SingleOrDefault(prod &#x3D;&gt; prod.ProductID &#x3D;&#x3D; search);</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; Method Syntax</span><br><span class="line">        value &#x3D; Products.SingleOrDefault(prod &#x3D;&gt; prod.ProductID &#x3D;&#x3D; search);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (value &#x3D;&#x3D; null)</span><br><span class="line">    &#123;</span><br><span class="line">        ResultText &#x3D; &quot;Not Found&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        ResultText &#x3D; $&quot;Found: &#123;value&#125;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">catch</span><br><span class="line">&#123;</span><br><span class="line">    ResultText &#x3D; &quot;Multiple elements found&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="extract-distinct-values-assign-values-and-partition-collections"><a class="markdownIt-Anchor" href="#extract-distinct-values-assign-values-and-partition-collections"></a> Extract Distinct Values, Assign Values and Partition Collections</h2><h3 id="set-operations"><a class="markdownIt-Anchor" href="#set-operations"></a> Set Operations</h3><ul><li>Iterate over entire collection</li><li>Set a property value in collection (similar to a SQL UPDATE)</li></ul><p>In this example, the object has a NameLength property and we need to assign the value <code>prop.Name.Length</code> to this <code>prop.NameLength</code> property.</p><p>For the Query approach, we need to declare a tmp variable because it has to be a statement, not an assignment. But the Method approach doesn’t have this issue.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public void ForEach()</span><br><span class="line">&#123;</span><br><span class="line">    if (UseQuerySyntax)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; Query Syntax</span><br><span class="line">        Products &#x3D; (from prod in Products</span><br><span class="line">                    let tmp &#x3D; prod.NameLength &#x3D; prod.Name.Length</span><br><span class="line">                    select prod).ToList();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; Method Syntax</span><br><span class="line">        Products.ForEach(prod &#x3D;&gt; prod.NameLength &#x3D; prod.Name.Length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ResultText &#x3D; $&quot;Total Products: &#123;Products.Count&#125;&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In this example we have a Sales object, and we need to calculate how many item we have sold for a certain product.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">private decimal SalesForProduct(Product prod)</span><br><span class="line">&#123;</span><br><span class="line">    return Sales.Where(sale &#x3D;&gt; sale.ProductID &#x3D;&#x3D; prod.ProductID)</span><br><span class="line">                .Sum(sale &#x3D;&gt; sale.LineTotal);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We could then use this to set the TotalSales property for each Product</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">if (UseQuerySyntax)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Query Syntax</span><br><span class="line">    Products &#x3D; (from prod in Products</span><br><span class="line">                let tmp &#x3D; prod.TotalSales &#x3D; SalesForProduct(prod)</span><br><span class="line">                select prod).ToList();</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Method Syntax</span><br><span class="line">    Products.ForEach(prod &#x3D;&gt; prod.TotalSales &#x3D; SalesForProduct(prod));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="take-specific-amount-of-elements"><a class="markdownIt-Anchor" href="#take-specific-amount-of-elements"></a> Take Specific Amount of Elements</h3><p>Take the first 5 elements from the list</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">if (UseQuerySyntax)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Query Syntax</span><br><span class="line">    Products &#x3D; (from prod in Products</span><br><span class="line">                orderby prod.Name</span><br><span class="line">                select prod).Take(5).ToList();</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Method Syntax</span><br><span class="line">    Products &#x3D; Products.OrderBy(prod &#x3D;&gt; prod.Name).Take(5).ToList();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>TakeWhile(): take elements while condition is true</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">if (UseQuerySyntax)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Query Syntax</span><br><span class="line">    Products &#x3D; (from prod in Products</span><br><span class="line">                orderby prod.Name</span><br><span class="line">                select prod).TakeWhile(prod &#x3D;&gt; prod.Name.StartsWith(&quot;A&quot;)).ToList();</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Method Syntax</span><br><span class="line">    Products &#x3D; Products.OrderBy(prod &#x3D;&gt; prod.Name).TakeWhile(prod &#x3D;&gt; prod.Name.StartsWith(&quot;A&quot;)).ToList();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="skip-specific-amount-of-elements"><a class="markdownIt-Anchor" href="#skip-specific-amount-of-elements"></a> Skip specific amount of elements</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">if (UseQuerySyntax)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Query Syntax</span><br><span class="line">    Products &#x3D; (from prod in Products</span><br><span class="line">                orderby prod.Name</span><br><span class="line">                select prod).Skip(20).ToList();</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Method Syntax</span><br><span class="line">    Products &#x3D; Products.OrderBy(prod &#x3D;&gt; prod.Name).Skip(20).ToList();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Skip elements while condition is true</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">if (UseQuerySyntax)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Query Syntax</span><br><span class="line">    Products &#x3D; (from prod in Products</span><br><span class="line">                orderby prod.Name</span><br><span class="line">                select prod).SkipWhile(prod &#x3D;&gt; prod.Name.StartsWith(&quot;A&quot;)).ToList();</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Method Syntax</span><br><span class="line">    Products &#x3D; Products.OrderBy(prod &#x3D;&gt; prod.Name).SkipWhile(prod &#x3D;&gt; prod.Name.StartsWith(&quot;A&quot;)).ToList();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="select-distinct-values"><a class="markdownIt-Anchor" href="#select-distinct-values"></a> Select Distinct Values</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">if (UseQuerySyntax)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Query Syntax</span><br><span class="line">    colors &#x3D; (from prod in Products select prod.Color).Distinct().ToList();</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Method Syntax</span><br><span class="line">    colors &#x3D; Products.Select(prod &#x3D;&gt; prod.Color).Distinct().ToList();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="identify-what-kind-of-data-is-contained-in-collections"><a class="markdownIt-Anchor" href="#identify-what-kind-of-data-is-contained-in-collections"></a> Identify What Kind of Data is Contained in Collections</h2><h3 id="all-will-return-a-true-or-false-value-to-see-if-all-items-meet-the-requirement"><a class="markdownIt-Anchor" href="#all-will-return-a-true-or-false-value-to-see-if-all-items-meet-the-requirement"></a> All() will return a true or false value to see if all items meet the requirement.</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">if (UseQuerySyntax)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Query Syntax</span><br><span class="line">    value &#x3D; (from prod in Products select prod).All(prod &#x3D;&gt; prod.Name.Contains(search));</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Method Syntax</span><br><span class="line">    value &#x3D; Products.All(prod &#x3D;&gt; prod.Name.Contains(search));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="any-will-return-true-if-any-of-the-item-meet-the-requirement-and-will-return-false-will-all-items-doesnt-meet-the-requirement"><a class="markdownIt-Anchor" href="#any-will-return-true-if-any-of-the-item-meet-the-requirement-and-will-return-false-will-all-items-doesnt-meet-the-requirement"></a> Any() will return true if any of the item meet the requirement. And will return false will all items doesn’t meet the requirement.</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">if (UseQuerySyntax)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Query Syntax</span><br><span class="line">    value &#x3D; (from prod in Products select prod).Any(prod &#x3D;&gt; prod.Name.Contains(search));</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Method Syntax</span><br><span class="line">    value &#x3D; Products.Any(prod &#x3D;&gt; prod.Name.Contains(search));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="contains-can-be-used-in-primitive-types-and-objects"><a class="markdownIt-Anchor" href="#contains-can-be-used-in-primitive-types-and-objects"></a> Contains can be used in primitive types and objects</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">bool value &#x3D; true;</span><br><span class="line">List&lt;int&gt; numbers &#x3D; new List&lt;int&gt; &#123; 1, 2, 3, 4, 5 &#125;;</span><br><span class="line"></span><br><span class="line">if (UseQuerySyntax)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Query Syntax</span><br><span class="line">    value &#x3D; (from num in numbers select num).Contains(3);</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Method Syntax</span><br><span class="line">    value &#x3D; numbers.Contains(3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>When using Contains() on a collection of objects. We need to use EqualityComparer, because by default objects are compared by reference not value.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class ProductIdComparer : EqualityComparer&lt;Product&gt; &#123;</span><br><span class="line">    public override bool Equals(Product x, Product y) &#123;</span><br><span class="line">        return (x.ProductID &#x3D;&#x3D; y.ProductID);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public override int GetHashCode(Product obj) &#123;</span><br><span class="line">    return obj.ProductID.GetHashCode();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now when calling Contains() method, we pass in the Comparer object, so it will loop through all products and compare each one with our prodToFind Product. The Comparer will use prodToFind as the first parameter and each Product as the second parameter.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">int search &#x3D; 744;</span><br><span class="line">bool value &#x3D; true;</span><br><span class="line">ProductIdComparer pc &#x3D; new ProductIdComparer();</span><br><span class="line">Product prodToFind &#x3D; new Product &#123; ProductID &#x3D; search &#125;;</span><br><span class="line"></span><br><span class="line">if (UseQuerySyntax)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Query Syntax</span><br><span class="line">    value &#x3D; (from prod in Products select prod).Contains(prodToFind, pc);</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Method Syntax</span><br><span class="line">    value &#x3D; Products.Contains(prodToFind, pc);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="compare-and-union-two-collections"><a class="markdownIt-Anchor" href="#compare-and-union-two-collections"></a> Compare and Union Two Collections</h2><h3 id="sequenceequal"><a class="markdownIt-Anchor" href="#sequenceequal"></a> SequenceEqual()</h3><p>Compares two collections for equlity.</p><ul><li>For Simple data types (int, decimal, boolean…) it checks values</li><li>For object data types checks reference</li><li>If you want to compare values in objects, you need to create a comparer class to check the values inside each properties.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Use SequenceEqual on primitives</span><br><span class="line">bool value &#x3D; true;</span><br><span class="line">&#x2F;&#x2F; Create a list of numbers</span><br><span class="line">List&lt;int&gt; list1 &#x3D; new List&lt;int&gt; &#123; 1, 2, 3, 4, 5 &#125;;</span><br><span class="line">&#x2F;&#x2F; Create a list of numbers</span><br><span class="line">List&lt;int&gt; list2 &#x3D; new List&lt;int&gt; &#123; 1, 2, 3, 4, 5 &#125;;</span><br><span class="line"></span><br><span class="line">if (UseQuerySyntax)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Query Syntax</span><br><span class="line">    value &#x3D; (from num in list1 select num).SequenceEqual(list2);</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Method Syntax</span><br><span class="line">    value &#x3D; list1.SequenceEqual(list2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>If we want to compare each object in a collection by value, we need to create a new Comparer override the Compare method.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">bool value &#x3D; true;</span><br><span class="line">ProductComparer pc &#x3D; new ProductComparer();</span><br><span class="line">&#x2F;&#x2F; Load all Product Data</span><br><span class="line">List&lt;Product&gt; list1 &#x3D; ProductRepository.GetAll();</span><br><span class="line">&#x2F;&#x2F; Load all Product Data</span><br><span class="line">List&lt;Product&gt; list2 &#x3D; ProductRepository.GetAll();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Remove an element from &#39;list1&#39; to make the collections different</span><br><span class="line">list1.RemoveAt(0);</span><br><span class="line"></span><br><span class="line">if (UseQuerySyntax)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Query Syntax</span><br><span class="line">    value &#x3D; (from num in list1 select num).SequenceEqual(list2, pc);</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Method Syntax</span><br><span class="line">    value &#x3D; list1.SequenceEqual(list2, pc);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="except"><a class="markdownIt-Anchor" href="#except"></a> Except</h3><ul><li>It finds all values in one list, but not the other, returns a collection of items.</li><li>Similar to Contains and SequenceEqual, if we are comparing primitive types, we can just use it, but if we are comparing objects values, we need to create a Comparer class and override the Compare method.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">List&lt;int&gt; exceptions &#x3D; new List&lt;int&gt;();</span><br><span class="line">&#x2F;&#x2F; Create a list of numbers</span><br><span class="line">List&lt;int&gt; list1 &#x3D; new List&lt;int&gt; &#123; 1, 2, 3, 4 &#125;;</span><br><span class="line">&#x2F;&#x2F; Create a list of numbers</span><br><span class="line">List&lt;int&gt; list2 &#x3D; new List&lt;int&gt; &#123; 3, 4, 5 &#125;;</span><br><span class="line"></span><br><span class="line">if (UseQuerySyntax)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Query Syntax</span><br><span class="line">    exceptions &#x3D; (from num in list1 select num).Except(list2).ToList();</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Method Syntax</span><br><span class="line">    exceptions &#x3D; list1.Except(list2).ToList();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Using Except on a collection of objects</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">ProductComparer pc &#x3D; new ProductComparer();</span><br><span class="line">&#x2F;&#x2F; Load all Product Data</span><br><span class="line">List&lt;Product&gt; list1 &#x3D; ProductRepository.GetAll();</span><br><span class="line">&#x2F;&#x2F; Load all Product Data</span><br><span class="line">List&lt;Product&gt; list2 &#x3D; ProductRepository.GetAll();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Remove all products with color &#x3D; &quot;Black&quot; from &#39;list2&#39;</span><br><span class="line">&#x2F;&#x2F; to give us a difference in the two lists</span><br><span class="line">list2.RemoveAll(prod &#x3D;&gt; prod.Color &#x3D;&#x3D; &quot;Black&quot;);</span><br><span class="line"></span><br><span class="line">if (UseQuerySyntax)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Query Syntax</span><br><span class="line">    Products &#x3D; (from prod in list1 select prod).Except(list2, pc).ToList();</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Method Syntax</span><br><span class="line">    Products &#x3D; list1.Except(list2, pc).ToList();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="intersect"><a class="markdownIt-Anchor" href="#intersect"></a> Intersect</h3><ul><li>It finds all values in common between both lists</li><li>Similar to Contains, SequenceEqual and Except, it compares values for primitive types and references for objects. We need to create comparer class to check values in properties.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">ProductComparer pc &#x3D; new ProductComparer();</span><br><span class="line">&#x2F;&#x2F; Load all Product Data</span><br><span class="line">List&lt;Product&gt; list1 &#x3D; ProductRepository.GetAll();</span><br><span class="line">&#x2F;&#x2F; Load all Product Data</span><br><span class="line">List&lt;Product&gt; list2 &#x3D; ProductRepository.GetAll();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Remove &#39;black&#39; products from &#39;list1&#39;</span><br><span class="line">list1.RemoveAll(prod &#x3D;&gt; prod.Color &#x3D;&#x3D; &quot;Black&quot;);</span><br><span class="line">&#x2F;&#x2F; Remove &#39;red&#39; products from &#39;list2&#39;</span><br><span class="line">list2.RemoveAll(prod &#x3D;&gt; prod.Color &#x3D;&#x3D; &quot;Red&quot;);</span><br><span class="line"></span><br><span class="line">if (UseQuerySyntax)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Query Syntax</span><br><span class="line">    Products &#x3D; (from num in list1 select num).Intersect(list2, pc).ToList();</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Method Syntax</span><br><span class="line">    Products &#x3D; list1.Intersect(list2, pc).ToList();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="unions"><a class="markdownIt-Anchor" href="#unions"></a> Unions</h3><ul><li>It adds the contents of two lists together.</li><li>Union() checks for duplicates</li><li>Concat() does not check for duplicates</li><li>Use comparer class with objects</li></ul><p>Union() need Comparer to eliminate duplicates</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">ProductComparer pc &#x3D; new ProductComparer();</span><br><span class="line">&#x2F;&#x2F; Load all Product Data</span><br><span class="line">List&lt;Product&gt; list1 &#x3D; ProductRepository.GetAll();</span><br><span class="line">&#x2F;&#x2F; Load all Product Data</span><br><span class="line">List&lt;Product&gt; list2 &#x3D; ProductRepository.GetAll();</span><br><span class="line"></span><br><span class="line">if (UseQuerySyntax)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Query Syntax</span><br><span class="line">    Products &#x3D; (from num in list1 select num).Union(list2, pc).OrderBy(prod &#x3D;&gt; prod.Name).ToList();</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Method Syntax</span><br><span class="line">    Products &#x3D; list1.Union(list2, pc).OrderBy(prod &#x3D;&gt; prod.Name).ToList();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="concat"><a class="markdownIt-Anchor" href="#concat"></a> Concat()</h3><ul><li>Adds the contents of two collections with duplicates</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Load all Product Data</span><br><span class="line">List&lt;Product&gt; list1 &#x3D; ProductRepository.GetAll();</span><br><span class="line">&#x2F;&#x2F; Load all Product Data</span><br><span class="line">List&lt;Product&gt; list2 &#x3D; ProductRepository.GetAll();</span><br><span class="line"></span><br><span class="line">if (UseQuerySyntax)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Query Syntax</span><br><span class="line">    Products &#x3D; (from num in list1 select num).Concat(list2).OrderBy(prod &#x3D;&gt; prod.Name).ToList();</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Method Syntax</span><br><span class="line">    Products &#x3D; list1.Concat(list2).OrderBy(prod &#x3D;&gt; prod.Name).ToList();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="joining-two-collections-together"><a class="markdownIt-Anchor" href="#joining-two-collections-together"></a> Joining Two Collections Together</h2><h3 id="inner-join"><a class="markdownIt-Anchor" href="#inner-join"></a> Inner Join</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">var query &#x3D; Products.Join(Sales, prod &#x3D;&gt; prod.ProductID, sale &#x3D;&gt; sale.ProductID, (prod, sale) &#x3D;&gt; new</span><br><span class="line">&#123;</span><br><span class="line">    prod.ProductID,</span><br><span class="line">    prod.Name,</span><br><span class="line">    prod.Color,</span><br><span class="line">    prod.StandardCost,</span><br><span class="line">    prod.ListPrice,</span><br><span class="line">    prod.Size,</span><br><span class="line">    sale.SalesOrderID,</span><br><span class="line">    sale.OrderQty,</span><br><span class="line">    sale.UnitPrice,</span><br><span class="line">    sale.LineTotal,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="inner-join-with-two-fields"><a class="markdownIt-Anchor" href="#inner-join-with-two-fields"></a> Inner Join with two fields</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">short qty &#x3D; 6;</span><br><span class="line"></span><br><span class="line">var query &#x3D; Products.Join(</span><br><span class="line">    Sales,</span><br><span class="line">    prod &#x3D;&gt; new &#123; prod.ProductID, Qty &#x3D; qty &#125;,</span><br><span class="line">    sale &#x3D;&gt; new &#123; sale.ProductID, Qty &#x3D; sale.OrderQty &#125;,</span><br><span class="line">    (prod, sale) &#x3D;&gt; new</span><br><span class="line">    &#123;</span><br><span class="line">        prod.ProductID,</span><br><span class="line">        prod.Name,</span><br><span class="line">        prod.Color,</span><br><span class="line">        prod.StandardCost,</span><br><span class="line">        prod.ListPrice,</span><br><span class="line">        prod.Size,</span><br><span class="line">        sale.SalesOrderID,</span><br><span class="line">        sale.OrderQty,</span><br><span class="line">        sale.UnitPrice,</span><br><span class="line">        sale.LineTotal</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h2 id="aggregating-data-in-collections"><a class="markdownIt-Anchor" href="#aggregating-data-in-collections"></a> Aggregating Data in Collections</h2><h3 id="count"><a class="markdownIt-Anchor" href="#count"></a> Count()</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">value &#x3D; Products.Count(prod &#x3D;&gt; prod.Color &#x3D;&#x3D; &quot;Yellow&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Another way using Where</span><br><span class="line">value &#x3D; Products.Where(prod &#x3D;&gt; prod.Color &#x3D;&#x3D; &quot;Yellow&quot;).Count();</span><br></pre></td></tr></table></figure><h3 id="min-and-max"><a class="markdownIt-Anchor" href="#min-and-max"></a> Min() and Max()</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">value &#x3D; Products.Min(prod &#x3D;&gt; prod.ListPrice);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">value &#x3D; Products.Max(prod &#x3D;&gt; prod.ListPrice);</span><br></pre></td></tr></table></figure><h3 id="average-and-sum"><a class="markdownIt-Anchor" href="#average-and-sum"></a> Average() and Sum()</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">value &#x3D; Products.Average(prod &#x3D;&gt; prod.ListPrice);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">value &#x3D; Products.Sum(prod &#x3D;&gt; prod.ListPrice);</span><br></pre></td></tr></table></figure><h3 id="custom-calculation-using-aggregate"><a class="markdownIt-Anchor" href="#custom-calculation-using-aggregate"></a> Custom Calculation using Aggregate()</h3><p>The first parameter initialize an internal variable, which setup the start value.</p><p>The second parameter is an anonymous function which you pass the initial value and loop through each item in the collection</p><ul><li>Aggregate Sum</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">value &#x3D; Products.Aggregate(0m, (sum, prod) &#x3D;&gt; sum +&#x3D; prod.ListPrice);</span><br></pre></td></tr></table></figure><ul><li>Aggregate Multiply</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">value &#x3D; Products.Aggregate(0m, (sum, prod &#x3D;&gt; sum +&#x3D; prod.ListPrice * prod.Qty));</span><br></pre></td></tr></table></figure><ul><li>Aggregate with GroupBy and Having</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var stats &#x3D; Products.GroupBy(sale &#x3D;&gt; sale.Size)</span><br><span class="line">    .Where(sizeGroup &#x3D;&gt; sizeGroup.Count() &gt; 0)</span><br><span class="line">    .Select(sizeGroup &#x3D;&gt; new &#123;</span><br><span class="line">        Size &#x3D; sizeGroup.Key,</span><br><span class="line">        TotalProducts &#x3D; sizeGroup.Count(),</span><br><span class="line">        Max &#x3D; sizeGroup.Max(s &#x3D;&gt; s.ListPrice),</span><br><span class="line">        Min &#x3D; sizeGroup.Min(s &#x3D;&gt; s.ListPrice),</span><br><span class="line">        Average &#x3D; sizeGroup.Average(s &#x3D;&gt; s.ListPrice)</span><br><span class="line">    &#125;)</span><br><span class="line">    .OrderBy(result &#x3D;&gt; result.Size)</span><br><span class="line">    .Select(result &#x3D;&gt; result);</span><br></pre></td></tr></table></figure><h2 id="deferred-execution"><a class="markdownIt-Anchor" href="#deferred-execution"></a> Deferred Execution</h2><ul><li>A LINQ query is a data structure ready to execute</li><li>Query is not executed until a value is needed</li><li>The execution happens with one of the folloing functions (<code>foreach()</code>, <code>Count()</code>, <code>ToList()</code>, <code>OrderBy()</code>…)</li></ul><h2 id="streaming-operators"><a class="markdownIt-Anchor" href="#streaming-operators"></a> Streaming Operators</h2><ul><li>Results can be returned prior to the entire collection is read</li><li>Examples: Distinct(), GroupBy(), Join(), Select(), Skip(), Take(), Union(), Where()</li></ul><h2 id="non-streaming-operators"><a class="markdownIt-Anchor" href="#non-streaming-operators"></a> Non-Streaming Operators</h2><ul><li>All data in collection must be read before a result can be returned</li><li>Examples: Except(), GroupBy(), GroupJoin(), Intersect(), Join(), OrderBy(), ThenBy()</li></ul><h2 id="the-yield-keyword"><a class="markdownIt-Anchor" href="#the-yield-keyword"></a> The yield keyword</h2><p>When write our own Filter function, we could use <code>yield</code> to make the function to be Streaming. So it returns data while looping through the collection.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public static IEnumrable&lt;T&gt; Filter&lt;T&gt; (this IEnumrable&lt;T&gt; source, Func&lt;T, bool&gt; predicate) &#123;</span><br><span class="line">    foreach(var item in source) &#123;</span><br><span class="line">        if (predicate(item)) &#123;</span><br><span class="line">            yield return item;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In the below example, Where and Take are both Streaming Operators, so this query will loop through the collection until the requirement is met. That is when it found the first item that has Color red. It doesn’t need to go through the entire collection.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Products &#x3D; Products.Where(prod &#x3D;&gt; prod.Color &#x3D;&#x3D; &quot;red&quot;).Take(1).ToList();</span><br></pre></td></tr></table></figure><p>However, in this example, because <code>OrderBy()</code> is an non-streaming operator, so it will loop through the entire list first, order them by <a href="http://prod.Name">prod.Name</a>, then apply the Where condition. Non-streaming operator will go before the Streaming operator.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Products &#x3D; Products.Where(prod &#x3D;&gt; prod.Color &#x3D;&#x3D; &quot;red&quot;).OrderBy(prod &#x3D;&gt; prod.Name).ToList();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> LINQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Entity Framework Core 5</title>
      <link href="2021/04/20/Entity-Framework-Core-5/"/>
      <url>2021/04/20/Entity-Framework-Core-5/</url>
      
        <content type="html"><![CDATA[<p>Microsoft’s cross-platform data access framework for .NET</p><h2 id="orm-object-relational-mapper"><a class="markdownIt-Anchor" href="#orm-object-relational-mapper"></a> ORM (Object Relational Mapper)</h2><p>EF Core is an ORM, it is designed to reduce the friction between how data is structure in a relational database and how you define your classes. Without ORM, we need to write lots of code to transform database results to instances of the types in our software.</p>]]></content>
      
      
      
        <tags>
            
            <tag> Entity Framework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Building GraphQL APIs with ASP.NET Core</title>
      <link href="2021/04/20/Building-GraphQL-APIs-with-ASP-NET-Core/"/>
      <url>2021/04/20/Building-GraphQL-APIs-with-ASP-NET-Core/</url>
      
        <content type="html"><![CDATA[<p>The consumer of a GraphQL API defines the data structure it want to receive in a query</p><p>First, let us see how a REST API works.</p><p>On the far right, there is data, for example in the form of a database, and there are entity classes. Each instance of an entity class represents one row of data in the table. An object-relational mapper like Entity Framework may take care of instantiating and populating these objects, but you don’t want to expose these entities directly. So they are converted to models or data transfer objects, objects that have a data structure that is easy to consume for clients, and maybe have some validation built in using attributes. Once you have the model, it’s the controller’s job to make it available to the outside world. There’s typically a controller for each type of model. For example, it could be a product controller, an order controller, etc. What controller is activated when a request comes in is determined by routing, which maps the URL to a certain controller, and all of these controllers react to HTTP methods. Each HTTP method triggers a different operation in the controller. A GET gets data, a POST introduces new data, etc. So there are typically quite a few controllers that have quite a few operations.</p><p><img src="/../images/Building-GraphQL-APIs-with-ASP-NET-Core/1.png" alt="" /></p><p>With GraphQL, there are typically no models, there is something called Schema. This Schema declares what a consumer of the API can access. The Schema also knows how to get the data. The API support GET or POST request, and there is always a query in the request.</p><p><img src="/../images/Building-GraphQL-APIs-with-ASP-NET-Core/2.png" alt="" /></p><h2 id="queries"><a class="markdownIt-Anchor" href="#queries"></a> Queries</h2><ul><li>Determines what happens in the API</li><li>Not tied to HTTP. HTTP is just a transport used to get the quert to the API</li><li>Downside: HTTP Caching: when using HTTP, because now each request is not at a unique URL anymore, it is now difficult to do HTTP caching.</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> GraphQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Design Patterns - Repository</title>
      <link href="2021/04/19/Design-Patterns-Repository/"/>
      <url>2021/04/19/Design-Patterns-Repository/</url>
      
        <content type="html"><![CDATA[<p>A repository encapsulates the data access so the consumer on longer has to know about the underlying data structure</p><p><img src="/../Design-Patterns-Repository/1.png" alt="" /></p><h3 id="why-this-design-is-problematic"><a class="markdownIt-Anchor" href="#why-this-design-is-problematic"></a> Why this Design is Problematic</h3><ul><li>The controller is tightly coupled with the data access layer</li><li>it is difficult to write a test for the controller without side effects</li><li>Hard to extend entities with domain specific behavior</li></ul><p><img src="/../Design-Patterns-Repository/2.png" alt="" /></p><h3 id="benefits-of-the-repository-pattern"><a class="markdownIt-Anchor" href="#benefits-of-the-repository-pattern"></a> Benefits of the Repository Pattern</h3><ul><li>The consumer(controller) is now separated (decoupled) from the data access</li><li>Easy to write a test without side-effects<ul><li>In production, we use the Repository Pattern to communicate with the Data layer. In Test, we replace the Repository with a faked local Data store. This can be done using Strategy Pattern.</li></ul></li><li>Modify and extend entities before they are passed on to the consumer</li><li>A sharable abstraction resulting in less duplication of code</li><li>Improved maintainability</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Design Patterns </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Design Patterns - Proxy</title>
      <link href="2021/04/19/Design-Patterns-Proxy/"/>
      <url>2021/04/19/Design-Patterns-Proxy/</url>
      
        <content type="html"><![CDATA[<h2 id="problem"><a class="markdownIt-Anchor" href="#problem"></a> Problem</h2><p>Need to control access to a type for performance, security or other reasons.</p><p><img src="/../Design-Patterns-Proxy/1.png" alt="" /></p><p>Client should not know if they were calling the real service or a proxy.</p><p>Proxy also gives us time to do necessary things before sending request to real service and before sending response back to client.(like logging, caching, encrypt/decrypt…)</p><p><img src="/../Design-Patterns-Proxy/2.png" alt="" /></p><p>Proxy has similar structure as the Decorator Pattern, but the intent is different, Decorator pattern is for adding extra funcationalities to the original class whereas Proxy is focusing on control the access to the object.</p><p><img src="/../Design-Patterns-Proxy/3.png" alt="" /></p><p>This is another implementation of the Proxy Pattern, it doesn’t have the interface so we need to compose the RealService object in Proxy Class. One thing to notice is that the RealService properties and methods need to be marked as virtual for the Proxy Class to override them.</p><h2 id="proxy-variants"><a class="markdownIt-Anchor" href="#proxy-variants"></a> Proxy Variants</h2><ul><li>Virtual Proxy<ul><li>stand in for expensive to create objects</li></ul></li><li>Remote Proxy<ul><li>Hide the detail to work with remote data or services.</li></ul></li><li>Smart Proxy<ul><li>Performs additional actions when a resource is accessed</li></ul></li><li>Protective Proxy<ul><li>controls access to a sensitive resource by checking for whether or not the client is authorized to perform those operations.</li></ul></li></ul><h2 id="virtual-proxy"><a class="markdownIt-Anchor" href="#virtual-proxy"></a> Virtual Proxy</h2><p>Stands in for an expensive-to-create object. Typically responsible for getting real object. UI placeholders. Lazy-loaded Entity Properties.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class ExpensiveToFullyLoad : BaseClassWithHistory</span><br><span class="line">&#123;</span><br><span class="line">    public static ExpensiveToFullyLoad Create()</span><br><span class="line">    &#123;</span><br><span class="line">        return new VirtualExpensiveToFullyLoad();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public virtual IEnumerable&lt;ExpensiveEntity&gt; HomeEntities &#123; get; protected set; &#125;</span><br><span class="line">    public virtual IEnumerable&lt;ExpensiveEntity&gt; AwayEntities &#123; get; protected set; &#125;</span><br><span class="line">    </span><br><span class="line">    protected ExpensiveToFullyLoad()</span><br><span class="line">    &#123;</span><br><span class="line">        History.Add(&quot;Constructor called.&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>When you have some expensive properties. You don’t want to create them when you don’t need them. So we could create a Proxy Class(VirtualExpensiveToFullyLoad), which will only create the property when its getting called.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">public class VirtualExpensiveToFullyLoad : ExpensiveToFullyLoad</span><br><span class="line">&#123;</span><br><span class="line">    public override IEnumerable&lt;ExpensiveEntity&gt; AwayEntities </span><br><span class="line">    &#123;</span><br><span class="line">        get</span><br><span class="line">        &#123;</span><br><span class="line">            if(base.AwayEntities &#x3D;&#x3D; null)</span><br><span class="line">            &#123;</span><br><span class="line">                base.AwayEntities &#x3D; ExpensiveDataSource.GetEntities(this);</span><br><span class="line">            &#125;</span><br><span class="line">            return base.AwayEntities;</span><br><span class="line">        &#125;</span><br><span class="line">        protected set &#x3D;&gt; base.AwayEntities &#x3D; value; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public override IEnumerable&lt;ExpensiveEntity&gt; HomeEntities </span><br><span class="line">    &#123;</span><br><span class="line">        get</span><br><span class="line">        &#123;</span><br><span class="line">            if (base.HomeEntities &#x3D;&#x3D; null)</span><br><span class="line">            &#123;</span><br><span class="line">                base.HomeEntities &#x3D; ExpensiveDataSource.GetEntities(this);</span><br><span class="line">            &#125;</span><br><span class="line">            return base.HomeEntities;</span><br><span class="line">        &#125;</span><br><span class="line">        protected set &#x3D;&gt; base.HomeEntities &#x3D; value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>When we test the class, we can see object history will only increase after we get the Entities from the class.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[Fact]</span><br><span class="line">public void LogsCollectionLoadingToHistory()</span><br><span class="line">&#123;</span><br><span class="line">    var obj &#x3D; ExpensiveToFullyLoad.Create();</span><br><span class="line">    var list &#x3D; obj.HomeEntities;</span><br><span class="line"></span><br><span class="line">    Assert.Equal(2, obj.History.Count());</span><br><span class="line"></span><br><span class="line">    var anotherList &#x3D; obj.AwayEntities;</span><br><span class="line">    Assert.Equal(3, obj.History.Count());</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We could also use the C# <code>Lazy&lt;T&gt;</code> type which will handle the lazy instantiation and thread-safe for use</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class LazyExpensiveToFullyLoad : BaseClassWithHistory</span><br><span class="line">&#123;</span><br><span class="line">    private Lazy&lt;IEnumerable&lt;ExpensiveEntity&gt;&gt; _homeEntities;</span><br><span class="line">    public IEnumerable&lt;ExpensiveEntity&gt; HomeEntities &#123; get &#123; return _homeEntities.Value; &#125; &#125;</span><br><span class="line"></span><br><span class="line">    private Lazy&lt;IEnumerable&lt;ExpensiveEntity&gt;&gt; _awayEntities;</span><br><span class="line">    public IEnumerable&lt;ExpensiveEntity&gt; AwayEntities &#123; get &#123; return _awayEntities.Value; &#125; &#125;</span><br><span class="line"></span><br><span class="line">    public LazyExpensiveToFullyLoad()</span><br><span class="line">    &#123;</span><br><span class="line">        History.Add(&quot;Constructor called.&quot;);</span><br><span class="line">        _homeEntities &#x3D; new Lazy&lt;IEnumerable&lt;ExpensiveEntity&gt;&gt;(() &#x3D;&gt; ExpensiveDataSource.GetEntities(this));</span><br><span class="line">        _awayEntities &#x3D; new Lazy&lt;IEnumerable&lt;ExpensiveEntity&gt;&gt;(() &#x3D;&gt; ExpensiveDataSource.GetEntities(this));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="remote-proxy"><a class="markdownIt-Anchor" href="#remote-proxy"></a> Remote Proxy</h2><p>Client works with proxy as if remote resource were local. Hides network details from client. Centralizes knowledge of network details.</p><h2 id="smart-proxy"><a class="markdownIt-Anchor" href="#smart-proxy"></a> Smart Proxy</h2><p>Performs additional logic around resource access. Example: Resource counting, Cache management, Locking shared resources</p><p>Here we are trying to open the same file two times, normally this will throw an exception.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var fs &#x3D; new FileSmartProxy();</span><br><span class="line"></span><br><span class="line">byte[] outputBytes1 &#x3D; Encoding.ASCII.GetBytes(&quot;1. ardalis.com\n&quot;);</span><br><span class="line">byte[] outputBytes2 &#x3D; Encoding.ASCII.GetBytes(&quot;2. weeklydevtips.com\n&quot;);</span><br><span class="line">using var file &#x3D; fs.OpenWrite(_testFile);</span><br><span class="line">using var file2 &#x3D; fs.OpenWrite(_testFile);</span><br><span class="line"></span><br><span class="line">file.Write(outputBytes1);</span><br><span class="line">file2.Write(outputBytes2);</span><br><span class="line"></span><br><span class="line">file.Close();</span><br><span class="line">file2.Close();</span><br></pre></td></tr></table></figure><p>But we are using FileSmartProxy() Class, when we catch the exception, we will check if the file is already opened, and return the same reference to the file stream.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">public class FileSmartProxy : IFile</span><br><span class="line">&#123;</span><br><span class="line">    Dictionary&lt;string, FileStream&gt; _openStreams &#x3D; new Dictionary&lt;string, FileStream&gt;();</span><br><span class="line"></span><br><span class="line">    public FileStream OpenWrite(string path)</span><br><span class="line">    &#123;</span><br><span class="line">        try</span><br><span class="line">        &#123;</span><br><span class="line">            var stream &#x3D; File.OpenWrite(path);</span><br><span class="line">            _openStreams.Add(path, stream);</span><br><span class="line">            return stream;</span><br><span class="line">        &#125;</span><br><span class="line">        catch (IOException)</span><br><span class="line">        &#123;</span><br><span class="line">            if(_openStreams.ContainsKey(path))</span><br><span class="line">            &#123;</span><br><span class="line">                var stream &#x3D; _openStreams[path];</span><br><span class="line"></span><br><span class="line">                if(stream !&#x3D; null &amp;&amp; stream.CanWrite)</span><br><span class="line">                &#123;</span><br><span class="line">                    return stream;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            throw;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="protective-proxy"><a class="markdownIt-Anchor" href="#protective-proxy"></a> Protective Proxy</h2><p>Manages access to a resource based on authorization rules. Eliminates repetitive security checks from client code and othe resource itself. Acts as a gatekeeper around a resource</p><h2 id="summary"><a class="markdownIt-Anchor" href="#summary"></a> Summary</h2><p>If we are not using the Proxy Pattern, we often end up mixing the concerns of access control, or lazy loading or other funcationality in the resource class itself. Every client the consume this class must perform this work. The concerns of access control are mixed with the concerns of client or the resource. Proxy Pattern helps us to separate this.</p><p>Usually Proxy Pattern has built in class that support it.(Remote Proxy)</p><h2 id="related-patterns"><a class="markdownIt-Anchor" href="#related-patterns"></a> Related Patterns</h2><ul><li>Decorator: the structure is similar, but the intent of Decorator Pattern is to add funcationality. Whereas the intent of Proxy Pattern is to control access.</li><li>Prototype: Prototype and Virtual Proxy Pattern both deal with objects that are expensive to create. But Virtual Proxy Pattern only provides a placeholder of the object and fetch it when required. The Prototype Pattern keeps a copy of the object on hand and can clone it when required.</li><li>Adapter: similar structure, but the intent of the Adapter Pattern is to convert an incompatible interface into one that works for the client.</li><li>Flyweight: designed to manage many reference to a shared instance.</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Design Patterns </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Design Patterns - Adapter</title>
      <link href="2021/04/19/Design-Patterns-Adapter/"/>
      <url>2021/04/19/Design-Patterns-Adapter/</url>
      
        <content type="html"><![CDATA[<h2 id="problem"><a class="markdownIt-Anchor" href="#problem"></a> Problem</h2><p>Incompatible interfaces between a client and a service provider.</p><p>Adapters convert the interface of one class into an interface a client expects.</p><h2 id="two-kinds-of-adapters"><a class="markdownIt-Anchor" href="#two-kinds-of-adapters"></a> Two Kinds of Adapters</h2><h3 id="object-adapters"><a class="markdownIt-Anchor" href="#object-adapters"></a> Object Adapters</h3><ul><li>Hold an instance of the Adaptee</li><li>Implement or inherit the adapter type</li><li>Use composition and single inheritance</li></ul><p><img src="/../images/Design-Patterns-Adapter/1.png" alt="" /></p><p>C# doesn’t support multiple inheritance, and a design principle of C# is to prefer composition over inheritance. So C# is prefer object adapter.</p><p>The Client is calling method on an adapter abstraction(IAdapter). A specific adapter is created for each specific adaptee.</p><h3 id="class-adapters"><a class="markdownIt-Anchor" href="#class-adapters"></a> Class Adapters</h3><ul><li>Inherit from the adaptee</li><li>Implement the adapter interface</li></ul><p><img src="/../images/Design-Patterns-Adapter/2.png" alt="" /></p><p>The Client is calling a target class’s particular method, but it wants to use a different implementation(incompatibleMethod) now. The adapter class inherits from both classes and overrides the SomeMethod() call, so that instead of doing what it did in the target class, it now calls the IncompatibleMethod() and does any work necessary to make it compatible with the SomeMethod() interface.</p><p><img src="/../images/Design-Patterns-Adapter/3.png" alt="" /></p><p>What C# can do is to implement the interface the Client is calling and rather than holding onto an instance of the concrete adaptee type, we can inherit from it. SomeMethod() calls IncompetibleMethod() and does any necessary work to modify it to work with the SomeMethod() interface.</p><p>Example: We are going to read a list of People and there are two ways of doing it. First, we could read People from a file. Second, we could call a Web API.</p><p>IAdapter interface will only have a method, GetCharacters(), get it returns a list of Peoson</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public interface ICharacterSourceAdapter</span><br><span class="line">&#123;</span><br><span class="line">    Task&lt;IEnumerable&lt;Person&gt;&gt; GetCharacters();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Get list of Person from a web API is easy.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public async Task&lt;List&lt;Person&gt;&gt; GetCharacters()</span><br><span class="line">&#123;</span><br><span class="line">    using (var client &#x3D; new HttpClient())</span><br><span class="line">    &#123;</span><br><span class="line">        string url &#x3D; &quot;https:&#x2F;&#x2F;swapi.co&#x2F;api&#x2F;people&quot;;</span><br><span class="line">        string result &#x3D; await client.GetStringAsync(url);</span><br><span class="line">        var people &#x3D; JsonConvert.DeserializeObject&lt;ApiResult&lt;Person&gt;&gt;(result).Results;</span><br><span class="line"></span><br><span class="line">        return people;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>But get list of Person from a file need a parameter (filename)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public async Task&lt;List&lt;Person&gt;&gt; GetCharactersFromFile(string filename)</span><br><span class="line">&#123;</span><br><span class="line">    var characters &#x3D; JsonConvert.DeserializeObject&lt;List&lt;Person&gt;&gt;(await File.ReadAllTextAsync(filename));</span><br><span class="line"></span><br><span class="line">    return characters;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>To make it work with the GetCharacters() method, we need to create an Adapter Class</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public class CharacterFileSourceAdapter : ICharacterSourceAdapter</span><br><span class="line">&#123;</span><br><span class="line">    private string _fileName;</span><br><span class="line">    private readonly CharacterFileSource _characterFileSource;</span><br><span class="line"></span><br><span class="line">    public CharacterFileSourceAdapter(string fileName, CharacterFileSource characterFileSource)</span><br><span class="line">    &#123;</span><br><span class="line">        _fileName &#x3D; fileName;</span><br><span class="line">        _characterFileSource &#x3D; characterFileSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public async Task&lt;IEnumerable&lt;Person&gt;&gt; GetCharacters()</span><br><span class="line">    &#123;</span><br><span class="line">        return await _characterFileSource.GetCharactersFromFile(_fileName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>It implements the IAdapter interface, and inside GetCharacters() method, it calls the GetCharactersFromFile(_filename) method to make it compatible with our interface method.</p><p>When we use it, it doesn’t need to know anything about the filename or which way we choose to get the list of Person.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var people &#x3D; await _characterSourceAdapter.GetCharacters();</span><br></pre></td></tr></table></figure><h2 id="related-patterns"><a class="markdownIt-Anchor" href="#related-patterns"></a> Related Patterns</h2><ul><li><p>Decorator: has a similar structure, but the intent of a decorator is to add functionality.</p></li><li><p>Bridge: has a similar structure, but it allows interfaces and their implementations to vary independently from one another.</p></li><li><p>Proxy: similar structure, but its intent is to control access to a resource, not to convert an incompatible interface</p></li><li><p>Repository: sometimes it acts an adapter, providing a common interface for persistence that can map various incompatible interfaces to a single common data access strategy</p></li><li><p>Strategy: very frequently used with Adapter pattern as a way of injecting different implementations of behavior into a particular client class.</p></li><li><p>Facade: the intent of facade is similar to the adapters in that it alters an interface to make it easier for a client to use. The difference is Facade often sits in front of multiple different types and its goal is to simplify a complex set of operation</p></li></ul><h2 id="summary"><a class="markdownIt-Anchor" href="#summary"></a> Summary</h2><ul><li>An Adapter converts an incompatible interface into a compatible one</li><li>In C#, the Adapter pattern uses composition and is known as an object adapter. It means that your adapter implementation will contain instances of the incompatible type and will delegate calls to this instalce’s incompatible methods or properties.</li><li>Adapters can work with service providers but can also wrap result types.</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Design Patterns </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Design Patterns - Decorator</title>
      <link href="2021/04/18/Design-Patterns-Decorator/"/>
      <url>2021/04/18/Design-Patterns-Decorator/</url>
      
        <content type="html"><![CDATA[<h2 id="decorator-pattern"><a class="markdownIt-Anchor" href="#decorator-pattern"></a> Decorator Pattern</h2><p>A structural design pattern used for dynamically adding behavior to a class without making changes to that class.</p><p><img src="/../images/Design-Patterns-Decorator/1.png" alt="" /></p><p>The Decorator Class will take an object implementing the same interface. This allows us to pass the object being decorated into the decorator object and allows the decorator object to act as a wrapper<br />around this original object.</p><p><img src="/../images/Design-Patterns-Decorator/2.png" alt="" /></p><p>The Decorator object will keep a reference of the object being decorated(the component object). Because the decorator object implement the same interface as the original component object, it now has a chance to intercept any method calls on the interface and inject some additional behavior into those calls.</p><p><img src="/../images/Design-Patterns-Decorator/3.png" alt="" /></p><p>Decorator Class and be nested.</p><p><img src="/../images/Design-Patterns-Decorator/4.png" alt="" /></p><p>This is the Example we are going to use.</p><h2 id="using-decorator-objects"><a class="markdownIt-Anchor" href="#using-decorator-objects"></a> Using Decorator Objects</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Standard component instantiation</span><br><span class="line">IWeatherService weatherService &#x3D; new WeatherService();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; Instantiation with decorator objects</span><br><span class="line">IWeatherService weatherService &#x3D; </span><br><span class="line">    new CachingDecorator(</span><br><span class="line">        new LogginDecorator(</span><br><span class="line">            new WeatherService()));</span><br></pre></td></tr></table></figure><p>To achieve this, we need to make sure the original component class and all the decorator classes need to implement from the same interface. And all decortor classes need to take the object of type IWeatherService in their constructors.</p><h2 id="logging-decorator"><a class="markdownIt-Anchor" href="#logging-decorator"></a> Logging Decorator</h2><p>Log how often a method was called, how long it took, parameters and responses.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public interface IWeatherService</span><br><span class="line">&#123;</span><br><span class="line">    CurrentWeather GetCurrentWeather(String location);</span><br><span class="line"></span><br><span class="line">    LocationForecast GetForecast(String location);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This is the interface for our original WeatherService Class and our new Decorator Class</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">public class WeatherServiceLoggingDecorator : IWeatherService</span><br><span class="line">&#123;</span><br><span class="line">    private IWeatherService _weatherService;</span><br><span class="line">    private ILogger&lt;WeatherServiceLoggingDecorator&gt; _logger;</span><br><span class="line"></span><br><span class="line">    public WeatherServiceLoggingDecorator(IWeatherService weatherService, ILogger&lt;WeatherServiceLoggingDecorator&gt; logger)</span><br><span class="line">    &#123;</span><br><span class="line">        _weatherService &#x3D; weatherService;</span><br><span class="line">        _logger &#x3D; logger;</span><br><span class="line">    &#125;</span><br><span class="line">    public CurrentWeather GetCurrentWeather(string location)</span><br><span class="line">    &#123;</span><br><span class="line">        Stopwatch sw &#x3D; Stopwatch.StartNew();</span><br><span class="line">        CurrentWeather currentWeather &#x3D; _weatherService.GetCurrentWeather(location);</span><br><span class="line">        sw.Stop();</span><br><span class="line">        long elapsedMillis &#x3D; sw.ElapsedMilliseconds;</span><br><span class="line"></span><br><span class="line">        _logger.LogWarning(&quot;Retrieved weather data for &#123;location&#125; - Elapsed ms: &#123;&#125; &#123;@currentWeather&#125;&quot;, location, elapsedMillis, currentWeather);</span><br><span class="line"></span><br><span class="line">        return currentWeather;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public LocationForecast GetForecast(string location)</span><br><span class="line">    &#123;</span><br><span class="line">        Stopwatch sw &#x3D; Stopwatch.StartNew();</span><br><span class="line">        LocationForecast locationForecast &#x3D; _weatherService.GetForecast(location);</span><br><span class="line">        sw.Stop();</span><br><span class="line">        long elapsedMillis &#x3D; sw.ElapsedMilliseconds;</span><br><span class="line"></span><br><span class="line">        _logger.LogWarning(&quot;Retrieved weather data for &#123;location&#125; - Elapsed ms: &#123;&#125; &#123;@locationForecast&#125;&quot;, location, elapsedMillis, locationForecast);</span><br><span class="line"></span><br><span class="line">        return locationForecast;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This is our new Decorator Class, we implement from the IWeatherService Interface, it is taking the interface as a parameter in the constructor, and implemented two methods. In the GetCurrentWeather() method, it logs the time it takes to run the method, then calling the original _weatherService.GetCurrentWeather() method.</p><h2 id="caching-decorator"><a class="markdownIt-Anchor" href="#caching-decorator"></a> Caching Decorator</h2><p>Cache weather conditions, forecasts for a city to reduce the number of external API calls.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">public class WeatherServiceCachingDecorator : IWeatherService</span><br><span class="line">&#123;</span><br><span class="line">    private IWeatherService _weatherService;</span><br><span class="line">    private IMemoryCache _cache;</span><br><span class="line"></span><br><span class="line">    public WeatherServiceCachingDecorator(IWeatherService weatherService, IMemoryCache cache)</span><br><span class="line">    &#123;</span><br><span class="line">        _weatherService &#x3D; weatherService;</span><br><span class="line">        _cache &#x3D; cache;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public CurrentWeather GetCurrentWeather(string location)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; if we can found value in the cache, return it</span><br><span class="line">        &#x2F;&#x2F; otherwise get the current weather then add it to the cache for 30 mins</span><br><span class="line">        string cacheKey &#x3D; $&quot;WeatherConditions::&#123;location&#125;&quot;;</span><br><span class="line">        if (_cache.TryGetValue&lt;CurrentWeather&gt;(cacheKey, out var currentWeather))</span><br><span class="line">        &#123;</span><br><span class="line">            return currentWeather;</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            var currentConditions &#x3D; _weatherService.GetCurrentWeather(location);</span><br><span class="line">            _cache.Set&lt;CurrentWeather&gt;(cacheKey, currentConditions, TimeSpan.FromMinutes(30));</span><br><span class="line">            return currentConditions;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public LocationForecast GetForecast(string location)</span><br><span class="line">    &#123;</span><br><span class="line">        string cacheKey &#x3D; $&quot;WeatherForecast::&#123;location&#125;&quot;;</span><br><span class="line">        if (_cache.TryGetValue&lt;LocationForecast&gt;(cacheKey, out var forecast))</span><br><span class="line">        &#123;</span><br><span class="line">            return forecast;</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            var locationForecast &#x3D; _weatherService.GetForecast(location);</span><br><span class="line">            _cache.Set&lt;LocationForecast&gt;(cacheKey, locationForecast, TimeSpan.FromMinutes(30));</span><br><span class="line">            return locationForecast;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And meanwhile in the HomeController, we need to build this onion like structure from inside to outside.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">IWeatherService weatherService &#x3D; new WeatherService(apiKey);</span><br><span class="line">IWeatherService withLoggingDecorator &#x3D; new WeatherServiceLoggingDecorator(weatherService, _loggerFactory.CreateLogger&lt;WeatherServiceLoggingDecorator&gt;());</span><br><span class="line">IWeatherService withCachingDecorator &#x3D; new WeatherServiceCachingDecorator(withLoggingDecorator, memoryCache);</span><br><span class="line"></span><br><span class="line">_weatherService &#x3D; withCachingDecorator;</span><br></pre></td></tr></table></figure><p>The call stack will be: CachingDecorator =&gt; LoggingDecorator =&gt; WeatherService</p><h2 id="decorator-summary"><a class="markdownIt-Anchor" href="#decorator-summary"></a> Decorator Summary</h2><ul><li>Multiple decorators can be used in conjunction with one another</li><li>Each decorator can focus on a single task, promoting separation of concerns</li><li>Decorator classes allow functionality to be added dynamically</li></ul><h3 id="decorator-pattern-characteristics"><a class="markdownIt-Anchor" href="#decorator-pattern-characteristics"></a> Decorator Pattern Characteristics</h3><ol><li>Implement the same base interface as the original object</li><li>Take a instance of the original object as part of their constructor</li><li>Add new behaviors to the original object they are wrapping</li></ol><h2 id="using-decorators-with-dependency-injection-container"><a class="markdownIt-Anchor" href="#using-decorators-with-dependency-injection-container"></a> Using Decorators with Dependency Injection Container</h2><p>.NET Core has built in IoC container which will help us to create WeatherService object when we need it and manage the lifetime of object.</p><p>We could simplify the HomeController constructor to this</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">private readonly IWeatherService _weatherService;</span><br><span class="line"></span><br><span class="line">public HomeController(ILogger&lt;HomeController&gt; logger, IWeatherService weatherService)</span><br><span class="line">&#123;</span><br><span class="line">    _weatherService &#x3D; weatherService;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And in the startUp.cs, we configure the IoC container to this</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public void ConfigureServices(IServiceCollection services)</span><br><span class="line">&#123;</span><br><span class="line">    services.AddControllersWithViews();</span><br><span class="line"></span><br><span class="line">    services.AddMemoryCache();</span><br><span class="line"></span><br><span class="line">    String apiKey &#x3D; Configuration.GetValue&lt;String&gt;(&quot;OpenWeatherMapApiKey&quot;);</span><br><span class="line">    services.AddScoped&lt;IWeatherService&gt;(serviceProvider &#x3D;&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        String apiKey &#x3D; Configuration.GetValue&lt;String&gt;(&quot;OpenWeatherMapApiKey&quot;);</span><br><span class="line"></span><br><span class="line">        var logger &#x3D; serviceProvider.GetService&lt;ILogger&lt;WeatherServiceLoggingDecorator&gt;&gt;();</span><br><span class="line"></span><br><span class="line">        var memoryCache &#x3D; serviceProvider.GetService&lt;IMemoryCache&gt;();</span><br><span class="line"></span><br><span class="line">        IWeatherService weatherService &#x3D; new WeatherService(apiKey);</span><br><span class="line">        IWeatherService withLoggingDecorator &#x3D; new WeatherServiceLoggingDecorator(weatherService, logger);</span><br><span class="line">        IWeatherService withCachingDecorator &#x3D; new WeatherServiceCachingDecorator(withLoggingDecorator, memoryCache);</span><br><span class="line"></span><br><span class="line">        return withCachingDecorator;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now whenever we need a IWeatherService object, it will be created and provided to us with this structure. (CachingDecorator =&gt; LoggingDecorator =&gt; WeatherService)</p><h2 id="when-to-use-decorator-pattern"><a class="markdownIt-Anchor" href="#when-to-use-decorator-pattern"></a> When to use Decorator Pattern</h2><ul><li>Cross cutting concerns<ul><li>Logging, Performance Tracking(Timer, StopWatch…), Caching, Authorization</li></ul></li><li>Manipulate data going to/from component<ul><li>object we need to encrypt and decrypt before being passed to a component</li></ul></li></ul><h3 id="question-what-if-your-component-does-not-have-an-interfaceextend-from-a-base-class"><a class="markdownIt-Anchor" href="#question-what-if-your-component-does-not-have-an-interfaceextend-from-a-base-class"></a> Question: What if your component does not have an interface/extend from a base class?</h3><ul><li>Extract an interface from the class</li></ul><h3 id="what-if-you-cant-modify-the-class"><a class="markdownIt-Anchor" href="#what-if-you-cant-modify-the-class"></a> What if you can’t modify the class?</h3><ul><li>Adapter Pattern</li></ul><p>To put a class in front of your component and extract an interface from the Adapter Class</p><p><img src="/../images/Design-Patterns-Decorator/5.png" alt="" /></p><h2 id="summary"><a class="markdownIt-Anchor" href="#summary"></a> Summary</h2><ul><li>Design Patterns are about ideas</li><li>Interfaces allow us to create loosely coupled designs</li><li>the decorator pattern adds the ability to dynamically add behavior</li><li>This is accomplished by wrapping around the original object and intercepting methods</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Design Patterns </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Design Patterns - Factory and Abstract Factory</title>
      <link href="2021/04/17/Design-Patterns-Factory-and-Abstract-Factory/"/>
      <url>2021/04/17/Design-Patterns-Factory-and-Abstract-Factory/</url>
      
        <content type="html"><![CDATA[<h2 id="what-is-factory-pattern"><a class="markdownIt-Anchor" href="#what-is-factory-pattern"></a> What is Factory Pattern</h2><p>A factory is an object for creating objects</p><h2 id="factory-pattern-variations"><a class="markdownIt-Anchor" href="#factory-pattern-variations"></a> Factory Pattern Variations</h2><ul><li>Simple Factory</li><li>Factory Method</li><li>Abstract Factory</li></ul><h2 id="factory-pattern-characteristics"><a class="markdownIt-Anchor" href="#factory-pattern-characteristics"></a> Factory Pattern Characteristics</h2><ul><li>Client: Asks for a created product<ul><li>Shopping cart</li></ul></li><li>Creator: Facilitates a creation<ul><li>ShippingProviderFactory</li></ul></li><li>Product: The product of the creation<ul><li>ShippingProvider Instance</li></ul></li></ul><p>The Client no longer needs to know how to create an object or exactly what flavor of that class it will use</p><h2 id="simple-factory-example"><a class="markdownIt-Anchor" href="#simple-factory-example"></a> Simple Factory Example</h2><p>We have a ShoppingCart Class and inside this Class we create a shippingProvider object. It will create different shippingProvider based on order’s sender country</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">if (order.Sender.Country &#x3D;&#x3D; &quot;Australia&quot;)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;Australia Post Shipping Provider</span><br><span class="line">&#125;</span><br><span class="line">else if (order.Sender.Country &#x3D;&#x3D; &quot;Sweden&quot;)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;Swedish Postal Service Shipping Provider</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    throw new NotSupportedException(&quot;No shipping provider found for origin country&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>But the shippingProvider object should not be created inside the ShoppingCart Class, ShoppingCart Class should just ask a ShippingProviderFactory Class for a shippingProvider object, and it will be provided one.</p><p>So we should moved the code to a new ShippingProviderFactory Class and invoke this class’s Creation method.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var shippingProvider &#x3D; ShippingProviderFactory.CreateShippingProvider(order.Sender.Country);</span><br></pre></td></tr></table></figure><p>One problem is not we are still hardcoding the Country inside our ShippingProviderFactory Class. We should add another layer of abstraction between the ShippingProviderFactory and the implementation of the ShippingProvider.</p><h2 id="factory-method"><a class="markdownIt-Anchor" href="#factory-method"></a> Factory Method</h2><p>The Factory Method Pattern is introduced to allow for a flexible and extensible application</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public abstract class ShippingProviderFactory &#123;</span><br><span class="line">    public abstract ShippingProvider CreateShippingProvider(string country);</span><br><span class="line"></span><br><span class="line">    public ShippingProvider GetShippingProvider(string country) &#123;</span><br><span class="line">        var provider &#x3D; CreateShippingProvider(country)</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; we may want to do some common changes on the shippingProvider created </span><br><span class="line">        &#x2F;&#x2F; before we return it back to the caller (ShoppingCart)</span><br><span class="line">        if (country &#x3D;&#x3D; &quot;Sweden&quot; &amp;&amp; provider.InsuranceOptions.ProviderHasInsurance)</span><br><span class="line">        &#123;</span><br><span class="line">            provider.RequireSignature &#x3D; false;</span><br><span class="line">        &#125;</span><br><span class="line">        return provider;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>It contains two methods.</p><p>The CreateShippingProvider() method will be implemented by its subclasses with different implementations.</p><p>The GetShippingProvider() method will allow user to decide what’s passed into the creation. And it allows user to do additional common interactions with the result of the creation before it’s being passed back to the caller(ShoppingCart).</p><p><img src="/../images/Design-Patterns-Factory-and-Abstract-Factory/1.png" alt="" /></p><p>Now we can create different implementations of the creation of a shippingProvider based on the input parameter(country).</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class StandardShippingProviderFactory : ShippingProviderFactory</span><br><span class="line">&#123;</span><br><span class="line">    public override ShippingProvider CreateShippingProvider(string country)</span><br><span class="line">    &#123;</span><br><span class="line">        return new StandardShippingProviderFactory();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class GlobalExpressShippingProviderFactory : ShippingProviderFactory</span><br><span class="line">&#123;</span><br><span class="line">    public override ShippingProvider CreateShippingProvider(string country)</span><br><span class="line">    &#123;</span><br><span class="line">        return new GlobalExpressShippingProvider();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In the caller Class (ShoppingCart) we can inject ShippingProviderFactory</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; inject ShippingProviderFactory into the ShoppingCart Constructor</span><br><span class="line">public ShoppingCart(Order order, ShippingProviderFactory shippingProviderFactory)</span><br><span class="line">&#123;</span><br><span class="line">    this.order &#x3D; order;</span><br><span class="line">    this.shippingProviderFactory &#x3D; shippingProviderFactory;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Also compose the ShippingProviderFactory object on app start</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var cart &#x3D; new ShoppingCart(order, new StandardShippingProviderFactory());</span><br></pre></td></tr></table></figure><h2 id="abstract-factory-pattern"><a class="markdownIt-Anchor" href="#abstract-factory-pattern"></a> Abstract Factory Pattern</h2><p>The abstract factory pattern provides a way to encapsulete a group of individual factories that have a common theme without specifying their concrete classes.</p><p><img src="/../images/Design-Patterns-Factory-and-Abstract-Factory/2.png" alt="" /></p><p>It adds another layer of abstraction which allow users to choose which factory to use on app start.</p><p>Different factories have the same methods but with different implementations</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">public interface IPurchaseProviderFactory</span><br><span class="line">&#123;</span><br><span class="line">    ShippingProvider CreateShippingProvider(Order order);</span><br><span class="line">    IInvoice CreateInvoice(Order order);</span><br><span class="line">    ISummary CreateSummary(Order order);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class AustraliaPurchaseProviderFactory : IPurchaseProviderFactory</span><br><span class="line">&#123;</span><br><span class="line">    public IInvoice CreateInvoice(Order order)</span><br><span class="line">    &#123;</span><br><span class="line">        return new GSTInvoice();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public ShippingProvider CreateShippingProvider(Order order)</span><br><span class="line">    &#123;</span><br><span class="line">        var shippingProviderFactory &#x3D; new StandardShippingProviderFactory();</span><br><span class="line"></span><br><span class="line">        return shippingProviderFactory.GetShippingProvider(order.Sender.Country);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public ISummary CreateSummary(Order order)</span><br><span class="line">    &#123;</span><br><span class="line">        return new CSVSummary();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class SwedenPurchaseProviderFactory : IPurchaseProviderFactory</span><br><span class="line">&#123;</span><br><span class="line">    public IInvoice CreateInvoice(Order order)</span><br><span class="line">    &#123;</span><br><span class="line">        if (order.Recipient.Country !&#x3D; order.Sender.Country)</span><br><span class="line">        &#123;</span><br><span class="line">            return new NoVATInvoice();</span><br><span class="line">        &#125;</span><br><span class="line">        return new VATInvoice();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public ShippingProvider CreateShippingProvider(Order order)</span><br><span class="line">    &#123;</span><br><span class="line">        ShippingProviderFactory shippingProviderFactory;</span><br><span class="line"></span><br><span class="line">        if (order.Sender.Country !&#x3D; order.Recipient.Country)</span><br><span class="line">        &#123;</span><br><span class="line">            shippingProviderFactory &#x3D; new GlobalExpressShippingProviderFactory();</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            shippingProviderFactory &#x3D; new StandardShippingProviderFactory();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return shippingProviderFactory.GetShippingProvider(order.Sender.Country);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public ISummary CreateSummary(Order order)</span><br><span class="line">    &#123;</span><br><span class="line">        return new EmailSummary();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Client (ShoppingCart) Class doesn’t need to know which factory to use, it just needs to know when to create a product using the factory.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public ShoppingCart(Order order, IPurchaseProviderFactory purchaseProviderFactory)  </span><br><span class="line">&#123;</span><br><span class="line">    this.order &#x3D; order;</span><br><span class="line">    this.purchaseProviderFactory &#x3D; purchaseProviderFactory;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public string Finalize()</span><br><span class="line">&#123;</span><br><span class="line">    var shippingProvider &#x3D; purchaseProviderFactory.CreateShippingProvider(order);</span><br><span class="line"></span><br><span class="line">    var invoice &#x3D; purchaseProviderFactory.CreateInvoice(order);</span><br><span class="line"></span><br><span class="line">    var summary &#x3D; purchaseProviderFactory.CreateSummary(order);</span><br><span class="line"></span><br><span class="line">    summary.Send();</span><br><span class="line"></span><br><span class="line">    order.ShippingStatus &#x3D; ShippingStatus.ReadyForShippment;</span><br><span class="line"></span><br><span class="line">    return shippingProvider.GenerateShippingLabelFor(order);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The concrete factory object will be instantiated on app starts(or based on user input).</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">IPurchaseProviderFactory purchaseProviderFactory;</span><br><span class="line"></span><br><span class="line">if (order.Sender.Country &#x3D;&#x3D; &quot;Sweden&quot;)</span><br><span class="line">&#123;</span><br><span class="line">    purchaseProviderFactory &#x3D; new SwedenPurchaseProviderFactory();</span><br><span class="line">&#125;</span><br><span class="line">else if (order.Sender.Country &#x3D;&#x3D; &quot;Australia&quot;)</span><br><span class="line">&#123;</span><br><span class="line">    purchaseProviderFactory &#x3D; new AustraliaPurchaseProviderFactory();</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">    throw new Exception(&quot;Country not supported.&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var cart &#x3D; new ShoppingCart(order, purchaseProviderFactory);</span><br></pre></td></tr></table></figure><h2 id="factory-pattern-in-testing"><a class="markdownIt-Anchor" href="#factory-pattern-in-testing"></a> Factory Pattern in Testing</h2><p>Extract creation of mocked, facked or commonly oused intances in tests.</p><p>We could use the Factory Pattern in our Unit Tests. it will be easier to test the parts that use them as you can inhect faked or mocked implementations</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">public abstract class OrderFactory</span><br><span class="line">&#123;</span><br><span class="line">    protected abstract Order CreateOrder();</span><br><span class="line"></span><br><span class="line">    public Order GetOrder()</span><br><span class="line">    &#123;</span><br><span class="line">        var order &#x3D; CreateOrder();</span><br><span class="line"></span><br><span class="line">        order.LineItems.Add(</span><br><span class="line">            new Item(&quot;testA&quot;, &quot;testB&quot;, 100m), 1</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        order.LineItems.Add(</span><br><span class="line">            new Item(&quot;TestC&quot;, &quot;TestD&quot;, decimal.MaxValue), 1</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        return order;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class StandardOrderFactory : OrderFactory</span><br><span class="line">&#123;</span><br><span class="line">    protected override Order CreateOrder()</span><br><span class="line">    &#123;</span><br><span class="line">        var order &#x3D; new Order</span><br><span class="line">        &#123;</span><br><span class="line">            Recipient &#x3D; new Address</span><br><span class="line">            &#123;</span><br><span class="line">                To &#x3D; &quot;Yuan&quot;,</span><br><span class="line">                Country &#x3D; &quot;Australia&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            Sender &#x3D; new Address</span><br><span class="line">            &#123;</span><br><span class="line">                To &#x3D; &quot;Someone else&quot;,</span><br><span class="line">                Country &#x3D; &quot;Australia&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        return order;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class InternationalOrderFactory : OrderFactory</span><br><span class="line">&#123;</span><br><span class="line">    protected override Order CreateOrder()</span><br><span class="line">    &#123;</span><br><span class="line">        var order &#x3D; new Order</span><br><span class="line">        &#123;</span><br><span class="line">            Recipient &#x3D; new Address</span><br><span class="line">            &#123;</span><br><span class="line">                To &#x3D; &quot;Yuan&quot;,</span><br><span class="line">                Country &#x3D; &quot;Australia&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            Sender &#x3D; new Address</span><br><span class="line">            &#123;</span><br><span class="line">                To &#x3D; &quot;Someone else&quot;,</span><br><span class="line">                Country &#x3D; &quot;Sweden&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        return order;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="summary"><a class="markdownIt-Anchor" href="#summary"></a> Summary</h2><ul><li><p>Separates the client(ShoppingCart) from the creation</p></li><li><p>Introduce subclasses (StandardShippingProviderFactory, GlobalExpressShippingProviderFactory) and concrete implementations to add functionality.</p></li><li><p>Factory Pattern is very common when writing tests</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Design Patterns </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Design Patterns - Command</title>
      <link href="2021/04/16/Design-Patterns-Command/"/>
      <url>2021/04/16/Design-Patterns-Command/</url>
      
        <content type="html"><![CDATA[<h2 id="command-pattern-characteristics"><a class="markdownIt-Anchor" href="#command-pattern-characteristics"></a> Command Pattern Characteristics</h2><ul><li>Command<ul><li>Holds the instructions and references to things that it needs in order for it to be executed</li></ul></li><li>Receiver<ul><li>Command will execute Receiver</li></ul></li><li>Invoker<ul><li>Invoker will execute Command, and will also keep track of all executed commands</li></ul></li><li>Client<ul><li>Client decides which command to schedule for execution</li></ul></li></ul><p><img src="/../images/Design-Patterns-Command/1.png" alt="" /></p><p>A command contains all the data to process the request now or at a later time. This means we could execute the command right away once the client schedule that command, or we could schedule all the commands to be executed later on in the lifetime of our application.</p><p>Example: AddToCartCommand</p><ul><li>The product which should be added to the cart</li><li>The shopping cart</li><li>A way to check stock availability</li></ul><p><img src="/../images/Design-Patterns-Command/2.png" alt="" /></p><h2 id="icommand-interface"><a class="markdownIt-Anchor" href="#icommand-interface"></a> ICommand Interface</h2><p>Because we may need to implement different command, we should create a ICommand interface.</p><p>It contains three methods. Execute() will execute the command. CanExecute() will check if a command can be execute of not. Undo() will undo all commands we executed before (using a Stack to maintain all executed commands)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public interface ICommand</span><br><span class="line">&#123;</span><br><span class="line">    void Execute();</span><br><span class="line">    bool CanExecute();</span><br><span class="line">    void Undo();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Next we need to implement CommandManager, which is the Invoker component. It contains a Stack Data Structure to maintain the Commands list. When the Client (UI Button) adds a command to the CommandManager, it will be added to the list. (We can also add extra feature like introduce a delay of executing commands or redo all commands later).</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">public class CommandManager</span><br><span class="line">&#123;</span><br><span class="line">    private Stack&lt;ICommand&gt; commands &#x3D; new Stack&lt;ICommand&gt;();</span><br><span class="line"></span><br><span class="line">    public void Invoke(ICommand command)</span><br><span class="line">    &#123;</span><br><span class="line">        if (command.CanExecute())</span><br><span class="line">        &#123;</span><br><span class="line">            commands.Push(command);</span><br><span class="line">            command.Execute();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void Undo()</span><br><span class="line">    &#123;</span><br><span class="line">        while (commands.Count &gt; 0)</span><br><span class="line">        &#123;</span><br><span class="line">            var command &#x3D; commands.Pop();</span><br><span class="line">            command.Undo();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Next we start to implement a command AddToCartCommand</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public class AddToCartCommand : ICommand</span><br></pre></td></tr></table></figure><p>It takes a shoppingCartRepository object, a productRepository object and a product</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public AddToCartCommand(IShoppingCartRepository shoppingCartRepository,</span><br><span class="line">    IProductRepository productRepository,</span><br><span class="line">    Product product)</span><br><span class="line">&#123;</span><br><span class="line">    this.shoppingCartRepository &#x3D; shoppingCartRepository;</span><br><span class="line">    this.productRepository &#x3D; productRepository;</span><br><span class="line">    this.product &#x3D; product;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Just a reminder, the Repository is a pattern for abstracting data access. We could have access the data store from a SQL DB, a web service or a CSV file, but our application doesn’t need to know that.</p><p>In our case, the shoppingCartRepository and the productRepository are both just a local Dictionary data structure.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public bool CanExecute()</span><br><span class="line">&#123;</span><br><span class="line">    if (product &#x3D;&#x3D; null) return false;</span><br><span class="line"></span><br><span class="line">    return productRepository.GetStockFor(product.ArticleId) &gt; 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>CanExecute() will check if our productRepository actually has the required product.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public void Execute()</span><br><span class="line">&#123;</span><br><span class="line">    if (product &#x3D;&#x3D; null) return;</span><br><span class="line"></span><br><span class="line">    productRepository.DecreaseStockBy(product.ArticleId, 1);</span><br><span class="line"></span><br><span class="line">    shoppingCartRepository.Add(product);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Execute() will decrease the product quantity by one and add it to shoppingCartRepository</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public void Undo()</span><br><span class="line">&#123;</span><br><span class="line">    if (product &#x3D;&#x3D; null) return;</span><br><span class="line"></span><br><span class="line">    var lineItem &#x3D; shoppingCartRepository.Get(product.ArticleId);</span><br><span class="line"></span><br><span class="line">    productRepository.IncreaseStockBy(product.ArticleId, lineItem.Quantity);</span><br><span class="line"></span><br><span class="line">    shoppingCartRepository.RemoveAll(product.ArticleId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Undo() will put the product from shoppingCartRepository back to the productRepository</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">var shoppingCartRepository &#x3D; new ShoppingCartRepository();</span><br><span class="line">var productsRepository &#x3D; new ProductsRepository();</span><br><span class="line"></span><br><span class="line">var product &#x3D; productsRepository.FindBy(&quot;SM7B&quot;);</span><br><span class="line"></span><br><span class="line">var addToCartCommand &#x3D; new AddToCartCommand(shoppingCartRepository,</span><br><span class="line">    productsRepository,</span><br><span class="line">    product);</span><br><span class="line"></span><br><span class="line">var increaseQuantityCommand &#x3D; new ChangeQuantityCommand(</span><br><span class="line">    ChangeQuantityCommand.Operation.Increase,</span><br><span class="line">    shoppingCartRepository,</span><br><span class="line">    productsRepository,</span><br><span class="line">    product);</span><br><span class="line"></span><br><span class="line">var manager &#x3D; new CommandManager();</span><br><span class="line">manager.Invoke(addToCartCommand);</span><br><span class="line">manager.Invoke(increaseQuantityCommand);</span><br><span class="line">manager.Invoke(increaseQuantityCommand);</span><br><span class="line">manager.Invoke(increaseQuantityCommand);</span><br><span class="line">manager.Invoke(increaseQuantityCommand);</span><br></pre></td></tr></table></figure><p>Finally we just need to compose all the necessary objects on app starts. And add the commands to CommandManager.</p><h2 id="command-pattern-in-wpf"><a class="markdownIt-Anchor" href="#command-pattern-in-wpf"></a> Command Pattern in WPF</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">public interface ICommand</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;</span><br><span class="line">    &#x2F;&#x2F; Summary:</span><br><span class="line">    &#x2F;&#x2F;     Occurs when changes occur that affect whether or not the command should execute.</span><br><span class="line">    event EventHandler CanExecuteChanged;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;</span><br><span class="line">    &#x2F;&#x2F; Summary:</span><br><span class="line">    &#x2F;&#x2F;     Defines the method that determines whether the command can execute in its current</span><br><span class="line">    &#x2F;&#x2F;     state.</span><br><span class="line">    &#x2F;&#x2F;</span><br><span class="line">    &#x2F;&#x2F; Parameters:</span><br><span class="line">    &#x2F;&#x2F;   parameter:</span><br><span class="line">    &#x2F;&#x2F;     Data used by the command. If the command does not require data to be passed,</span><br><span class="line">    &#x2F;&#x2F;     this object can be set to null.</span><br><span class="line">    &#x2F;&#x2F;</span><br><span class="line">    &#x2F;&#x2F; Returns:</span><br><span class="line">    &#x2F;&#x2F;     true if this command can be executed; otherwise, false.</span><br><span class="line">    bool CanExecute(object parameter);</span><br><span class="line">    &#x2F;&#x2F;</span><br><span class="line">    &#x2F;&#x2F; Summary:</span><br><span class="line">    &#x2F;&#x2F;     Defines the method to be called when the command is invoked.</span><br><span class="line">    &#x2F;&#x2F;</span><br><span class="line">    &#x2F;&#x2F; Parameters:</span><br><span class="line">    &#x2F;&#x2F;   parameter:</span><br><span class="line">    &#x2F;&#x2F;     Data used by the command. If the command does not require data to be passed,</span><br><span class="line">    &#x2F;&#x2F;     this object can be set to null.</span><br><span class="line">    void Execute(object parameter);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>WPF application has built in ICommand interface. If we want to use our Command implementation (RemoveAllFromCartCommand) with this ICommand interface. We could bind the method with a UI button, then create a RelayCommand Class, which will invoke RemoveAllFromCartCommand method.</p><ul><li>UI Button -&gt;(bind)-&gt; ICommand method -&gt;(invoke)-&gt; RelayCommand -&gt;(invoke)-&gt; RemoveAllFromCartCommand</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Button Margin&#x3D;&quot;0 5 5 0&quot; Command&#x3D;&quot;&#123;Binding RemoveAllFromCartCommand&#125;&quot;&gt;Clear&lt;&#x2F;Button&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public System.Windows.Input.ICommand RemoveAllFromCartCommand &#123; get; private set; &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">RemoveAllFromCartCommand &#x3D; new RelayCommand(</span><br><span class="line">    execute: () &#x3D;&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        removeAllFromCartCommand.Execute();</span><br><span class="line"></span><br><span class="line">        Refresh();</span><br><span class="line">    &#125;, </span><br><span class="line">    canExecute:() &#x3D;&gt; removeAllFromCartCommand.CanExecute()</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">public class RelayCommand : System.Windows.Input.ICommand</span><br><span class="line">&#123;</span><br><span class="line">    private readonly Action execute;</span><br><span class="line">    private readonly Func&lt;bool&gt; canExecute;</span><br><span class="line"></span><br><span class="line">    public RelayCommand(Action execute, Func&lt;bool&gt; canExecute)</span><br><span class="line">    &#123;</span><br><span class="line">        this.execute &#x3D; execute;</span><br><span class="line">        this.canExecute &#x3D; canExecute;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public bool CanExecute(object parameter)</span><br><span class="line">    &#123;</span><br><span class="line">        return canExecute?.Invoke() ?? false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void Execute(object parameter)</span><br><span class="line">    &#123;</span><br><span class="line">        execute?.Invoke();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public event EventHandler CanExecuteChanged</span><br><span class="line">    &#123;</span><br><span class="line">        add &#123; CommandManager.RequerySuggested +&#x3D; value; &#125;</span><br><span class="line">        remove &#123; CommandManager.RequerySuggested -&#x3D; value; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void RaiseCanExecuteChanged()</span><br><span class="line">    &#123;</span><br><span class="line">        CommandManager.InvalidateRequerySuggested();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="summary"><a class="markdownIt-Anchor" href="#summary"></a> Summary</h2><p>Command Pattern converts the request from Client to an object(ICommand). And the children implementation of the ICommand (AddToCartCommand) will take the Receiver as one of its input parameters (ShoppingCartRepository, ProductRepository). And it will implement the Execute() method, decide what should the Receiver do in Execute() method. And the Receiver should have all the needed information about the request(Product)</p>]]></content>
      
      
      
        <tags>
            
            <tag> Design Patterns </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Design Patterns - Strategy</title>
      <link href="2021/04/16/Design-Patterns-Strategy/"/>
      <url>2021/04/16/Design-Patterns-Strategy/</url>
      
        <content type="html"><![CDATA[<p>Strategy pattern is also called Policy pattern</p><h2 id="strategy-pattern-characteristics"><a class="markdownIt-Anchor" href="#strategy-pattern-characteristics"></a> Strategy Pattern Characteristics</h2><ul><li>Context: has a reference to a strategy and invokes it<ul><li>Calls IStrategy.Method(object);</li></ul></li><li>IStrategy: Defines the interface for the given strategy<ul><li>Defines the contract Method(object)</li></ul></li><li>Strategy: A concrete implementation of the strategy<ul><li>Implementation of Method(object)</li></ul></li></ul><p>Select an implementation at runtime based on user input without having to extend the class.</p><p>Example: ISalesTaxStrategy is an interface. We have multiple different implementations of Strategies to calculate tax. They all implement the ISalesTaxStrategy interface.</p><p>The code below doesn’t need to know what Strategy is chosen at this step. It only needs to invoke the GetTaxFor() Method.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public ISalesTaxStrategy SalesTaxStrategy &#123; get; set; &#125;</span><br><span class="line"></span><br><span class="line">public decimal GetTax()</span><br><span class="line">&#123;</span><br><span class="line">    return SalesTaxStrategy &#x3D;&#x3D; null ? 0m : SalesTaxStrategy.GetTaxFor(this);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="what-did-we-achieve"><a class="markdownIt-Anchor" href="#what-did-we-achieve"></a> What did we achieve?</h3><ul><li>A more extensible, object oriented and dynamic implementation</li><li>Easily add new strategies without affecting existing ones</li><li>Cleaner approach with single responsiblity in mind</li></ul><p>Another thing we could do is to pass the interface to the GetTax() method.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public decimal GetTax(ISalesTaxStrategy salesTaxStrategy) &#123;</span><br><span class="line">    return salesTaxStrategy &#x3D;&#x3D; null ? 0m : salesTaxStrategy.GetTaxFor(this);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And the concrete implementation of the strategy could be determined when we invoke the GetTax() Method</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">order.GetTax(new SwedenSalesTaxStrategy()</span><br></pre></td></tr></table></figure><p>This is still meaning we have a hard dependency between the Order and the SalesTaxStrategy</p><h2 id="strategy-pattern-with-dependency-injection"><a class="markdownIt-Anchor" href="#strategy-pattern-with-dependency-injection"></a> Strategy Pattern with Dependency Injection</h2><p>Pass the already created SalesTaxStrategy to the Order Contructor will help us remove the hard dependency between the Order and the Strategy.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">private ISalesTaxStrategy _salesTaxStrategy;</span><br><span class="line">private IInvoiceStrategy _invoiceStrategy;</span><br><span class="line">private IShippingStrategy _shippingStrategy;</span><br><span class="line"></span><br><span class="line">public Order(ISalesTaxStrategy salesTaxStrategy, IInvoiceStrategy invoiceStrategy, IShippingStrategy shippingStrategy)</span><br><span class="line">&#123;</span><br><span class="line">    _salesTaxStrategy &#x3D; salesTaxStrategy;</span><br><span class="line">    _invoiceStrategy &#x3D; invoiceStrategy;</span><br><span class="line">    _shippingStrategy &#x3D; shippingStrategy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Then Order(Context in Strategy Pattern) just need to invoke Strategy implementations without having to know which imeplementation it is invoking.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public decimal GetTax()</span><br><span class="line">&#123;</span><br><span class="line">    return _salesTaxStrategy &#x3D;&#x3D; null ? 0m : _salesTaxStrategy.GetTaxFor(this);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void FinalizeOrder()</span><br><span class="line">&#123;</span><br><span class="line">    if (SelectedPayments.Any(x &#x3D;&gt; x.PaymentProvider &#x3D;&#x3D; PaymentProvider.Invoice) &amp;&amp; AmountDue &gt; 0 &amp;&amp; ShippingStatus &#x3D;&#x3D; ShippingStatus.WaitingForPayment)</span><br><span class="line">    &#123;</span><br><span class="line">        _invoiceStrategy.Generate(this);</span><br><span class="line">        ShippingStatus &#x3D; ShippingStatus.ReadyForShippment;</span><br><span class="line">    &#125;</span><br><span class="line">    else if (AmountDue &gt; 0)</span><br><span class="line">    &#123;</span><br><span class="line">        throw new Exception(&quot;Unable to finalize order&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    _shippingStrategy.Ship(this);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>On Application start we create different Strategies based on user input</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">switch (origin)</span><br><span class="line">&#123;</span><br><span class="line">    case EnumTaxStrategy.Sweden:</span><br><span class="line">        salesTaxStrategy &#x3D; new SwedenSalesTaxStrategy();</span><br><span class="line">        break;</span><br><span class="line">    case EnumTaxStrategy.USA:</span><br><span class="line">        salesTaxStrategy &#x3D; new USAStateSalesTaxStrategy();</span><br><span class="line">        break;</span><br><span class="line">    default:</span><br><span class="line">        salesTaxStrategy &#x3D; new SwedenSalesTaxStrategy();</span><br><span class="line">        break;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">switch (inputInvoiceStrategy)</span><br><span class="line">&#123;</span><br><span class="line">    case EnumInvoiceStrategy.Email:</span><br><span class="line">        invoiceStrategy &#x3D; new EmailInvoiceStrategy();</span><br><span class="line">        break;</span><br><span class="line">    case EnumInvoiceStrategy.File:</span><br><span class="line">        invoiceStrategy &#x3D; new FileInvoiceStrategy();</span><br><span class="line">        break;</span><br><span class="line">    case EnumInvoiceStrategy.PrintOnDemand:</span><br><span class="line">        invoiceStrategy &#x3D; new PrintOnDemandInvoiceStrategy();</span><br><span class="line">        break;</span><br><span class="line">    default:</span><br><span class="line">        invoiceStrategy &#x3D; new FileInvoiceStrategy();</span><br><span class="line">        break;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">switch (inputShippingStrategy)</span><br><span class="line">&#123;</span><br><span class="line">    case EnumShippingStrategy.DHL:</span><br><span class="line">        shippingStrategy &#x3D; new DHLShippingStrategy();</span><br><span class="line">        break;</span><br><span class="line">    case EnumShippingStrategy.Fedex:</span><br><span class="line">        shippingStrategy &#x3D; new FedexShippingStrategy();</span><br><span class="line">        break;</span><br><span class="line">    case EnumShippingStrategy.SwedishPostalService:</span><br><span class="line">        shippingStrategy &#x3D; new SwedishPostalServiceShippingStrategy();</span><br><span class="line">        break;</span><br><span class="line">    case EnumShippingStrategy.UPS:</span><br><span class="line">        shippingStrategy &#x3D; new UPSShippingStrategy();</span><br><span class="line">        break;</span><br><span class="line">    case EnumShippingStrategy.USPS:</span><br><span class="line">        shippingStrategy &#x3D; new UnitedStatesPostalServiceShippingStrategy();</span><br><span class="line">        break;</span><br><span class="line">    default:</span><br><span class="line">        shippingStrategy &#x3D; new DHLShippingStrategy();</span><br><span class="line">        break;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="summary"><a class="markdownIt-Anchor" href="#summary"></a> Summary</h2><ul><li>One of the most commonly used patterns</li><li>Decouple the context and the concrete implementation</li><li>Allows for a cleaner implementation in the context</li><li>Easily extend with additional startegies without affecting current implementations</li><li>Makes testing a lot easier as you can write mocked implementations to inject</li><li>Identify existing implementations and where you have used the pattern before</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Design Patterns </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Design Patterns - Singleton</title>
      <link href="2021/04/15/Design-Patterns-Singleton/"/>
      <url>2021/04/15/Design-Patterns-Singleton/</url>
      
        <content type="html"><![CDATA[<p>A singleton is a class designed to only ever have one instance.</p><h2 id="singleton-features"><a class="markdownIt-Anchor" href="#singleton-features"></a> Singleton Features</h2><ul><li>At any time, only 0 or 1 instance of the Singleton class exists in the application</li><li>Singleton classes are created without parameters</li><li>Assume lazy instantiation as the default</li><li>A single, private, parameterless constructor</li><li>Sealed class</li><li>A private, static field holds the only reference to the instance</li><li>A public static method provides access to the field</li></ul><h2 id="naive-implementation-of-singleton"><a class="markdownIt-Anchor" href="#naive-implementation-of-singleton"></a> Naive implementation of Singleton</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">namespace Singleton</span><br><span class="line">&#123;</span><br><span class="line">#nullable enable</span><br><span class="line">    public sealed class Singleton</span><br><span class="line">    &#123;</span><br><span class="line">        private static Singleton? _instance;</span><br><span class="line">        public static Singleton Instance</span><br><span class="line">        &#123;</span><br><span class="line">            get</span><br><span class="line">            &#123;</span><br><span class="line">                &#x2F;&#x2F; lazy instantiate</span><br><span class="line">                Logger.Log(&quot;Instance called&quot;);</span><br><span class="line">                return _instance ??&#x3D; new Singleton();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        private Singleton()</span><br><span class="line">        &#123;</span><br><span class="line">            &#x2F;&#x2F; cannot be created except within this class</span><br><span class="line">            Logger.Log(&quot;Constructor invoked&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The problem of this native implementation is Thread safety. In multi-thread environment, the If block can be reached by multiple threads concurrently, resulting in multiple instantiations of Singleton.</p><h2 id="thread-safe-singleton"><a class="markdownIt-Anchor" href="#thread-safe-singleton"></a> Thread Safe Singleton</h2><p>One way to make sure the Singleton Instance will not be created in a multiple thread environment is to use a lock</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">private static readonly object padlock &#x3D; new object();</span><br></pre></td></tr></table></figure><p>This lock is a private static readonly object that will be shared by all references to the Singleton instance</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; this lock is used on every reference to Singleton</span><br><span class="line">lock (padlock)</span><br><span class="line">&#123;</span><br><span class="line">    Logger.Log(&quot;Instance called.&quot;);</span><br><span class="line">    &#x2F;&#x2F; lazy instantiation</span><br><span class="line">    return _instance ??&#x3D; new Singleton();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>A slight better way to add lock is to use the double check locking pattern, this gives us a better performance because we don’t need to check lock very often</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">if (_instance &#x3D;&#x3D; null)</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; this lock is used on every reference to Singleton</span><br><span class="line">    lock (padlock)</span><br><span class="line">    &#123;</span><br><span class="line">        Logger.Log(&quot;Instance called.&quot;);</span><br><span class="line">        &#x2F;&#x2F; lazy instantiation</span><br><span class="line">        _instance &#x3D; new Singleton();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">return _instance;</span><br></pre></td></tr></table></figure><ul><li>Locking adds thread safety</li><li>First version imposes lock on every access, not just first time</li><li>Second version is better, but has some issues with the ECMA CLI spec that may be a concern</li><li>Neither approach works as well as the next ones</li></ul><h2 id="static-constructors"><a class="markdownIt-Anchor" href="#static-constructors"></a> Static Constructors</h2><ul><li>C# static constructors only run once per app domain</li><li>static constructors are called when any static member of a type is referenced</li><li>Make sure you use an explicit static constructor to avoid issue with C# compiler and beforefieldinit (beforefieldinit is a hint the compiler uses to let it know static initializers can be called sooner, and this is the default if the type does not have an explicit static constructor. Adding an explicit static constructor avoids having beforefieldinit applied, which helps make our singleton behavior <strong>lazier</strong>)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">public sealed class StaticConstructorSingleton : ISingleton</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; reading this will initialize the instance</span><br><span class="line">    public static readonly string GREETING &#x3D; &quot;Hi!&quot;;</span><br><span class="line"></span><br><span class="line">    public static StaticConstructorSingleton Instance</span><br><span class="line">    &#123;</span><br><span class="line">        get</span><br><span class="line">        &#123;</span><br><span class="line">            Logger.Log(&quot;Instance called&quot;);</span><br><span class="line">            return Nested._instance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private class Nested</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F;Tell C# compiler not to mark type as beforefieldinit</span><br><span class="line">        static Nested()</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        internal static readonly StaticConstructorSingleton _instance &#x3D; new StaticConstructorSingleton();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private StaticConstructorSingleton()</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; cannot be created except within this class</span><br><span class="line">        Logger.Log(&quot;Constructor invoked.&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This approach is Thread-safe, no locks (good performance), but is complex and non-intuitive.</p><h2 id="lazyt"><a class="markdownIt-Anchor" href="#lazyt"></a> Lazy<T></h2><p>One difference between this approach and the naive approach is that the private static readonly field is type of <code>Lazy&lt;Singleton&gt;</code> rather than just Singleton, this field is initilized at construction to create a new <code>Lazy&lt;T&gt;</code> instance, and a lambda function is passed into the <code>Lazy&lt;T&gt;</code> constructor with the logic needed to create the singleton instance.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public sealed class LazyTSingleton</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; reading this will initilize the instance</span><br><span class="line">    private static readonly Lazy&lt;LazyTSingleton&gt; _lazy &#x3D; new Lazy&lt;LazyTSingleton&gt;(() &#x3D;&gt; new LazyTSingleton());</span><br><span class="line"></span><br><span class="line">    public static LazyTSingleton Instance</span><br><span class="line">    &#123;</span><br><span class="line">        get</span><br><span class="line">        &#123;</span><br><span class="line">            Logger.Log(&quot;Instance called.&quot;);</span><br><span class="line">            return _lazy.Value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private LazyTSingleton()</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; cannot be created except within this class</span><br><span class="line">        Logger.Log(&quot;Constructor invoked.&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This approach is very easy to understand and has the performance and thread safe feature.</p><h2 id="singletons-vs-static-classes"><a class="markdownIt-Anchor" href="#singletons-vs-static-classes"></a> Singletons vs Static Classes</h2><table><thead><tr><th>Singletons</th><th style="text-align:center">Static Classes</th></tr></thead><tbody><tr><td>Can implement interfaces</td><td style="text-align:center">No interfaces</td></tr><tr><td>Can be passed as an argument</td><td style="text-align:center">Cannot be passed as arguments</td></tr><tr><td>Can be assigned to variables</td><td style="text-align:center">Cannot be assigned</td></tr><tr><td>Support polymorphism</td><td style="text-align:center">Purely procedural</td></tr><tr><td>Can have state</td><td style="text-align:center">Can only access global state</td></tr><tr><td>Can be serialized</td><td style="text-align:center">No support for serialization</td></tr></tbody></table><h2 id="singleton-behavior-using-containersioc"><a class="markdownIt-Anchor" href="#singleton-behavior-using-containersioc"></a> Singleton Behavior Using Containers(IoC)</h2><ul><li>.NET Core has built-in support for IoC Containers</li><li>Classes request dependencies via constructor</li><li>Classes should follow Explicit Dependencies Principle</li><li>Container manages abstraction-implementation mapping</li><li>Container manages instnace lifetime</li></ul><p>Manage Lifetime Using Container, not Class Design</p><p>Easily manage and modify individual class lifetimes using an IoC container</p><p>Can also be used by any service, console application, etc…</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public void ConfigureService(ServiceCollection services) </span><br><span class="line">&#123;</span><br><span class="line">    services.AddTransient&lt;IOrderService, OrderService&gt;();</span><br><span class="line">    services.AddScoped&lt;IOrderRepository, OrderRepository&gt;();</span><br><span class="line">    services.AddSingleton&lt;IConnectionManager, ConnectionManager&gt;();</span><br><span class="line">    services.AddSingleton&lt;SomeInstance&gt;(new SomeInstance);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Transient: A new instance of the type is provided any time a class requests that type as a dependency.</p><p>Scope: Define a scope and any instance requested within that scope will be shared if it’s requested again within that socpe. The first request will get a new instance and all subsequent requests in that scope will get that same instance.</p><p>Singleton: only one instance will be created and shared by all references. Just like the Singleton pattern.</p><p>IoC containers are probably the best approach in systems that already use them. Otherwise, <code>Laszy&lt;T&gt;</code> provides an elegant, easily understood approach.</p><h2 id="summary"><a class="markdownIt-Anchor" href="#summary"></a> Summary</h2><ul><li>A Singleton class is designed to only ever have one instance created.</li><li>The Singleton pattern makes the class itself responsible for enforcing Singleton behavior</li><li>It’s easy to get the pattern wrong when implementing by hand</li><li><code>Lazy&lt;T&gt;</code> is one of the better ways to apply the pattern</li><li>Singletons are different from Static Classes</li><li>IoC/DI containers are usually a better place to manage instance lifetime in .NET applications.</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Design Patterns </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Creating Automated Browser Tests with Selenium in C#</title>
      <link href="2021/04/14/Creating-Automated-Browser-Tests-with-Selenium-in-C/"/>
      <url>2021/04/14/Creating-Automated-Browser-Tests-with-Selenium-in-C/</url>
      
        <content type="html"><![CDATA[<h2 id="what-is-selenium"><a class="markdownIt-Anchor" href="#what-is-selenium"></a> What is Selenium?</h2><p>Selenium is a portable framework for testing web applications. The tests can then run against most modern web browsers. Selenium runs on Windows, Linux, and macOS.</p><h3 id="some-of-the-features-we-can-do-using-selenium-webdriver"><a class="markdownIt-Anchor" href="#some-of-the-features-we-can-do-using-selenium-webdriver"></a> Some of the features we can do using Selenium WebDriver</h3><ul><li>Navigate to a specific page/forware/back</li><li>Click the button with an ID</li><li>Type text into the <code>&lt;input&gt;</code></li><li>Get the text content of the SPAN that has a CSS class</li><li>Choose a radio button</li><li>Check a tick box</li><li>Get the title of the current page</li><li>Maximum the browser window</li><li>Take a screenshot</li></ul><h3 id="selenium-webdriver-testing-architecture"><a class="markdownIt-Anchor" href="#selenium-webdriver-testing-architecture"></a> Selenium WebDriver Testing Architecture</h3><p><img src="/../images/Creating-Automated-Browser-Tests-with-Selenium-in-C/1.png" alt="" /></p><h3 id="the-limitations-of-automated-browser-tests"><a class="markdownIt-Anchor" href="#the-limitations-of-automated-browser-tests"></a> The Limitations of Automated Browser Tests</h3><ul><li>Slower than other types of tests (unit tests)</li><li>Not a replacement of all manuall testing</li><li>Additional dependencies (Selenium, WebDriver…)</li></ul><h2 id="setting-up-the-test-project"><a class="markdownIt-Anchor" href="#setting-up-the-test-project"></a> Setting up the test project</h2><h3 id="install-nuget-packages"><a class="markdownIt-Anchor" href="#install-nuget-packages"></a> Install NuGet Packages</h3><ol><li>Selenium.WebDriver</li><li>Selenium.WebDriver.ChromeDriver</li></ol><h3 id="your-first-test-case"><a class="markdownIt-Anchor" href="#your-first-test-case"></a> Your first test case</h3><p>The Web App has to be running for Selenium to work</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">private string baseUrl &#x3D; &quot;http:&#x2F;&#x2F;localhost:29128&#x2F;&quot;;</span><br><span class="line"></span><br><span class="line">[Test]</span><br><span class="line">[Category(&quot;Login&quot;)]</span><br><span class="line">public void ShouldLogin()</span><br><span class="line">&#123;</span><br><span class="line">    using (IWebDriver driver &#x3D; new ChromeDriver())</span><br><span class="line">    &#123;</span><br><span class="line">        driver.Navigate().GoToUrl(baseUrl);</span><br><span class="line"></span><br><span class="line">        var userNameBox &#x3D; driver.FindElement(By.Id(&quot;username&quot;));</span><br><span class="line">        userNameBox.SendKeys(&quot;admin&quot;);</span><br><span class="line"></span><br><span class="line">        Thread.Sleep(1000);</span><br><span class="line"></span><br><span class="line">        var passwordBox &#x3D; driver.FindElement(By.Id(&quot;password&quot;));</span><br><span class="line">        passwordBox.SendKeys(&quot;admin&quot;);</span><br><span class="line"></span><br><span class="line">        Thread.Sleep(1000);</span><br><span class="line"></span><br><span class="line">        var submitButton &#x3D; driver.FindElement(By.Id(&quot;submit&quot;));</span><br><span class="line">        submitButton.Click();</span><br><span class="line"></span><br><span class="line">        Thread.Sleep(1000);</span><br><span class="line"></span><br><span class="line">        var currentPageTitle &#x3D; driver.Title;</span><br><span class="line">        Assert.That(currentPageTitle, Is.EqualTo(&quot;identityOne - Home Page&quot;));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="get-page-title"><a class="markdownIt-Anchor" href="#get-page-title"></a> Get Page Title</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[Test]</span><br><span class="line">[Category(&quot;Test&quot;)]</span><br><span class="line">public void GetPageTitle()</span><br><span class="line">&#123;</span><br><span class="line">    using (IWebDriver driver &#x3D; new ChromeDriver())</span><br><span class="line">    &#123;</span><br><span class="line">        driver.Navigate().GoToUrl(baseUrl);</span><br><span class="line"></span><br><span class="line">        Assert.That(&quot;identityOne - Home Page&quot;, driver.Title);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="read-current-url"><a class="markdownIt-Anchor" href="#read-current-url"></a> Read current URL</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[Test]</span><br><span class="line">[Category(&quot;Test&quot;)]</span><br><span class="line">public void ReadCurrentUrl()</span><br><span class="line">&#123;</span><br><span class="line">    using (IWebDriver driver &#x3D; new ChromeDriver())</span><br><span class="line">    &#123;</span><br><span class="line">        driver.Navigate().GoToUrl(baseUrl);</span><br><span class="line"></span><br><span class="line">        Assert.That(baseUrl, driver.Url);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="reload-current-page-go-backwardforward"><a class="markdownIt-Anchor" href="#reload-current-page-go-backwardforward"></a> Reload current page / go backward/forward</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[Test]</span><br><span class="line">[Category(&quot;Test&quot;)]</span><br><span class="line">public void ReloadCurrentPage()</span><br><span class="line">&#123;</span><br><span class="line">    using (IWebDriver driver &#x3D; new ChromeDriver())</span><br><span class="line">    &#123;</span><br><span class="line">        driver.Navigate().GoToUrl(baseUrl);</span><br><span class="line"></span><br><span class="line">        driver.Navigate().Refresh();</span><br><span class="line">        driver.Navigate().Back();</span><br><span class="line">        driver.Navigate().Forward();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="manipulating-html-elements"><a class="markdownIt-Anchor" href="#manipulating-html-elements"></a> Manipulating HTML Elements</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">[Test]</span><br><span class="line">[Category(&quot;Test&quot;)]</span><br><span class="line">public void ReloadCurrentPage()</span><br><span class="line">&#123;</span><br><span class="line">    using (IWebDriver driver &#x3D; new ChromeDriver())</span><br><span class="line">    &#123;</span><br><span class="line">        driver.Navigate().GoToUrl(baseUrl);</span><br><span class="line"></span><br><span class="line">        IWebElement textElement &#x3D; driver.FindElement(By.Id(&quot;username&quot;)); &#x2F;&#x2F; find element by ID</span><br><span class="line">        string usernameText &#x3D; textElement.Text; &#x2F;&#x2F; Get HTML element text</span><br><span class="line"></span><br><span class="line">        IWebElement buttonElement &#x3D; driver.FindElement(By.Name(&quot;button&quot;)); &#x2F;&#x2F; find element by Name</span><br><span class="line">        buttonElement.Click(); &#x2F;&#x2F; Click a button or link</span><br><span class="line"></span><br><span class="line">        IWebElement linkElement &#x3D; driver.FindElement(By.LinkText(&quot;link&quot;)); &#x2F;&#x2F; find element by LinkText</span><br><span class="line">        linkElement.Click(); &#x2F;&#x2F; Click a button or link</span><br><span class="line"></span><br><span class="line">        IWebElement buttonElement &#x3D; driver.FindElement(By.CssSelector(&quot;body&quot;)); &#x2F;&#x2F; find element by CssSelector</span><br><span class="line"></span><br><span class="line">        IWebElement buttonElement &#x3D; driver.FindElement(By.ClassName(&quot;TestClass&quot;)); &#x2F;&#x2F; find element by class name</span><br><span class="line"></span><br><span class="line">        IWebElement textElement &#x3D; driver.FindElement(By.TagName(&quot;td&quot;)); &#x2F;&#x2F; find element by tag name</span><br><span class="line"></span><br><span class="line">        IWebElement linkElement &#x3D; driver.FindElement(By.PartialLinkText(&quot;Partial Text&quot;)); &#x2F;&#x2F; find element by PartialLinkText</span><br><span class="line"></span><br><span class="line">        IWebElement linkElement &#x3D; driver.FindElement(By.XPath(&quot;&#x2F;html&#x2F;body&#x2F;div[4]&#x2F;p&#x2F;a&quot;)); &#x2F;&#x2F; find element by XPath</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; this relative XPath will find all &lt;a&gt; elements with its text contains &#39;some text&#39;</span><br><span class="line">        IWebElement linkElement &#x3D; driver.FindElement(By.XPath(&quot;&#x2F;&#x2F;a[text()[contains(.,&#39;some text&#39;)]]&quot;)); &#x2F;&#x2F; find element by Relative XPath</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; WebDriverWait is given a timeout value indicating how long to wait for the condition.</span><br><span class="line">        WebDriverWait wait &#x3D; new WebDriverWait(driver, TimeSpan.FromSeconds(1));</span><br><span class="line">        &#x2F;&#x2F; Selenium will try to find the linkElement until the timeout value is reached</span><br><span class="line">        IWebElement linkElement &#x3D; wait.Until(d &#x3D;&gt; d.FineElement(By.LinkText(&quot;some text&quot;)));</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; Selecting multiple elements</span><br><span class="line">        ReadOnlyCollection&lt;IWebElement&gt; tableCells &#x3D; driver.FindElements(By.TagName(&quot;td&quot;));</span><br><span class="line"></span><br><span class="line">        Assert.That(&quot;first cell&quot;, tableCells[0].Text);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Selenium </tag>
            
            <tag> Functional Tests </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dependency Injection in .NET</title>
      <link href="2021/04/12/Dependency-Injection-in-NET/"/>
      <url>2021/04/12/Dependency-Injection-in-NET/</url>
      
        <content type="html"><![CDATA[<h2 id="what-is-dependency-injection"><a class="markdownIt-Anchor" href="#what-is-dependency-injection"></a> What is dependency injection?</h2><p>Dependency injection is a programming technique that makes a class independent of its dependencies. It achieves that by decoupling the usage of an object from its creation. This helps you to follow SOLID’s dependency inversion and single responsiblity principles.</p><h3 id="benefits-of-loose-coupling"><a class="markdownIt-Anchor" href="#benefits-of-loose-coupling"></a> Benefits of Loose Coupling</h3><ul><li>Easy to extend</li><li>Easy to test</li><li>Easy to maintain</li><li>Facilitates parallel development (rare conflict)</li><li>Facilitates late binding (runtime data binding)</li></ul><h3 id="dependency-injection-patterns"><a class="markdownIt-Anchor" href="#dependency-injection-patterns"></a> Dependency Injection Patterns</h3><ul><li>Constructor Injection</li><li>Property Injection</li><li>Method Injection</li><li>Ambient Context</li><li>Service Locator</li></ul><h2 id="application-overview"><a class="markdownIt-Anchor" href="#application-overview"></a> Application Overview</h2><p>The application contains four layers</p><ol><li>View (UI elements) such as the buttons and the list box</li><li>Presentation (UI logic): functions that the buttons call and the property that the data bound to the list box in the UI.</li><li>Data Access: Code that knows how to interact with the data store. It knows how to make a web service call, and then translate the results into objects that the Presentation layer can use.</li><li>Data Store: where we get the actual data, in this case, the web service.</li></ol><h3 id="tight-coupled-code"><a class="markdownIt-Anchor" href="#tight-coupled-code"></a> Tight Coupled Code</h3><p>In the initial code, all four layers are tightly coupled.</p><p>In the view layer, it creates PeopleViewModel()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public PeopleViewerWindow()</span><br><span class="line">&#123;</span><br><span class="line">    InitializeComponent();</span><br><span class="line">    viewModel &#x3D; new PeopleViewModel();</span><br><span class="line">    this.DataContext &#x3D; viewModel;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In the Presentation layer, it creates serviceReader()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public PeopleViewModel()</span><br><span class="line">&#123;</span><br><span class="line">    DataReader &#x3D; new ServiceReader();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In the Data Access layer, it hardcoded the web service url</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public class ServiceReader</span><br><span class="line">&#123;</span><br><span class="line">    WebClient client &#x3D; new WebClient();</span><br><span class="line">    string baseUri &#x3D; &quot;http:&#x2F;&#x2F;localhost:9874&#x2F;api&#x2F;people&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="potential-problems"><a class="markdownIt-Anchor" href="#potential-problems"></a> Potential problems</h3><ol><li><p>Hard to create unit test.<br />If I want to test UI element (like a button), I have to run the web services because they are tightly coupled. (PeopleViewerWindow needs PeopleViewModel which needs ServiceReader which needs WebClient).</p></li><li><p>Hard to extend<br />If I want to add another Data Store like read data from a CSV file or SQL DB, and I also want to have the option to choose to use cached data store. Then in the PeopleViewModel I need to write something like this</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public PeopleViewModel() &#123;</span><br><span class="line">    switch(dataReaderType) &#123;</span><br><span class="line">        case &#39;service&#39;: DataReader &#x3D; new ServiceReader();</span><br><span class="line">            break;</span><br><span class="line">        case &#39;service_cached&#39;: DataReader &#x3D; new CachedServiceReader();</span><br><span class="line">            break;</span><br><span class="line">        case &#39;text&#39;: DataReader &#x3D; new CSVReader();</span><br><span class="line">            break;</span><br><span class="line">        case &#39;text_cached&#39;: DataReader &#x3D; new CachedCSVReader();</span><br><span class="line">            break;</span><br><span class="line">        case &#39;sql&#39;: DataReader &#x3D; new SQLReader();</span><br><span class="line">            break;</span><br><span class="line">        case &#39;sql_cached&#39;: DataReader &#x3D; new CachedSQLReader();</span><br><span class="line">            break;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This breaks the Single Responsibility Principle, which is one of the SOLID principles. Because it is now doing too many things</p><ol><li>Presentation logic</li><li>Picking the data source (hardcoded web service url)</li><li>Managing object lifetime</li><li>Deciding when to use a cache</li></ol><h2 id="repository-pattern"><a class="markdownIt-Anchor" href="#repository-pattern"></a> Repository Pattern</h2><p>Mediates between the domain and data mapping layers using a collection-like interface for accessing domain objects.</p><p>It separates our application from the data storage technology.</p><p>In other words, we can say that a Repository Design Patternacts as a middleman or middle layer between the rest of the application and the data access logic. That means a repository pattern isolates all the data access code from the rest of the application. The advantage of doing so is that, if you need to do any change then you need to do in one place. Another benefit is that testing your controllers becomes easy because the testing framework need not run against the actual database access code.</p><p>The idea is that the repository knows how to communicate with the data store whether it is using HTTP, reading a file from the file system, or making a database call. It then takes the data that comes back and turns it into normal C# objects that the rest of the application can understand. This is exactly what the service reader does now. It makes a HTTP request to the web service, then parses the JSON result into Person objects that the application can use.</p><h3 id="crud-repository"><a class="markdownIt-Anchor" href="#crud-repository"></a> CRUD Repository</h3><p>The Interface Segregation Principle says that interfaces should only contain what the client needs. Normally a Repository should contain all Create, Read, Update and Delete. But in this case we only need Read.</p><h2 id="using-dependency-injection-to-build-loosely-coupled-application"><a class="markdownIt-Anchor" href="#using-dependency-injection-to-build-loosely-coupled-application"></a> Using Dependency Injection to Build Loosely-coupled Application</h2><p>Create a new interface</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public interface IPersonReader</span><br><span class="line">&#123;</span><br><span class="line">    IEnumerable&lt;Person&gt; GetPeople();</span><br><span class="line">    Person GetPerson(int id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In the Presentation layer, inject IPersonReader</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public PeopleViewModel(IPersonReader dataReader)</span><br><span class="line">&#123;</span><br><span class="line">    DataReader &#x3D; dataReader;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now we don’t create new ServiceReader in the Presentation layer, instead we make it someone else’s responsibility by adding IPersonReader to a contrcutor parameter.</p><p>IPersonReader could be ServiceReader or SQLReader or CSVReader but PeopleViewModel doesn’t care.</p><p>IPersonReader need to be created before creating PeopleViewModel.</p><p>In the UI layer, inject PeopleViewModel</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public PeopleViewerWindow(PeopleViewModel peopleViewModel)</span><br><span class="line">&#123;</span><br><span class="line">    InitializeComponent();</span><br><span class="line">    viewModel &#x3D; peopleViewModel;</span><br><span class="line">    this.DataContext &#x3D; viewModel;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Similar things happened in UI layer, now we don’t create new PeopleViewModel, instead we inject it to the constrctor.</p><p>PeopleViewModel need to be created before creating PeopleViewerWindow but it doesn’t care, as long as it is being passed to the constructor.</p><h3 id="dependency-inversion-principle"><a class="markdownIt-Anchor" href="#dependency-inversion-principle"></a> Dependency Inversion Principle</h3><p>This is Dependency Inversion Principle in action, now the View Model and the Viewer Window are no longer responsible for creating or managing the lifetime of the dependencies. Instead, the dependency, the data reader, is given to the View Model and the Viewer Window to use.</p><h3 id="object-composition"><a class="markdownIt-Anchor" href="#object-composition"></a> Object composition</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">private static void ComposeObjects()</span><br><span class="line">&#123;</span><br><span class="line">    var serviceReader &#x3D; new ServiceReader();</span><br><span class="line">    var peopleViewModel &#x3D; new PeopleViewModel(serviceReader);</span><br><span class="line">    Application.Current.MainWindow &#x3D; new PeopleViewerWindow(peopleViewModel);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The ServiceReader and PeopleViewModel objects have been created when the app starts. This code will run OnAppStarts.</p><h3 id="get-data-from-csv-file"><a class="markdownIt-Anchor" href="#get-data-from-csv-file"></a> Get Data from CSV file</h3><p>Because now the presentation layer and the data access layer are loosely coupled, if we want to change the data source, we could just create a CSVReader() instead of ServiceReader()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">private static void ComposeObjects()</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F;var serviceReader &#x3D; new ServiceReader();</span><br><span class="line">    var serviceReader &#x3D; new CSVReader();</span><br><span class="line">    var peopleViewModel &#x3D; new PeopleViewModel(serviceReader);</span><br><span class="line">    Application.Current.MainWindow &#x3D; new PeopleViewerWindow(peopleViewModel);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We just need to implement CSVReader class and create a new CSV object. We don’t need to change any existing code.</p><h2 id="decorator-pattern"><a class="markdownIt-Anchor" href="#decorator-pattern"></a> Decorator pattern</h2><p>Wrap an existing interface to add functionality</p><p>The idea is we wrap an existing data reader, add the caching functionality and then expose the same data reader interface to the outside world.</p><p>Our service reader implements the IPersonReader interface. We take that service reader and wrap it in a caching reader. This adds the caching funcationality that we need. The caching reader is also an IPersonReader. So it looks just like any other data reader to the rest of the application. By using a Decorator, we can wrap any of our existing data readers.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public class CachingReader : IPersonReader</span><br><span class="line">&#123;</span><br><span class="line">    private IPersonReader _wrappedReader;</span><br><span class="line">    private TimeSpan _cacheDuration &#x3D; new TimeSpan(0, 0, 30);</span><br><span class="line"></span><br><span class="line">    private IEnumerable&lt;Person&gt; _cachedItems;</span><br><span class="line">    private DateTime _dataDateTime;</span><br><span class="line"></span><br><span class="line">    public CachingReader(IPersonReader wrappedReader)</span><br><span class="line">    &#123;</span><br><span class="line">        _wrappedReader &#x3D; wrappedReader;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public IEnumerable&lt;Person&gt; GetPeople() &#123;...&#125;</span><br><span class="line"></span><br><span class="line">    public Person GetPerson(int id) &#123;...&#125;</span><br><span class="line"></span><br><span class="line">    private bool IsCacheValid &#123;...&#125;</span><br><span class="line"></span><br><span class="line">    private void ValidateCache() &#123;...&#125;</span><br><span class="line"></span><br><span class="line">    private void InvalidateCache() &#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>In this implementation, CachingReader implements IPersonReader, so it also has GetPeople and GetPerson functions. But it has some other functions (extra caching funcationality).</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">private static void ComposeObjects()</span><br><span class="line">&#123;</span><br><span class="line">    var wrappedReader &#x3D; new ServiceReader();</span><br><span class="line">    var reader &#x3D; new CachingReader(wrappedReader);</span><br><span class="line">    var peopleViewModel &#x3D; new PeopleViewModel(reader);</span><br><span class="line">    Application.Current.MainWindow &#x3D; new PeopleViewerWindow(peopleViewModel);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>When we want to use the CachingReader, we could first create a ServiceReader, so it has GetPeople and GetPerson function, and we inject this ServiceReader to the CachingReader’s contructor, which adds the extra caching funcationality.</p><p>This follows the <strong>Open/Closed Principle</strong>. Existing data readers can be extended without being modified.</p><p>This also follows the <strong>Liskov substitution principle</strong>. This principle says that descendent classes (CachingReader) should behave the same way the base class (ServiceReader) behave. Meaning we could substitude a child class (CachingReader) for a base class (ServiceReader) in our application, and the application does not know the difference.</p><p>We have extended the behavior in the child class, but the calling code does not know the difference.</p><h2 id="unit-testing-with-dependency-injection"><a class="markdownIt-Anchor" href="#unit-testing-with-dependency-injection"></a> Unit Testing with Dependency Injection</h2><p>Before when we need to test the ViewModel, the data service needs to run. Because of the old code looks like this.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public PeopleViewModel() &#123;</span><br><span class="line">    DataReader &#x3D; new ServiceReader();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class ServiceReader() &#123;</span><br><span class="line">    WebClient client &#x3D; new WebClient();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Now we can just create a fake Reader and provide some fake Person data. The test of ViewModel is isolated from the Data Store.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[Test]</span><br><span class="line">public void Test() &#123;</span><br><span class="line">    &#x2F;&#x2F; Arrange</span><br><span class="line">    IPersonReader reader &#x3D; GetFakeReader();</span><br><span class="line">    var viewModel &#x3D; new PeopleViewModel(reader);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Act</span><br><span class="line">    viewModel.RefreshPeople();</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Assert</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Below is the real unit test code. By passing the FakeReader() to the PeopleViewModel(), we don’t need to create WebClient any more, which makes it easier to write unit test.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[TestMethod]</span><br><span class="line">public void People_OnRefreshPeople_IsPopulated()</span><br><span class="line">&#123;</span><br><span class="line">    &#x2F;&#x2F; Arrange</span><br><span class="line">    var reader &#x3D; new FakeReader();</span><br><span class="line">    var viewModel &#x3D; new PeopleViewModel(reader);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Act</span><br><span class="line">    viewModel.RefreshPeople();</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Assert</span><br><span class="line">    Assert.IsNotNull(viewModel.People);</span><br><span class="line">    Assert.AreEqual(2, viewModel.People.Count());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Next we want to test CSVReader(), but we need to put a real CSV data file in the project directory to make it work because it is expecting a filePath.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public CSVReader()</span><br><span class="line">&#123;</span><br><span class="line">    string filePath &#x3D; AppDomain.CurrentDomain.BaseDirectory + &quot;People.txt&quot;;</span><br><span class="line">    FileLoader &#x3D; new CSVFileLoader(filePath);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Luckly, the FileLoader is a public property which can be overrided.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public ICSVFileLoader FileLoader &#123; get; set; &#125;</span><br></pre></td></tr></table></figure><p>So we could create a FakeFileReader that provides the fake data. We override the property with our own behavior so it doesn’t depend on the file system. This is called <strong>Property Injection</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[TestMethod]</span><br><span class="line">public void GetPeople_WithGoodRecords_ReturnsAllRecords()</span><br><span class="line">&#123;</span><br><span class="line">    var reader &#x3D; new CSVReader();</span><br><span class="line">    reader.FileLoader &#x3D; new FakeFileLoader(&quot;Good&quot;);</span><br><span class="line"></span><br><span class="line">    var result &#x3D; reader.GetPeople();</span><br><span class="line"></span><br><span class="line">    Assert.AreEqual(2, result.Count());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="property-injection"><a class="markdownIt-Anchor" href="#property-injection"></a> Property Injection</h3><p>Class property is initialized for standard behavior. By default, the standard behavior is used. Property can be set to provide alternate behavior.</p><p>One question is, why not use Constructor Injection like what we did in the previous charpter? Instead of creating CSVFileLoader in the CSVReader constructor, we could inject FileLoader.</p><p>This is because we only use FakeFileLoader when doing unit test. In production, it will use CSVFileLoader 100% of the time.</p><p>So Constructor injection is only good for when we want to force a decision on a dependency. Property injection is good for when we have a default dependency (CSVFileLoader) that we want to use most of the time.</p><h2 id="dependency-injection-containers"><a class="markdownIt-Anchor" href="#dependency-injection-containers"></a> Dependency Injection Containers</h2><ul><li>Autofac</li><li>Ninject</li><li>Unity</li><li>Castle Windsor</li><li><a href="http://Spring.NET">Spring.NET</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Dependency Injection </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL Fundamentals</title>
      <link href="2021/04/11/SQL-Fundamentals/"/>
      <url>2021/04/11/SQL-Fundamentals/</url>
      
        <content type="html"><![CDATA[<h2 id="where"><a class="markdownIt-Anchor" href="#where"></a> WHERE</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM Table WHERE ColumnName &lt;&gt; &#39;Some value&#39;.</span><br></pre></td></tr></table></figure><p>This Query will not return Null values.</p><p>To return Null values we need to check if <code>Column is NULL</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM Table WHERE ColumnName IS NULL</span><br></pre></td></tr></table></figure><h2 id="like"><a class="markdownIt-Anchor" href="#like"></a> LIKE</h2><p>If a column has type <code>varchar(50)</code>, and in one row its value doesn’t have length 50. Spaces will be added to the end.</p><p>So <code>WHERE ColumnName LIKE '%SomeValue'</code> will return nothing. You can write the query like this. <code>WHERE ColumnName LIKE '%SomeValue%'</code></p><h2 id="functions"><a class="markdownIt-Anchor" href="#functions"></a> Functions</h2><ul><li>LEFT(): return the left most char from string</li><li>RIGHT(): return the right most char from string</li><li>LTRIM(): remove the spaces on the left of string</li><li>RTRIM(): remove the spaces on the right of string</li></ul><h2 id="group-by-and-having"><a class="markdownIt-Anchor" href="#group-by-and-having"></a> GROUP BY and HAVING</h2><p>GROUP BY will group values into different groups. HAVING can filter out some values after GROUP BY.</p><h2 id="join"><a class="markdownIt-Anchor" href="#join"></a> JOIN</h2><h3 id="inner-join"><a class="markdownIt-Anchor" href="#inner-join"></a> INNER JOIN</h3><p>The default JOIN, rows will be returned if they appear in both tables</p><h3 id="cross-join"><a class="markdownIt-Anchor" href="#cross-join"></a> CROSS JOIN</h3><p>Will return the combination of rows from Table A and Table B. If Table A has 4 rows and Table B has 10 row, it will return 40 rows.</p><h3 id="outer-join"><a class="markdownIt-Anchor" href="#outer-join"></a> OUTER JOIN</h3><ul><li>LEFT OUTER JOIN (LEFT JOIN)</li></ul><p>The OUTER keyword is optional. LEFT OUTER JOIN is the same as LEFT JOIN. Values will be returned if it appear in the LEFT table. It doesn’t need to be in the RIGHT table.</p><ul><li>RIGHT OUTER JOIN (RIGHT JOIN)</li></ul><p>RIGHT OUTER JOIN is the same as RIGHT JOIN. Values will be returned if it appear in the RIGHT table. It doesn’t need to be in the LEFT table.</p><ul><li>FULL OUTER JOIN (FULL JOIN)</li></ul><p>Values will be returned if they appear in either LEFT table or RIGHT table.</p><h2 id="union"><a class="markdownIt-Anchor" href="#union"></a> UNION</h2><p>UNION can be placed between SELECT queries.</p><p>Rows will be appended for each SELECT.</p><p>Each SELECT must have same number of Columns and DataType needs to match.</p><h3 id="union-all"><a class="markdownIt-Anchor" href="#union-all"></a> UNION ALL</h3><p>If SELECT queries return same rows, they will all be returned.</p><h2 id="insert"><a class="markdownIt-Anchor" href="#insert"></a> INSERT</h2><h3 id="insert-select"><a class="markdownIt-Anchor" href="#insert-select"></a> INSERT SELECT</h3><p>The values returned from SELECT will be inserted immediately. Works will multiple rows.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO TableA(ColumnA, ColumnB)</span><br><span class="line">SELECT ColumnA, ColumnB</span><br><span class="line">FROM TableB</span><br></pre></td></tr></table></figure><h2 id="update-and-delete"><a class="markdownIt-Anchor" href="#update-and-delete"></a> UPDATE and DELETE</h2><p>If we want to delete some value in a row, we could SET it to NULL</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE Table SET ColumnName &#x3D; NULL WHERE RowId &#x3D; 1</span><br></pre></td></tr></table></figure><h2 id="create-table"><a class="markdownIt-Anchor" href="#create-table"></a> CREATE TABLE</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE TableName </span><br><span class="line">(</span><br><span class="line">ProductId int NOT NULL,</span><br><span class="line">Quantity int NOT NULL DEFAULT 1,</span><br><span class="line">ProductName varchar(10) NULL</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="create-view"><a class="markdownIt-Anchor" href="#create-view"></a> CREATE VIEW</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE VIEW ViewName AS </span><br><span class="line">SELECT *</span><br><span class="line">FROM Table</span><br><span class="line">WHERE ...</span><br></pre></td></tr></table></figure><p>VIEW is a temp Table, it can save complex SELECT queries and can be reused later.</p><h2 id="transaction"><a class="markdownIt-Anchor" href="#transaction"></a> TRANSACTION</h2><p>If there is error in the middle of a TRANSACTION, it will not COMMIT</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">BEGIN TRANSACTION</span><br><span class="line">-- Multiple UPDATE&#x2F;INSERT&#x2F;DELETE queries</span><br><span class="line">COMMIT TRANSACTION</span><br></pre></td></tr></table></figure><h3 id="savepoint-and-rollback"><a class="markdownIt-Anchor" href="#savepoint-and-rollback"></a> SAVEPOINT and ROLLBACK</h3><p>If error happens in the middle of a TRANSACTION and we don’t want to ROLLBACK to the start. We can create SAVEPOINT and let it ROLLBACK to that point.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">BEGIN TRANSACTION</span><br><span class="line"></span><br><span class="line">INSERT INTO Table(ColumnA, ColumnB) VALUES (1, 2);</span><br><span class="line"></span><br><span class="line">SAVE TRANSACTION PointOne;</span><br><span class="line"></span><br><span class="line">INSERT INTO Table(ColumnA, ColumnB) VALUE (1, 2);</span><br><span class="line"></span><br><span class="line">If @@ERROR &lt;&gt; 0 ROLLBACK TRANSACTION PointOne;</span><br><span class="line"></span><br><span class="line">COMMIT TRANSACTION</span><br></pre></td></tr></table></figure><p>In the above code, if the second INSERT failed, @@ERROR will return a non-zero value, it will ROLLBACK to SAVEPOINT PointOne.</p><h2 id="constraint"><a class="markdownIt-Anchor" href="#constraint"></a> Constraint</h2><ul><li>Primary key</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Table </span><br><span class="line">(</span><br><span class="line">    RowId int NOT NULL PRIMARY KEY</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li>Foreign key</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Table </span><br><span class="line">(</span><br><span class="line">    RowId int NOT NULL PRIMARY KEY,</span><br><span class="line">    ForeignId int NOT NULL REFERENCES TableB(Id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>Foreign Key values must come from Primary key in the other table.</p><p>Primary key records cannot be deleted unless all Foreign key records were deleted first.</p><p>Some DBMS support CASCADE DELETE, which will delete the Primary key record and related Foreign key record in other tables.</p><ul><li>UNIQUE</li></ul><p>One table could have multiple UNIQUE Constraint.</p><ul><li>CHECK</li></ul><p>Further restrict values in this Column</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE Table </span><br><span class="line">(</span><br><span class="line">    quantity int NOT NULL CHECK (quantity &gt; 0),</span><br><span class="line">    gender varchar(1) NOT NULL CHECK (gender LIKE &#39;[MF]&#39;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="index"><a class="markdownIt-Anchor" href="#index"></a> INDEX</h2><p>If you create an index on a Column, DB will sort this Column and store it. Next time you SELECT by this Column, DB will search faster (binary search) because it is sorted.</p><p>But add index to a Column will decrease the efficiency of doing UPDATE/INSERT/DELETE on those Columns. Because DB needs to update INDEX on those Columns.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE INDEX Table_Column_Index</span><br><span class="line">ON Table (Column);</span><br></pre></td></tr></table></figure><h2 id="trigger"><a class="markdownIt-Anchor" href="#trigger"></a> TRIGGER</h2><p>TRIGGER will be execute when certain changes happen to a table</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TRIGGER Table_trigger</span><br><span class="line">ON Table</span><br><span class="line">FOR INSERT, UPDATE</span><br><span class="line">AS </span><br><span class="line">UPDATE Table</span><br><span class="line">SET ColumnName &#x3D; Upper(ColumnName)</span><br><span class="line">WHERE Table.Id &#x3D; inserted.Id</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>.NET with NUnit Test</title>
      <link href="2021/04/08/NET-with-NUnit-Test/"/>
      <url>2021/04/08/NET-with-NUnit-Test/</url>
      
        <content type="html"><![CDATA[<h2 id="what-is-nunit"><a class="markdownIt-Anchor" href="#what-is-nunit"></a> What is NUnit?</h2><p>NUnit is a unit-testing framework for all .Net languages. Initially ported from JUnit, the current production release, version 3, has been completely rewritten with many new features and support for a wide range of .NET platforms.</p><h3 id="nuget-packages"><a class="markdownIt-Anchor" href="#nuget-packages"></a> NuGet Packages</h3><ol><li>NUnit</li><li>NUnit3TestAdapter</li><li>Microsoft.NET.Test.Sdk</li></ol><h3 id="your-first-nunit-test-case"><a class="markdownIt-Anchor" href="#your-first-nunit-test-case"></a> Your First NUnit Test Case</h3><p>Add <code>[TestFixture]</code> and <code>[Test]</code> to mark code as tests</p><p>Test can be run in Test Explorer and in Command Line</p><h2 id="why-write-automated-tests"><a class="markdownIt-Anchor" href="#why-write-automated-tests"></a> Why Write Automated Tests?</h2><p>Help to find defects and regressions. When we make a change to the project, we may find that unintentionally break one of the existing tests. Something that once working is no longer working.</p><p>Automated Tests give us greater confidence that the software is working as it should.</p><h2 id="understanding-the-nunit-test-framework"><a class="markdownIt-Anchor" href="#understanding-the-nunit-test-framework"></a> Understanding the NUnit Test Framework</h2><ul><li><p>NUnit Library</p><ul><li>Attributes e.g. <code>[Test]</code></li><li>Assertions</li></ul></li><li><p>Test Runner</p><ul><li>Recognizes attributes</li><li>Execute test methods</li><li>Report test results</li><li>Test explorer</li><li>donet test</li></ul></li></ul><h3 id="nunit-attributes-overview"><a class="markdownIt-Anchor" href="#nunit-attributes-overview"></a> NUnit attributes Overview</h3><ol><li><code>[TestFixture]</code>: Mark a class that contains tests</li><li><code>[Test]</code>: Mark a method as a test</li><li><code>[Category]</code>: Organize tests into categories</li><li><code>[TestCase]</code>: Data driven test cases</li><li><code>[Values]</code>: Data driven test parameters</li><li><code>[Sequential]</code>: How to combine test data</li><li><code>[SetUp]</code>: Run code before each test</li><li><code>[OneTimeSetUp]</code>: Run code before first test in class</li></ol><h3 id="nunite-assertions-overview"><a class="markdownIt-Anchor" href="#nunite-assertions-overview"></a> NUnite Assertions Overview</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Constraint Model of assertions (newer)</span><br><span class="line">Assert.That(sut.Years, Is.EqualTo(1));</span><br><span class="line">Assert.That(test result, constraint instance);</span><br></pre></td></tr></table></figure><p>This Classic Model is still supported but since no new features have been added to it for some time. the constraint-based model must be used in order to have full access to NUnit’s capabilities.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Classic Model of assertions (older)</span><br><span class="line">Assert.AreEqual(1, sut.Years);</span><br><span class="line">Assert.NotNull(sut.Years);</span><br><span class="line">Assert.xyz(...);</span><br></pre></td></tr></table></figure><h3 id="the-logical-arrange-act-assert-test-phases"><a class="markdownIt-Anchor" href="#the-logical-arrange-act-assert-test-phases"></a> The Logical Arrange, Act, Assert Test Phases</h3><ol><li>Arrange: Set up test objects, initialize test data</li><li>Act: call methods, set property, to cause some effect in the project</li><li>Assert: compare returned value/end state with expected</li></ol><h3 id="qualities-of-good-tests"><a class="markdownIt-Anchor" href="#qualities-of-good-tests"></a> Qualities of Good Tests</h3><ul><li>Fast</li><li>Repeatable</li><li>Isolated: One Test should not depend on others to run</li><li>Trustworthy</li><li>Valuable</li></ul><h2 id="asserting-on-different-types-of-results"><a class="markdownIt-Anchor" href="#asserting-on-different-types-of-results"></a> Asserting on Different Types of Results</h2><p><strong>Asserts</strong>: Evaluate and verify the outcome of a test based on a returned result, final object state, or the occurence of events observed during execution. An assert should either pass or fail.</p><h3 id="how-many-asserts-per-test"><a class="markdownIt-Anchor" href="#how-many-asserts-per-test"></a> How many asserts per test?</h3><p>A single test usually focuses on testing a single ‘behaviour’. Multiple asserts are usually ok if all the asserts are related to testing this single behaviour.</p><h3 id="asserting-on-equality"><a class="markdownIt-Anchor" href="#asserting-on-equality"></a> Asserting on Equality</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; compare value</span><br><span class="line">Assert.That(a, Is.EqualTo(...));</span><br><span class="line">Assert.That(a, Is.Not.EqualTo(...));</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; compare reference</span><br><span class="line">Assert.That(a, Is.SameAs(...));</span><br><span class="line">Assert.That(a, Is.Not.SameAs(...));</span><br></pre></td></tr></table></figure><h3 id="adding-custom-failure-message"><a class="markdownIt-Anchor" href="#adding-custom-failure-message"></a> Adding custom failure message</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Assert.That(a, Is.EqualTo(...), &quot;Custom Error Message&quot;);</span><br></pre></td></tr></table></figure><h3 id="asserting-on-floating-numbers"><a class="markdownIt-Anchor" href="#asserting-on-floating-numbers"></a> Asserting on Floating Numbers</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Assert.That(a, Is.EqualTo(0.33).Within(0.001));</span><br><span class="line">Assert.That(a, Is.EqualTo(0.33).Within(10).Percent);</span><br></pre></td></tr></table></figure><h3 id="asserting-on-null-values"><a class="markdownIt-Anchor" href="#asserting-on-null-values"></a> Asserting on Null Values</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">string name &#x3D; &quot;yuan&quot;;</span><br><span class="line"></span><br><span class="line">Assert.That(name, Is.Null); &#x2F;&#x2F; fail</span><br><span class="line">Assert.That(name, Is.Not.Null); &#x2F;&#x2F; pass</span><br></pre></td></tr></table></figure><h3 id="asserting-on-string-values"><a class="markdownIt-Anchor" href="#asserting-on-string-values"></a> Asserting on String Values</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">string name &#x3D; &quot;yuan&quot;;</span><br><span class="line"></span><br><span class="line">Assert.That(name, Is.Empty); &#x2F;&#x2F; fail</span><br><span class="line">Assert.That(name, Is.Not.Empty); &#x2F;&#x2F; pass</span><br><span class="line"></span><br><span class="line">Assert.That(name, Is.EqualTo(&quot;yuan&quot;)); &#x2F;&#x2F; pass</span><br><span class="line">Assert.That(name, Is.EqualsTo(&quot;YUAN&quot;)); &#x2F;&#x2F; fail, case-sensitive</span><br><span class="line">Assert.That(name, Is.EqualTo(&quot;YUAN&quot;).IgnoreCase); &#x2F;&#x2F; pass</span><br><span class="line"></span><br><span class="line">Assert.That(name, Does.StartWith(&quot;yu&quot;)); &#x2F;&#x2F; pass</span><br><span class="line">Assert.That(name, Does.EndWith(&quot;an&quot;)); &#x2F;&#x2F; pass</span><br><span class="line">Assert.That(name, Does.Contain(&quot;ua)); &#x2F;&#x2F; pass</span><br><span class="line">Assert.That(name, Does.Not.Contain(&quot;kk&quot;)); &#x2F;&#x2F; pass</span><br><span class="line">Assert.That(name, Does.StartWith(&quot;yu&quot;)</span><br><span class="line">                    .And</span><br><span class="line">                    .EndWith(&quot;an&quot;)); &#x2F;&#x2F; pass</span><br><span class="line">Assert.That(name, Does.StartWith(&quot;kk&quot;)</span><br><span class="line">                    .Or</span><br><span class="line">                    .EndWith(&quot;an&quot;)); &#x2F;&#x2F; pass</span><br></pre></td></tr></table></figure><h3 id="asserting-on-boolean-values"><a class="markdownIt-Anchor" href="#asserting-on-boolean-values"></a> Asserting on Boolean Values</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">bool isTrue &#x3D;  true;</span><br><span class="line"></span><br><span class="line">Assert.That(isTrue); &#x2F;&#x2F; pass</span><br><span class="line">Assert.That(isTrue, Is.True); &#x2F;&#x2F; pass</span><br><span class="line"></span><br><span class="line">bool isFalse &#x3D; false;</span><br><span class="line"></span><br><span class="line">Assert.That(isFalse &#x3D;&#x3D; false); &#x2F;&#x2F; pass</span><br><span class="line">Assert.That(isFalse, Is.False); &#x2F;&#x2F; pass</span><br><span class="line">Assert.That(isFalse, Is.Not.True); &#x2F;&#x2F; pass</span><br></pre></td></tr></table></figure><h3 id="asserting-within-ranges"><a class="markdownIt-Anchor" href="#asserting-within-ranges"></a> Asserting within Ranges</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">int i &#x3D; 42;</span><br><span class="line"></span><br><span class="line">Assert.That(i, Is.GreaterThan(42)); &#x2F;&#x2F; fail</span><br><span class="line">Assert.That(i, Is.GreaterThanOrEqualTo(42)); &#x2F;&#x2F; pass</span><br><span class="line">Assert.That(i, Is.LessThan(42)); &#x2F;&#x2F; fail</span><br><span class="line">Assert.That(i, Is.GreaterThanOrEqualTo(42)); &#x2F;&#x2F; pass</span><br><span class="line">Assert.That(i, Is.InRange(40, 50)); &#x2F;&#x2F; pass</span><br><span class="line"></span><br><span class="line">DateTiem d1 &#x3D; new DateTime(2021, 2, 20);</span><br><span class="line">DateTiem d2 &#x3D; new DateTime(2021, 2, 25);</span><br><span class="line"></span><br><span class="line">Assert.That(d1, Is.EqualTo(d2)); &#x2F;&#x2F; fail</span><br><span class="line">Assert.That(d1, Is.EqualTo(d2).Within(4).Days); &#x2F;&#x2F; fail</span><br><span class="line">Assert.That(d1, Is.EqualTo(d2).Within(5).Days); &#x2F;&#x2F; pass</span><br></pre></td></tr></table></figure><h3 id="asserting-on-objects"><a class="markdownIt-Anchor" href="#asserting-on-objects"></a> Asserting on Objects</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">class Product &#123;</span><br><span class="line">    int ProductId &#123;get; set;&#125;</span><br><span class="line">    string ProductName &#123;get; set;&#125;</span><br><span class="line"></span><br><span class="line">    Product(int ProductId, string ProductName) &#123;</span><br><span class="line">        this.ProductId &#x3D; ProductId;</span><br><span class="line">        this.ProductName &#x3D; ProductName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var products &#x3D; new List&lt;Product&gt; &#123;</span><br><span class="line">    new Product(1, &quot;a&quot;),</span><br><span class="line">    new Product(2, &quot;b&quot;),</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Assert.That(products, Has.Exactly(2).Items); &#x2F;&#x2F; pass</span><br><span class="line">Assert.That(products, Is,Unique); &#x2F;&#x2F; pass</span><br><span class="line">Assert.That(products, Has.Exactly(1)</span><br><span class="line">                        .Property(&quot;ProductName&quot;).EqualTo(&quot;a&quot;)</span><br><span class="line">                        .And</span><br><span class="line">                        .Property(&quot;ProductId).EqualTo(1));</span><br><span class="line"></span><br><span class="line">Assert.That(products, Has.Exactly(1)</span><br><span class="line">                        .Matches&lt;Product&gt;(</span><br><span class="line">                        item &#x3D;&gt; item.ProductName &#x3D;&#x3D; &quot;a&quot; &amp;&amp;</span><br><span class="line">                                item.ProductId &#x3D;&#x3D; 1</span><br><span class="line">                        ));</span><br></pre></td></tr></table></figure><h2 id="controlling-test-execution"><a class="markdownIt-Anchor" href="#controlling-test-execution"></a> Controlling Test Execution</h2><p>Use <code>[Ignore]</code> to skip tests. <code>[Ignore]</code> could also be put before class to skip the entire test class</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[Test]</span><br><span class="line">[Ignore(&quot;Custom reason why we need to skip this test&quot;)]</span><br><span class="line">public void TestWillNotRun() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Use <code>[Category]</code> to add test cases to categories, we can only run tests for certain category.</p><p>In Test Explorer, we can group tests by <strong>Traits</strong>, which is just another name for Category</p><p>One Test Case can belongs to multiple <code>[Category]</code>.</p><p><code>[Category]</code> can be applied to <strong>Class</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[Test]</span><br><span class="line">[Category(&quot;Category 1&quot;)]</span><br><span class="line">public void TestInCategoryOne() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>[SetUp]</code> code will be executed before each test. So it is a good place to define variables and objects.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class TestClass &#123;</span><br><span class="line">    private List&lt;Product&gt; products;</span><br><span class="line">    private string test;</span><br><span class="line"></span><br><span class="line">    [SetUp]</span><br><span class="line">    public void Setup() &#123;</span><br><span class="line">        products &#x3D; new List&lt;Products&gt; &#123;</span><br><span class="line">            new Product(1, &quot;a&quot;),</span><br><span class="line">            new Product(2, &quot;b&quot;),</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        test &#x3D; &quot;test&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>[TearDown]</code> code will be executed after each test, it is the place to dispose all unnecessary objects</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class TestClass &#123;</span><br><span class="line">    [TearDown]</span><br><span class="line">    public void Setup() &#123;</span><br><span class="line">        if (products !&#x3D; null) &#123;</span><br><span class="line">            ((IDisposable)products).Dispose();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>[OneTimeSetUp]</code> code will be executed once before the first test case. Define objects that will not be modified by test cases here.</p><p><code>[OneTimeTearDown]</code> code will be executed once after the last test case. Dispose any objects here.</p><h2 id="data-driven-tests-and-reducing-code-duplication"><a class="markdownIt-Anchor" href="#data-driven-tests-and-reducing-code-duplication"></a> Data Driven Tests and Reducing Code Duplication</h2><p><code>[TestCase]</code>: If we want to run the same test but with different data, we could pass different variables into the test function.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[Test]</span><br><span class="line">[TestCase(200_000, 6.5, 30, 1264.14)]</span><br><span class="line">[TestCase(200_000, 10, 30, 1755.14)]</span><br><span class="line">[TestCase(500_000, 10, 30, 4387.86)]</span><br><span class="line">public void CalculateCorrectMonthlyRepayment(decimal principal, decimal interestRate, int termInYears, decimal expectedMonthlyPayment)</span><br><span class="line">&#123;</span><br><span class="line">    var sut &#x3D; new LoanRepaymentCalculator();</span><br><span class="line"></span><br><span class="line">    var monthlyPayment &#x3D; sut.CalculateMonthlyRepayment(</span><br><span class="line">                            new LoanAmount(&quot;USD&quot;, principal), interestRate, new LoanTerm(termInYears));</span><br><span class="line"></span><br><span class="line">    Assert.That(monthlyPayment, Is.EqualTo(expectedMonthlyPayment));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[Test]</span><br><span class="line">[TestCase(200_000, 6.5, 30, ExpectedResult &#x3D; 1264.14)]</span><br><span class="line">[TestCase(200_000, 10, 30, ExpectedResult &#x3D; 1755.14)]</span><br><span class="line">[TestCase(500_000, 10, 30, ExpectedResult &#x3D; 4387.86)]</span><br><span class="line">public decimal CalculateCorrectMonthlyRepayment_SimplifiedTestCase(decimal principal, decimal interestRate, int termInYears)</span><br><span class="line">&#123;</span><br><span class="line">    var sut &#x3D; new LoanRepaymentCalculator();</span><br><span class="line"></span><br><span class="line">    return sut.CalculateMonthlyRepayment(new LoanAmount(&quot;USD&quot;, principal), interestRate, new LoanTerm(termInYears));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="create-test-case-from-centralized-data-class"><a class="markdownIt-Anchor" href="#create-test-case-from-centralized-data-class"></a> Create Test Case from Centralized Data Class</h3><p><code>[TestCaseSource(typeof(Class_Name), &quot;Function_Name&quot;)]</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[Test]</span><br><span class="line">[TestCaseSource(typeof(MonthlyRepaymentTestData), &quot;TestCases&quot;)]</span><br><span class="line">public void CalculateCorrectMonthlyRepayment_Centralized(decimal principal, decimal interestRate, int termInYears, decimal expectedMonthlyPayment)</span><br><span class="line">&#123;</span><br><span class="line">    var sut &#x3D; new LoanRepaymentCalculator();</span><br><span class="line"></span><br><span class="line">    var monthlyPayment &#x3D; sut.CalculateMonthlyRepayment(</span><br><span class="line">                            new LoanAmount(&quot;USD&quot;, principal), interestRate, new LoanTerm(termInYears));</span><br><span class="line"></span><br><span class="line">    Assert.That(monthlyPayment, Is.EqualTo(expectedMonthlyPayment));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="create-test-case-with-data-from-file"><a class="markdownIt-Anchor" href="#create-test-case-with-data-from-file"></a> Create Test Case with Data from File</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[Test]</span><br><span class="line">[TestCaseSource(typeof(MonthlyRepaymentCsvData), &quot;GetTestCases&quot;, new object[] &#123; &quot;Data.csv&quot; &#125;)]</span><br><span class="line">public void CalculateCorrectMonthlyRepayment_Csv(decimal principal, decimal interestRate, int termInYears, decimal expectedMonthlyPayment)</span><br><span class="line">&#123;</span><br><span class="line">    var sut &#x3D; new LoanRepaymentCalculator();</span><br><span class="line"></span><br><span class="line">    var monthlyPayment &#x3D; sut.CalculateMonthlyRepayment(</span><br><span class="line">                            new LoanAmount(&quot;USD&quot;, principal), interestRate, new LoanTerm(termInYears));</span><br><span class="line"></span><br><span class="line">    Assert.That(monthlyPayment, Is.EqualTo(expectedMonthlyPayment));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="create-test-cases-with-values-sequential-and-range"><a class="markdownIt-Anchor" href="#create-test-cases-with-values-sequential-and-range"></a> Create Test Cases with Values, Sequential and Range</h3><p>Without <code>[Sequential]</code>, it will create 3 * 3 * 3 = 27 test cases<br />With <code>[Sequential]</code>, it will only create 3 test cases</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[Test]</span><br><span class="line">[Sequential]</span><br><span class="line">public void CalculateCorrectMonthlyRepayment_Combinatorial(</span><br><span class="line">    [Values(100_000, 200_000, 500_000)] decimal principal,</span><br><span class="line">    [Values(6.5, 10, 20)] decimal interestRate,</span><br><span class="line">    [Values(10, 20, 30)] int termInYears)</span><br><span class="line">&#123;</span><br><span class="line">    var sut &#x3D; new LoanRepaymentCalculator();</span><br><span class="line"></span><br><span class="line">    var monthlyPayment &#x3D; sut.CalculateMonthlyRepayment(new LoanAmount(&quot;USD&quot;, principal), interestRate, new LoanTerm(termInYears));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="create-custom-category-attribute"><a class="markdownIt-Anchor" href="#create-custom-category-attribute"></a> Create Custom Category Attribute</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[AttributeUsage(AttributeTargets.Method | AttributeTargets.Class, AllowMultiple &#x3D; false)]</span><br><span class="line">class ProductComparisonAttribute : CategoryAttribute</span><br><span class="line">&#123;&#125;</span><br></pre></td></tr></table></figure><p>Then we can use Custom Attribute like this</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[Test]</span><br><span class="line">[ProductComparison]</span><br><span class="line">public void CustomAttributeTest() &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Unit Tests </tag>
            
            <tag> .NET </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript Fundamentals</title>
      <link href="2021/04/03/JavaScript-Fundamentals/"/>
      <url>2021/04/03/JavaScript-Fundamentals/</url>
      
        <content type="html"><![CDATA[<h2 id="data-types"><a class="markdownIt-Anchor" href="#data-types"></a> Data Types</h2><ol><li>undefined</li><li>Boolean</li><li>Number</li><li>String</li><li>Symbol</li><li>null</li><li>object</li></ol><h3 id="undefined-and-null-in-javascript"><a class="markdownIt-Anchor" href="#undefined-and-null-in-javascript"></a> undefined and null in JavaScript</h3><ul><li>undefined mean a variable has been declared but not yet been assigned a value. The data type of undefined variable is also undefined. (undefined is a data type).</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var x;</span><br><span class="line">alert(x); &#x2F;&#x2F; undefined</span><br><span class="line">alert(typeof x); &#x2F;&#x2F; undefined</span><br></pre></td></tr></table></figure><ul><li>null is an assignment value, it can be assigned to a variable as a representation of no value. The data type of null variable is an object.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var x &#x3D; null;</span><br><span class="line">alert(x); &#x2F;&#x2F; null</span><br><span class="line">alert(typeof x); &#x2F;&#x2F; object</span><br></pre></td></tr></table></figure><ul><li>undefined and null are equal in value but different in type.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">typeof undefined; &#x2F;&#x2F; undefined</span><br><span class="line">typeof null; &#x2F;&#x2F; object</span><br><span class="line"></span><br><span class="line">null &#x3D;&#x3D;&#x3D; undefined; &#x2F;&#x2F; false</span><br><span class="line">null &#x3D;&#x3D; undefined; &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure><h2 id="declare-variable"><a class="markdownIt-Anchor" href="#declare-variable"></a> Declare variable</h2><ul><li>var: normal way to declare a variable.</li><li>let: the variable you declared will only be used within the scope of where you declare it.</li><li>const: the variable value will never change</li></ul><h2 id="scope"><a class="markdownIt-Anchor" href="#scope"></a> Scope</h2><ul><li>Local scope</li><li>Global scope</li></ul><p>JavaScript has function scope, each function creates a new scope. Scope determines the accessibility of these variables. Variables defined inside a function are not accessible from outside the function</p><h2 id="array"><a class="markdownIt-Anchor" href="#array"></a> Array</h2><ul><li>push: Add anitem to the end of the array</li><li>pop: Remove an item from the end of the array</li><li>shift: Remove an item from the beginning of an array</li><li>unshift: Add an item to the beginning of an array</li><li>indexOf: find the index of an item in the array</li><li>splice: Remove items from an index position.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">let vegetables &#x3D; [&#39;Cabbage&#39;, &#39;Turnip&#39;, &#39;Radish&#39;, &#39;Carrot&#39;]</span><br><span class="line">console.log(vegetables)</span><br><span class="line">&#x2F;&#x2F; [&quot;Cabbage&quot;, &quot;Turnip&quot;, &quot;Radish&quot;, &quot;Carrot&quot;]</span><br><span class="line"></span><br><span class="line">let pos &#x3D; 1</span><br><span class="line">let n &#x3D; 2</span><br><span class="line"></span><br><span class="line">let removedItems &#x3D; vegetables.splice(pos, n)</span><br><span class="line">&#x2F;&#x2F; this is how to remove items, n defines the number of items to be removed,</span><br><span class="line">&#x2F;&#x2F; starting at the index position specified by pos and progressing toward the end of array.</span><br><span class="line"></span><br><span class="line">console.log(vegetables)</span><br><span class="line">&#x2F;&#x2F; [&quot;Cabbage&quot;, &quot;Carrot&quot;] (the original array is changed)</span><br><span class="line"></span><br><span class="line">console.log(removedItems)</span><br><span class="line">&#x2F;&#x2F; [&quot;Turnip&quot;, &quot;Radish&quot;]</span><br></pre></td></tr></table></figure><ul><li>slice: copy an array</li></ul><h3 id="objectfreeze"><a class="markdownIt-Anchor" href="#objectfreeze"></a> Object.freeze</h3><ul><li>const: creates an immutable binding, you cannot re-assign a new value to the binding. But if you delcare a const array or object. You can set new value to the element in the array or object</li><li>object.freeze: makes an object immutable, so you cannot change its properties.</li></ul><h2 id="object-dynamic-properties"><a class="markdownIt-Anchor" href="#object-dynamic-properties"></a> Object Dynamic Properties</h2><p>The property ‘test’ is a dynamic property, it’s value will be evaluated during runtime. So obj will have a property name ‘test’ with value 52.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">const test &#x3D; &#39;answer&#39;;</span><br><span class="line"></span><br><span class="line">const obj &#x3D; &#123;</span><br><span class="line">    p1:10,</span><br><span class="line">    p2:20,</span><br><span class="line">    [test]: 52</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">console.log(obj.test);</span><br><span class="line">console.log(obj.answer);</span><br></pre></td></tr></table></figure><h2 id="anonymous-function"><a class="markdownIt-Anchor" href="#anonymous-function"></a> Anonymous function</h2><ul><li>functions without name. You can also pass that function to a variable</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var magic &#x3D; function() &#123;</span><br><span class="line">    return new Date();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="arrow-function"><a class="markdownIt-Anchor" href="#arrow-function"></a> Arrow function</h2><ul><li>You can convert anonymous function to arrow function</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var magic &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">    return new Date();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var magic &#x3D; () &#x3D;&gt; new Date();</span><br></pre></td></tr></table></figure><ul><li>Arrow function with parameters</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var myConcat &#x3D; (var1, var2) &#x3D;&gt; arr1.concat(arr2);</span><br></pre></td></tr></table></figure><p>Example: Filter the array with only positive numbers and return the square of all remain elements in a new array</p><ul><li>Array.filter: The filter() method creates a new array with all elements that pass the test implemented by the provided function.</li><li>Array.map: The map() method creates a new array populated with the results of calling a provided function on every element in the calling array.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">const array &#x3D; [1,2,-3,4,-5,6,7];</span><br><span class="line"></span><br><span class="line">const squareList &#x3D; arr &#x3D;&gt; &#123;</span><br><span class="line">    const squaredList &#x3D; arr.filter(function callback(num) &#123;</span><br><span class="line">        return Number.isInteger(num) &amp;&amp; num &gt; 0;</span><br><span class="line">    &#125;).map(function square(num) &#123;</span><br><span class="line">        return num * num;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    return squaredList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const squaredIntegers &#x3D; squareList(array);</span><br><span class="line"></span><br><span class="line">console.log(squaredIntegers);</span><br></pre></td></tr></table></figure><ul><li>Using Arrow functions</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const array &#x3D; [1,2,-3,4,-5,6,7];</span><br><span class="line"></span><br><span class="line">const squareList &#x3D; arr &#x3D;&gt; &#123;</span><br><span class="line">    const squaredList &#x3D; arr.filter(num &#x3D;&gt; Number.isInteger(num) &amp;&amp; num &gt; 0).map(num &#x3D;&gt; num * num);</span><br><span class="line">    return squaredList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const squaredIntegers &#x3D; squareList(array);</span><br><span class="line">console.log(squaredIntegers);</span><br></pre></td></tr></table></figure><p>Example: Write a function that takes multiple parameters and add them up</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function sum(x, y, z) &#123;</span><br><span class="line">    args &#x3D; [x, y, z];</span><br><span class="line">    return args.reduce((accumulator, currentValue) &#x3D;&gt; accumulator + currentValue, 0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(sum(1,2,3));</span><br></pre></td></tr></table></figure><ul><li><p>Regular functions give access to their calling environment while arrow functions give access to their defining environment</p></li><li><p>The value of the ‘this’ keyword inside a regular function depends on HOW the function was CALLED (the OBJECT that made the call)</p></li><li><p>In arrow functions, this keyword doesn’t mean the caller of the arrow function. The value of the ‘this’ keyword inside an arrow function depends on WHERE the function was DEFINED (the scope that defined the function). This makes it great for delayed execution cases like events and listeners.</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">const test &#x3D; (function test () &#123;</span><br><span class="line">    const testerObj &#x3D; &#123;</span><br><span class="line">        func1: function() &#123;</span><br><span class="line">            console.log(&#39;func1&#39;, this);</span><br><span class="line">        &#125;,</span><br><span class="line"></span><br><span class="line">        func2: () &#x3D;&gt; &#123;</span><br><span class="line">            console.log(&#39;func2&#39;, this);</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    testerObj.func1();</span><br><span class="line">    testerObj.func2();    </span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><h2 id="using-rest-operator-to-represent-multiple-parameters"><a class="markdownIt-Anchor" href="#using-rest-operator-to-represent-multiple-parameters"></a> Using Rest operator to represent multiple parameters</h2><ul><li><p>Rest Operator: The rest parameter syntax allows a function to accept an indefinite number of arguments as an array,</p></li><li><p>Reduce: The reduce() method executes a reducer function (that you provide) on each element of the array, resulting in single output value.</p></li><li><p>The reducer function takes four arguments:</p></li></ul><ol><li>Accumulator</li><li>Current Value</li><li>Current Index</li><li>Source Array</li></ol><ul><li>Your reducer function’s returned value is assigned to the accumulator, whose value is remembered across each iteration throughout the array, and ultimately becomes the final, single resulting value.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function sum(...args) &#123;</span><br><span class="line">    return args.reduce((accumulator, currentValue) &#x3D;&gt; accumulator + currentValue, 0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(sum(1,2,3,4));</span><br></pre></td></tr></table></figure><h2 id="spread-syntax"><a class="markdownIt-Anchor" href="#spread-syntax"></a> Spread syntax</h2><p>Spread syntax (…) allows an iterable such as an array expression or string to be expanded in places where zero or more arguments (for function calls) or elements (for array literals) are expected, or an object expression to be expanded in places where zero or more key-value pairs (for object literals) are expected.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">const arr1 &#x3D; [&#39;JAN&#39;, &#39;FEB&#39;, &#39;MAR&#39;, &#39;APR&#39;, &#39;MAY&#39;];</span><br><span class="line"></span><br><span class="line">let arr2;</span><br><span class="line"></span><br><span class="line">(function () &#123;</span><br><span class="line">    &#x2F;&#x2F; spread arr1 into individual elements and create a new array by surrond it with []</span><br><span class="line">    arr2 &#x3D; [...arr1];</span><br><span class="line">    arr1[0] &#x3D; &#39;potato&#39;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; arr2[0] will still be &#39;JAN&#39;</span><br><span class="line">console.log(arr2);</span><br></pre></td></tr></table></figure><h2 id="destructuring-assignment"><a class="markdownIt-Anchor" href="#destructuring-assignment"></a> Destructuring assignment</h2><p>The destructuring assignment syntax is a JavaScript expression that makes it possible to unpack values from arrays, or properties from objects, into distinct variables.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var obj &#x3D; &#123;x:3.6, y:7.4, z:6.5&#125;;</span><br><span class="line"></span><br><span class="line">const &#123;x : a, y: b, z: c&#125; &#x3D; obj;</span><br><span class="line"></span><br><span class="line">console.log(&#96;$&#123;a&#125; $&#123;b&#125; $&#123;c&#125;&#96;);</span><br></pre></td></tr></table></figure><ul><li>Destructuring Assignment: Nested Objects</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">const LOCAL_FORECAST &#x3D; &#123;</span><br><span class="line">    today: &#123;min : 72, max: 83&#125;,</span><br><span class="line">    tomorrow : &#123;min : 73.3, max: 84.6&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">function getMaxOfTmw(forecast) &#123;</span><br><span class="line">    const &#123;tomorrow : &#123;max : maxOfTomorrow &#125;&#125; &#x3D; forecast;</span><br><span class="line"></span><br><span class="line">    return maxOfTomorrow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(getMaxOfTmw(LOCAL_FORECAST));</span><br></pre></td></tr></table></figure><ul><li>Destructuring Assignment: Arrays</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const[x, y, , z] &#x3D; [1,2,3,4,5,6];</span><br><span class="line">console.log(x, y, z);</span><br></pre></td></tr></table></figure><ul><li>Destructuring Assignment: Pass an object</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">const stats&#x3D; &#123;</span><br><span class="line">    max: 56.7,</span><br><span class="line">    standard_deviation: 4.34,</span><br><span class="line">    median: 34.54,</span><br><span class="line">    mode: 23.5,</span><br><span class="line">    min: -0.4,</span><br><span class="line">    average: 45.6</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function half(&#123;max, min&#125;) &#123;</span><br><span class="line">    return (max + min) &#x2F; 2.0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">console.log(half(stats));</span><br></pre></td></tr></table></figure><h2 id="object-literal-declarations-using-simple-fields"><a class="markdownIt-Anchor" href="#object-literal-declarations-using-simple-fields"></a> Object Literal Declarations Using Simple Fields</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const createPerson &#x3D; (name, age, gender) &#x3D;&gt; ( &#123;name, age, gender&#125; )</span><br><span class="line"></span><br><span class="line">console.log(createPerson(&#39;Yuan Cheng&#39;, 27, &#39;male&#39;));</span><br></pre></td></tr></table></figure><h2 id="functions-in-objects"><a class="markdownIt-Anchor" href="#functions-in-objects"></a> Functions in Objects</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const bicycle &#x3D; &#123;</span><br><span class="line">    gear : 2,</span><br><span class="line">    setGear: function(newGear) &#123;</span><br><span class="line">        this.gear &#x3D; newGear;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">bicycle.setGear(3);</span><br><span class="line">console.log(bicycle.gear);</span><br></pre></td></tr></table></figure><ul><li>we could remove the ‘function’ keyword</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const bicycle &#x3D; &#123;</span><br><span class="line">    gear : 2,</span><br><span class="line">    setGear(newGear) &#123;</span><br><span class="line">        this.gear &#x3D; newGear;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">bicycle.setGear(3);</span><br><span class="line">console.log(bicycle.gear);</span><br></pre></td></tr></table></figure><h2 id="class-syntax"><a class="markdownIt-Anchor" href="#class-syntax"></a> class syntax</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var SpaceShuttle &#x3D; function(targetPlanet) &#123;</span><br><span class="line">    this.targetPlanet &#x3D; targetPlanet;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var zeus &#x3D; new SpaceShuttle(&#39;Jupiter&#39;);</span><br><span class="line">console.log(zeus.targetPlanet);</span><br></pre></td></tr></table></figure><ul><li>Using Class and Constructor</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class SpaceShuttle &#123;</span><br><span class="line">    constructor(targetPlanet) &#123;</span><br><span class="line">        this.targetPlanet &#x3D; targetPlanet;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var zeus &#x3D; new SpaceShuttle(&#39;Jupiter&#39;);</span><br><span class="line">console.log(zeus.targetPlanet);</span><br></pre></td></tr></table></figure><h2 id="getters-and-setters"><a class="markdownIt-Anchor" href="#getters-and-setters"></a> getters and setters</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class Book &#123;</span><br><span class="line">    constructor(author) &#123;</span><br><span class="line">        this._author &#x3D; author;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; getter</span><br><span class="line">    get writer() &#123;</span><br><span class="line">        return this._author;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; setter</span><br><span class="line">    set writer(updatedAuthor) &#123;</span><br><span class="line">        this._author &#x3D; updatedAuthor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="import-vs-require"><a class="markdownIt-Anchor" href="#import-vs-require"></a> import vs require</h2><p>import functions from other js files</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123;capitalzeString&#125; from &quot;string_function&quot;</span><br></pre></td></tr></table></figure><h2 id="export"><a class="markdownIt-Anchor" href="#export"></a> export</h2><p>The export statement is used when creating JavaScript modules to export live bindings to functions, objects, or primitive values from the module so they can be used by other programs with the import statement. Bindings that are exported can still be modified locally; when imported, although they can only be read by the importing module the value updates whenever it is updated by the exporting module.</p><ul><li>below code is saved in a js file: string_function</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export const capitalizeString &#x3D; str &#x3D;&gt; str.toUpperCase();</span><br></pre></td></tr></table></figure><h2 id="to-import"><a class="markdownIt-Anchor" href="#to-import"></a> * to import</h2><p>import * will import every functions you export in the other file to a object</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import * as capitalizeStrings from &quot;capitalize_strings&quot;;</span><br></pre></td></tr></table></figure><h2 id="named-export-vs-export-default"><a class="markdownIt-Anchor" href="#named-export-vs-export-default"></a> Named export vs export default</h2><p>Named export: With named exports, one can have multiple named exports per file. Then import the specific exports they want surrounded in braces. The name of imported module has to be the same as the name of the exported module.</p><p>Export default: One can have only one default export per file.<br />The naming of import is completely independent in default export and we can use any name we like. No curly braces needed when import</p><h2 id="promises"><a class="markdownIt-Anchor" href="#promises"></a> Promises</h2><p>A promise is an object that might deliver data at a later point in the program.</p><p>Fetch API will return a promise, to consume that promise, we do a .then call on the result of fetch and supply a callback function. The Fetch API will have a raw response ‘resp’, you need to call the .json method on that response object. The json method is also a asynchronous function. It also returns a promise. So we do another .then call on the result of the json function</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const fetchData &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">    fetch(&#39;https:&#x2F;&#x2F;api.github.com&#39;).then(resp &#x3D;&gt; &#123;</span><br><span class="line">        resp.json().then(data &#x3D;&gt; &#123;</span><br><span class="line">            console.log(data);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">fetchData();</span><br></pre></td></tr></table></figure><p>The above code works, but it is difficult to read. We could use async/await.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const fetchData &#x3D; async () &#x3D;&gt; &#123;</span><br><span class="line">    const resp &#x3D; await fetch(&#39;https:&#x2F;&#x2F;api.github.com&#39;);</span><br><span class="line"></span><br><span class="line">    const data &#x3D; await resp.json();</span><br><span class="line"></span><br><span class="line">    console.log(data);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">fetchData();</span><br></pre></td></tr></table></figure><p>the async function is another way for us to consume promises without having us to use .then calls</p>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AWS SAA Architecting For Performance Efficiency</title>
      <link href="2021/03/16/AWS-SAA-Architecting-for-Performance-Efficiency/"/>
      <url>2021/03/16/AWS-SAA-Architecting-for-Performance-Efficiency/</url>
      
        <content type="html"><![CDATA[<ol><li><a href="#Part1">Part One: Understanding the Design Principles</a></li><li><a href="#Part2">Part Two: Considering Compute Performance Options</a></li><li><a href="#Part3">Part Three: Reviewing Storage Performance Options</a></li><li><a href="#Part4">Part Four: Examing Database Performance Options</a></li><li><a href="#Part5">Part Five: Evaluating Network Performance Options</a></li><li><a href="#Part6">Part Six: Preparing to Improve Your Architecture</a></li><li><a href="#Part7">Part Seven: Monitoring Your Architecture</a></li><li><a href="#Part8">Part Eight: Understanding the Trade-offs</a></li></ol><h2 id="part-one-understanding-the-design-principles"><a class="markdownIt-Anchor" href="#part-one-understanding-the-design-principles"></a> <a href="#title" title="Part 1">Part One: Understanding the Design Principles</a></h2><p>There are three main differences compare traditional on premises application and cloud application. 1. Cost. 2. Security and 3. Performance. We are going to focus on number three. Performance.</p><p>Cloud services are changing fast.</p><p>Go global: AWS have many regions, deploy application to the region that close to the user to reduce the latancy.</p><p>Go global: local region will comply to the laws and regulations</p><ol><li>Go global</li><li>Think serverless</li><li>Use new technologies</li><li>Experiment often</li><li>Right tool for the task</li></ol><h2 id="part-two-considering-compute-performance-options"><a class="markdownIt-Anchor" href="#part-two-considering-compute-performance-options"></a> <a href="#title" title="Part 2">Part Two: Considering Compute Performance Options</a></h2><p>What does compute performance includes?</p><p>Processing -&gt; CPU</p><p>Capacity -&gt; Storage</p><p>Scaling</p><p>Responsive</p><p>Economical</p><p>Understand your workload</p><p>Undetstand AWS compute</p><p>Need to gather and analyze data, and testing</p><h3 id="aws-compute-options"><a class="markdownIt-Anchor" href="#aws-compute-options"></a> AWS compute options</h3><h4 id="ec2-elastic-cloud-compute"><a class="markdownIt-Anchor" href="#ec2-elastic-cloud-compute"></a> EC2 Elastic Cloud Compute</h4><p>The default option, virtualized servers. IssA (infrustructure as a service)</p><p>Choose resources. You own the OS.(You are responsible for patching the OS and config all aspects of it.)</p><p>EC2 General resources</p><ol><li>vCPUs</li><li>Memory</li><li>Storage</li><li>Network</li></ol><p>EC2 extra features</p><ol><li>Burstable: if your EC2 is not using its full compute power, you gain credits which you can use in the future when you need it to burst the compute power of your instance for a short period of time.</li><li>GPU</li><li>FPGA (Filled Programmable Gate Arrays): Allows you to create customized hardware accelerators</li></ol><p>Instance Types</p><ol><li>General Purpose: Standard, balanced</li><li>Compute optimized: high compute power</li><li>Memory optimized: for memory intensive workloads</li><li>Accelerated computing: GPU or FPGA</li><li>Storage optimized: high storage</li><li>Bare metal</li></ol><p>EC2 Auto Scaling</p><ol><li>Metrics based: scale up or down based on the metric you choose</li><li>Schedule based: scale up or down for a booked time</li><li>Health based: replace unhealthy instances</li></ol><h4 id="ecs-elastic-container-service"><a class="markdownIt-Anchor" href="#ecs-elastic-container-service"></a> ECS Elastic Container Service</h4><p>Similar workloads as EC2</p><p>Migrate apps to the cloud, long running apps, batch processing, Microservices</p><p>Better utilize resources. Can run multiple containers on a single instance. ELB, balance traffic to each container, Autoscaling.</p><p>AWS Fargate: manages the instances on which your containers run. you don’t need to manage the server instances.</p><h4 id="aws-lambda"><a class="markdownIt-Anchor" href="#aws-lambda"></a> AWS Lambda</h4><p>FaaS (Function as a service). Serverless computing.</p><p>Backend processing, Event processing, Stream processing, Data processing</p><p>AWS resource triggers: other resources can trigger Lambda functions</p><p>You can choose memory needed for a lambda function</p><p>Advantages: Simply execute code. We don’t need to worry about the servers that run our Lambda codes.</p><p>Automatic scaling for Lambda function.</p><p>Fault tolerant: if a function fails, AWS will trigger the function again</p><p>Pay for usage</p><h4 id="applying-our-knowledge"><a class="markdownIt-Anchor" href="#applying-our-knowledge"></a> Applying our knowledge</h4><p>1. A company called Globomantics wants to move their application to cloud. They have customers globally.</p><p>The first application they want to move to cloud is an app that collections data from clinical trails. Doctors enter information each time they do checkings.</p><p>Considerations for Choice</p><ol><li>First app of many</li><li>Time should be fast</li><li>Predicatable usage</li></ol><p>They want to use ECS. Lift and shift: Easy to containerize the app. Able to scale. Able to choose instance sizes.</p><p>Allows them to leverage for future applications. Different containers in a single instance. Save costs</p><p>2. They also want to build a new web application for the cloud. Allow people to register medical devices. Share medical devices globally.</p><p>Considerations for Choice</p><ol><li>Manage costs</li><li>Global reach</li><li>Minimal maintenance</li></ol><p>They want to go with Lambda. Services behind a static site to save costs. Only pay for runtime.</p><p>Lambda scales besed on demand. Can be deployed to multiple regions. No servers to maintain.</p><h2 id="part-three-reviewing-storage-performance-options"><a class="markdownIt-Anchor" href="#part-three-reviewing-storage-performance-options"></a> <a href="#title" title="Part 3">Part Three: Reviewing Storage Performance Options</a></h2><h3 id="s3"><a class="markdownIt-Anchor" href="#s3"></a> S3</h3><p>data is encrypted. Access Managemenet(IAM), Lifecycle management. Query in place.(Don’t need to move the data to query it using SQL like command)</p><ol><li><p>Shared Access</p></li><li><p>Low latency</p></li><li><p>High thoughput: move data in or out S3 quickly</p></li><li><p>High Availability: available for multiple availability zones</p></li><li><p>High durability: data is duplicated across multiple availability zones</p></li><li><p>Standard</p></li><li><p>Intelligent Tier</p></li><li><p>Standard Infrequent Access(IA)(high latency)</p></li><li><p>One-Zone Infrequent Access(low availability, low durability)</p></li></ol><h3 id="glacier"><a class="markdownIt-Anchor" href="#glacier"></a> Glacier</h3><p>Immutable, data do not change once they are in Glacier.</p><p>Durable</p><p>Query stored data without retrieval.</p><ol><li>Archival storage</li><li>Encrypted</li><li>Access Control</li><li>Audit logging</li></ol><p>Latency options.</p><ol><li>Expedited. latency in minutes.</li><li>Standard. Default, number of hours to get data back.</li><li>Bulk. cheaper and takes longer.</li></ol><p>Economical, put data in Glacier is cheap and high durable.</p><p>Deep Archive. The cheapest and longest. normally 6-12 hours. Do not access data frequently, 2-3 times a year.</p><h3 id="ebs-elastic-block-storage"><a class="markdownIt-Anchor" href="#ebs-elastic-block-storage"></a> EBS (Elastic Block Storage)</h3><p>Attached to EC2 instances.</p><p>Multi-Attach, storage volumn can be attached to up to 16 instances. Instances must be in same availability zone.</p><p>Data is Replicated to multiple availbility zones. high availability and durability</p><p>Access control.</p><ol><li>Provisioned IOPS SSD</li><li>Standard Purpose IOPS SSD</li><li>Cold HDD</li><li>Thoughput optimized HDD</li></ol><p>Snapshots: a snapshots of a storage in that time and can be shared to other zones.</p><p>Elastic volumes. pay for what actually stored.</p><h3 id="efs"><a class="markdownIt-Anchor" href="#efs"></a> EFS</h3><ol><li>General Purpose</li><li>MAX I/O</li></ol><p>Same example as before. Migrating to AWS storage. It is one of the web applications. It requires global access. Data will be collected from clinical trials. And some data will be entered on daliy basis.</p><p>They need shared access of data.</p><p>Data must be durable.</p><p>Data will be stored in a long term basis.</p><p>S3 and Glacier: high durable. Access from ECS containers. Multiple access. Long term storage.</p><p>New application. Provide medical devices to people who need it. Global user base.</p><p>Lower cost. Local access. Non-critical images(could be lost, no big problem).</p><p>S3: single region. Reduced Redundancy Storage(RRD).</p><h2 id="part-four-examing-database-performance-options"><a class="markdownIt-Anchor" href="#part-four-examing-database-performance-options"></a> <a href="#title" title="Part 4">Part Four: Examing Database Performance Options</a></h2><h3 id="install-on-ec2"><a class="markdownIt-Anchor" href="#install-on-ec2"></a> Install on EC2</h3><p>we could choose to install a Database on a EC2 instance. But that means we need to do all the backup, restore ourselves. We are not using the serverless managed services provided by AWS. But in some cases, we have to choose this way. Situations like: 1. Control Environment. we want to control everything. 2. Certified. Maybe the services in AWS are not certified by the customer. 3. Specific tools. Our application needs some tools that have to work with standalone database.</p><ol><li>RDS</li><li>DynamoDB</li><li>Redshift</li></ol><h3 id="rds"><a class="markdownIt-Anchor" href="#rds"></a> RDS</h3><p>Default choice. Complex queries. Consistent transactions.</p><ol><li><p>Multi-AZ</p></li><li><p>Read replicas</p></li><li><p>Encryption</p></li><li><p>Backups and snapshots</p></li><li><p>Instance type</p></li><li><p>Storage type</p></li><li><p>Network setup</p></li><li><p>Backup</p></li></ol><h3 id="dynamodb"><a class="markdownIt-Anchor" href="#dynamodb"></a> DynamoDB</h3><p>Flexible structure</p><ol><li>Flexible structure</li><li>Less complex queries: You are able to query on particular keys, the partition key and any secondary keys that you define. Can’t join tables.</li><li>Low latency</li><li>Transactions</li><li>Global tables: store data in multiple regions</li><li>Encryption</li><li>Evolving schema: supports changes and growth in your application(add/remove columns…)</li><li>Integration with Lambda</li></ol><p>Partition key: store data on different nodes of the database</p><p>Secondary indexes</p><p>Provisioned capacity: number of reads and writes. Dynamodb will auto scale</p><p>on-demand capacity: pay for what you use. No auto scaling.</p><h3 id="redshift"><a class="markdownIt-Anchor" href="#redshift"></a> Redshift</h3><p>Large scale analytics</p><p>Setup in minutes</p><p>Warehouse and data lake</p><ol><li>Encryption</li><li>Scale to petabytes</li><li>Query S3</li><li>Economical</li></ol><p>Node type</p><ol><li>Dense compute: fast CPUs, large RAM and SSD for fast performance</li><li>Dense storage</li></ol><p>Same example as before.</p><p>They want to have minimum effort to do the migration</p><p>They want to leverage managed services</p><p>Improve availability</p><p>They have decided to use RDS. Using SQL server. Structured data. No servers to manage. High availability</p><p>New application.</p><p>DynamoDB. Flexible data structure(NoSQL). Trigger action(Lambda integration). Flexible cost structure(On-demand pricing). Global tables.</p><h2 id="part-five-evaluating-network-performance-options"><a class="markdownIt-Anchor" href="#part-five-evaluating-network-performance-options"></a> <a href="#title" title="Part 5">Part Five: Evaluating Network Performance Options</a></h2><h3 id="region-and-az"><a class="markdownIt-Anchor" href="#region-and-az"></a> Region and AZ</h3><p>Regions are geographical area. One region may have multiple AZs that are also isolated to each other.</p><p>While the AZs are isolated geographically, they are connected by AWS that allows data to be transferred between each zones.</p><h4 id="local-zones"><a class="markdownIt-Anchor" href="#local-zones"></a> Local Zones</h4><p>Some users still think the regions provided by AWS have high latency. They can choose to use local zones. They are built in large cities and connected to near by regions with low latency, high throughput connectivity. Local zones don’t have all the services provided by AWS as normal AZs.</p><p>Why do we choose one region over another?</p><ol><li>Laws and Regulations: e.g. Some governments required that any data of their citizens remain in their countries</li><li>User location: put application closer to your end users.</li><li>Data location</li><li>Cost</li></ol><h3 id="cloudfront"><a class="markdownIt-Anchor" href="#cloudfront"></a> CloudFront</h3><p>Global network: CloudFront is outside of AWS regions, that deliver our applications to end users</p><p>Content delivery: Similar to CDN</p><ol><li>Static content: static content is cached to the place closer to end users to reduce latency</li><li>Dynamic content: AWS also supported Dynamic content (intelligent caching)</li><li>Intelligent: you can setup geo-restrictions to not allow edge content to deliver content to certain geo-locations</li><li>Programmable: Lambda at edge: create serverless functions at edge locations. Put compute power closer to your end users.</li></ol><h3 id="route53"><a class="markdownIt-Anchor" href="#route53"></a> Route53</h3><p>DNS solution for AWS: translate a user-friendly URL to the IP address</p><p>Private DNS: Route53 supports private DNS, you can setup friendly names for your internal services</p><h4 id="traffic-flow"><a class="markdownIt-Anchor" href="#traffic-flow"></a> Traffic flow</h4><p>If you deploy your solution to multiple regions, you can config so that your users only send requests to their regions.</p><ol><li>Latency routing: Traffic flow will determine the region that will be serving the content with the least latency</li><li>Geographic routing: route users to the cloest region.</li><li>Health based routing: not route users to a region that with unhealthy status.</li><li>Round robin routing: route user to the next region available. Route traffic evenly to all regions.</li></ol><h3 id="direct-connect"><a class="markdownIt-Anchor" href="#direct-connect"></a> Direct Connect</h3><p>Instead of going through public internet, AWS will create a dedicated line for users to connect from AWS to your data center. It is encrypted and you can config the speed.</p><h3 id="vpc-endpoints"><a class="markdownIt-Anchor" href="#vpc-endpoints"></a> VPC endpoints</h3><p>Normally, if your VPC wants to connect to other AWS services, it can only go through public internet, but with VPC endpoints, it can connect to other AWS services directly through the private internet AWS network</p><h3 id="ec2-instance-types"><a class="markdownIt-Anchor" href="#ec2-instance-types"></a> EC2 instance types</h3><p>some EC2 instance types have better internet performance than others. Pay attention to it before you launch the EC2 instance. Choose the type that suitable for your applications.</p><h3 id="apply-our-knowledge"><a class="markdownIt-Anchor" href="#apply-our-knowledge"></a> Apply our knowledge</h3><p>They want their application to be deployed in a single region but to multiple AZs. They use AWS ECS(elastic container service) to manage their application. And use AWS Fargate to manage their containers. They also choose to use Multi-AZ RDS for their DB. They also want their Data to be stored in S3. So they want a VPC endpoint for S3 to reduce latency. So when they want to access data in S3. they don’t need to go through public internet.</p><p>They also have a new application that they want to have a friendly domain name. Reduced latency and managed cost. So they have decided to use Route53. because the application is hosted on S3 buckets. They need to register domain names for each S3 bucket. And configure Route 53 to route traffic to right S3 bucket using their domain names. They also want to have a global portal that has links to each deployed regions.</p><h2 id="part-six-preparing-to-improve-your-architecture"><a class="markdownIt-Anchor" href="#part-six-preparing-to-improve-your-architecture"></a> <a href="#title" title="Part 6">Part Six: Preparing to Improve Your Architecture</a></h2><h3 id="cicd-pipeline-continuous-integration-continuous-deployment"><a class="markdownIt-Anchor" href="#cicd-pipeline-continuous-integration-continuous-deployment"></a> CI/CD pipeline (Continuous Integration/ Continuous Deployment)</h3><p>We need to have repeatable builds, repeatable infrastructrue and Controlled tests</p><p><img src="/../images/AWS-SAA-Architecting-For-Performance-Efficiency/1.png" alt="" /></p><h3 id="cloudformation"><a class="markdownIt-Anchor" href="#cloudformation"></a> CloudFormation</h3><ol><li>Infrastructure template(JSON or YAML)</li><li>Automate creation</li><li>Ensure consistency</li></ol><h3 id="cloudformation-templates"><a class="markdownIt-Anchor" href="#cloudformation-templates"></a> CloudFormation templates</h3><p><img src="/../images/AWS-SAA-Architecting-For-Performance-Efficiency/2.png" alt="" /><br /><img src="/../images/AWS-SAA-Architecting-For-Performance-Efficiency/3.png" alt="" /><br /><img src="/../images/AWS-SAA-Architecting-For-Performance-Efficiency/4.png" alt="" /></p><ol><li>Format version</li><li>Description</li><li>Parameters</li><li>Resources</li><li>Output</li></ol><h2 id="part-seven-monitoring-your-architecture"><a class="markdownIt-Anchor" href="#part-seven-monitoring-your-architecture"></a> <a href="#title" title="Part 7">Part Seven: Monitoring Your Architecture</a></h2><h3 id="monitor"><a class="markdownIt-Anchor" href="#monitor"></a> Monitor</h3><ol><li>Resources</li><li>Application</li><li>Operations</li></ol><h3 id="respond"><a class="markdownIt-Anchor" href="#respond"></a> Respond</h3><ol><li>Ignore</li><li>Manually</li><li>Automate</li><li>Modify</li></ol><h3 id="cloudwatch"><a class="markdownIt-Anchor" href="#cloudwatch"></a> CloudWatch</h3><p>Metrics</p><ol><li>Application</li><li>Infrastructure</li><li>AWS or on-premises</li></ol><p>Actions: Autoscaling.</p><p>Actions: Messages</p><p>Actions: Lambda functions can be triggered from CloudWatch</p><p>Analytics: CloudWatch can store months of histoical data for you to analyse</p><h3 id="create-a-log-to-delete-s3-object"><a class="markdownIt-Anchor" href="#create-a-log-to-delete-s3-object"></a> Create a log to delete S3 object</h3><ol><li>Create CloudTrail Trail</li><li>Create Lambda function</li><li>Create CloudWatch Rule</li></ol><p>Create a CloudTrail Trail</p><p><img src="/../images/AWS-SAA-Architecting-For-Performance-Efficiency/5.png" alt="" /></p><p>Create a Lambda function</p><p><img src="/../images/AWS-SAA-Architecting-For-Performance-Efficiency/6.png" alt="" /></p><p>Create CloudWatch Rule</p><p><img src="/../images/AWS-SAA-Architecting-For-Performance-Efficiency/7.png" alt="" /></p><h2 id="part-eight-understanding-the-trade-offs"><a class="markdownIt-Anchor" href="#part-eight-understanding-the-trade-offs"></a> <a href="#title" title="Part 8">Part Eight: Understanding the Trade-offs</a></h2><ol><li>Time</li><li>Cost</li><li>Memory</li><li>Efficiency</li><li>Complexity</li></ol><h3 id="possible-trade-offs"><a class="markdownIt-Anchor" href="#possible-trade-offs"></a> Possible Trade-offs</h3><ol><li>Queuing</li><li>Partitioning</li><li>Caching</li><li>Compression</li></ol><h3 id="queuing"><a class="markdownIt-Anchor" href="#queuing"></a> Queuing</h3><p>AWS SQS (simple queuing service)</p><ol><li>Decouple (producer, consumer)</li><li>Scale independently (add producer or delete consumer)</li><li>Acceptable delay</li><li>Time vs Efficiency</li></ol><h3 id="data-paritioning"><a class="markdownIt-Anchor" href="#data-paritioning"></a> Data Paritioning</h3><p>For example: RDBMS doesn’t have partition. so we need to consider what data goes into which instance of database, that increase complexity. Whereas many NoSQL DB already has partition. In DynamoDB, we have partition key for each table. The data that has the same partition key will go into the same node. So when choose a partition key, choose a key that roughly evenly distributed across the data.</p><ol><li>Complexity / consistency vs Time</li><li>RDBMS vs NoSQL</li><li>Distribution</li><li>Maintenance</li></ol><h3 id="caching"><a class="markdownIt-Anchor" href="#caching"></a> Caching</h3><p>Cache: heavliy used data will be stored in memory.</p><p>Read Replics: if you have a read replica of your DB, users can go into read replica if they only read. Reduce the traffic of your primary server.</p><p>CDN: take data and store data closer to users place.</p><p>Memory/ consistency vs Time</p><h3 id="compression"><a class="markdownIt-Anchor" href="#compression"></a> Compression</h3><ol><li>Code assets: reduce the size of source code to reduce the time to load the application</li><li>Files: same. redurce the size of file will reduce the transfer time</li><li>Time vs memory</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> AWS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React Overview</title>
      <link href="2021/03/16/React-Overview/"/>
      <url>2021/03/16/React-Overview/</url>
      
        <content type="html"><![CDATA[<h2 id="setting-up-a-development-environment"><a class="markdownIt-Anchor" href="#setting-up-a-development-environment"></a> Setting up a Development Environment</h2><ol><li>Create folder and package.json file</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir diy-react</span><br><span class="line">cd diy-react</span><br><span class="line">npm init --y</span><br></pre></td></tr></table></figure><h3 id="install-main-dependencies"><a class="markdownIt-Anchor" href="#install-main-dependencies"></a> Install Main Dependencies</h3><ol start="2"><li>Install Express</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i express</span><br></pre></td></tr></table></figure><ol start="3"><li>Install React and React-dom</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i react react-dom</span><br></pre></td></tr></table></figure><ol start="4"><li>Install webpack</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i webpack webpack-cli</span><br></pre></td></tr></table></figure><p>Webpack is a module bunlder. A react application usually contains multiple modules and depends on many external modules too. When we ship the application to the browser we need to bundle all necessary files into a single bundle and ship it to the browser.</p><ol start="5"><li>Install Babel</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i babel-loader @babel&#x2F;core @babel&#x2F;node @babel&#x2F;preset-env @babel&#x2F;preset-react</span><br></pre></td></tr></table></figure><p>Babel is the package that compiles JSX into regular React API calls.</p><h3 id="install-development-dependencies"><a class="markdownIt-Anchor" href="#install-development-dependencies"></a> Install Development Dependencies</h3><ol start="6"><li>Install nodemon</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D nodemon</span><br></pre></td></tr></table></figure><p>nodemon is a package that lets us automatically restart node when we change things in node.</p><ol start="7"><li>Install ESLint</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D eslint babel-eslint eslint-plugin-react eslint-plugin-react-hooks</span><br></pre></td></tr></table></figure><p>ESLint will immediately analyze your code and tell you the problems, you can have consistent styling to your code by using ESLint.</p><ol start="8"><li>Configure ESLint</li></ol><p>Go to your project directory, create a new file called ‘.eslintrc.js’ and paste the below code.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">    parser: &#39;babel-eslint&#39;,</span><br><span class="line">    env: &#123;</span><br><span class="line">      browser: true,</span><br><span class="line">      commonjs: true,</span><br><span class="line">      es6: true,</span><br><span class="line">      node: true,</span><br><span class="line">      jest: true,</span><br><span class="line">    &#125;,</span><br><span class="line">    parserOptions: &#123;</span><br><span class="line">      ecmaVersion: 2020,</span><br><span class="line">      ecmaFeatures: &#123;</span><br><span class="line">        impliedStrict: true,</span><br><span class="line">        jsx: true,</span><br><span class="line">      &#125;,</span><br><span class="line">      sourceType: &#39;module&#39;,</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [&#39;react&#39;, &#39;react-hooks&#39;],</span><br><span class="line">    extends: [</span><br><span class="line">      &#39;eslint:recommended&#39;,</span><br><span class="line">      &#39;plugin:react&#x2F;recommended&#39;,</span><br><span class="line">      &#39;plugin:react-hooks&#x2F;recommended&#39;,</span><br><span class="line">    ],</span><br><span class="line">    settings: &#123;</span><br><span class="line">      react: &#123;</span><br><span class="line">        version: &#39;detect&#39;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    rules: &#123;</span><br><span class="line">      &#x2F;&#x2F; You can do your customizations here...</span><br><span class="line">      &#x2F;&#x2F; For example, if you don&#39;t want to use the prop-types package,</span><br><span class="line">      &#x2F;&#x2F; you can turn off that recommended rule with: &#39;react&#x2F;prop-types&#39;: [&#39;off&#39;]</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure><ol start="9"><li>Configure Jest</li></ol><p>jest is the package to test React applications</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D jest babel-jest react-test-renderer</span><br></pre></td></tr></table></figure><ol start="10"><li>Basic React application structure</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">diy-react&#x2F;</span><br><span class="line">  dist&#x2F;</span><br><span class="line">    main.js</span><br><span class="line">  src&#x2F;</span><br><span class="line">    index.js</span><br><span class="line">    components&#x2F;</span><br><span class="line">      App.js</span><br><span class="line">    server&#x2F;</span><br><span class="line">      server.js</span><br></pre></td></tr></table></figure><p>dist: for distribution, webpack will put production-ready files to here<br />src: for React code files<br />components: for React components<br />server: for server files</p><ol start="11"><li>Configure Webpack and Babel</li></ol><p>Under project root directory, create a new file called ‘babel.config.js’ and paste the below code</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  presets: [&#39;@babel&#x2F;preset-env&#39;, &#39;@babel&#x2F;preset-react&#39;],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Under project root directory, create a new file called ‘webpack.config.js’ and paste the below code<br />This will tell webpack to invoke babel for all files that end with .js. This is to convert JSX code to regular React API calls.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  module: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: &#x2F;\.js$&#x2F;,</span><br><span class="line">        exclude: &#x2F;node_modules&#x2F;,</span><br><span class="line">        use: &#123;</span><br><span class="line">          loader: &#39;babel-loader&#39;,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="12"><li>Create npm scripts for development</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;dev:server&quot;: &quot;nodemon --exec .&#x2F;node_modules&#x2F;.bin&#x2F;babel-node src&#x2F;server&#x2F;server.js --ignore dist&#x2F;&quot;,</span><br></pre></td></tr></table></figure><p>This script will run nodemon command, which is run babel-node on a server.js file</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;dev:bundler&quot;: &quot;webpack -w --mode&#x3D;development&quot;</span><br></pre></td></tr></table></figure><p>This script will run the webpack command, in Watch mode(readable code, not minified) and in development node</p><h3 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference</h3><ol><li><a href="https://jscomplete.com/learn/1rd-reactful">Setting up React Development Environment</a></li></ol><hr /><ul><li><p>For Angular, Vue and Ember they put fake JS in HTML. Whereas React put fake HTML in JS (JSX), React is Javascript-centric, makes JS more powerful to handle HTML</p></li><li><p>React is lightweighted, you can slowly migrate your app from other technologies to React</p></li><li><p>React is lean and you only import the package you want to use.</p></li><li><p>React is one way data binding, it required more code, you need to expilictly declare a change handler. But this gives you more control and east to debug</p></li></ul><h2 id="the-basics"><a class="markdownIt-Anchor" href="#the-basics"></a> The Basics</h2><h3 id="reacts-basic-concepts"><a class="markdownIt-Anchor" href="#reacts-basic-concepts"></a> React’s Basic Concepts</h3><h4 id="components"><a class="markdownIt-Anchor" href="#components"></a> Components</h4><ul><li>Like functions</li><li>Input: props, state | Output: UI</li><li>Reusable and composable</li><li>Can be used as normal HTML tags <code>&lt;Component /&gt;</code></li><li>Can manage a private state</li></ul><h4 id="reactive-updates"><a class="markdownIt-Anchor" href="#reactive-updates"></a> Reactive updates</h4><ul><li>When the state of a React component, the input, changes, the user interface it represents, the output, changes as well</li></ul><h4 id="virtual-views-in-memory"><a class="markdownIt-Anchor" href="#virtual-views-in-memory"></a> Virtual views in memory</h4><ul><li>We don’t write HTML when building applications using React. We generate HTML using Javascript</li><li>Build smaller components such as buttons, forms, then build more complex components using the smaller components. Each component consist of HTML and JS.</li></ul><h2 id="tradeoffs"><a class="markdownIt-Anchor" href="#tradeoffs"></a> Tradeoffs</h2><h3 id="framework-vs-library"><a class="markdownIt-Anchor" href="#framework-vs-library"></a> Framework vs Library</h3><ul><li>Frameworks offer more opinion and standardization, but React’s library approach allows you to select only the tools that you need and pick the best tools for your use case.</li></ul><h3 id="data-binding"><a class="markdownIt-Anchor" href="#data-binding"></a> Data Binding</h3><ul><li>Other frameworks strive to be concise, using techniques like two‑way binding and abstractions over JavaScript operations. But React is explicit, so code is more readable and scalable at the admitted expense of doing a little more typing on the keyboard.</li></ul><h3 id="js-centric"><a class="markdownIt-Anchor" href="#js-centric"></a> JS Centric</h3><ul><li>React chooses to be JavaScript‑centric instead of template‑centric. React’s JavaScript‑centric approach is easier to understand and debug and requires learning less unique syntax, but at the cost of requiring modern JavaScript knowledge.</li></ul><h3 id="separate-vs-single-file"><a class="markdownIt-Anchor" href="#separate-vs-single-file"></a> Separate vs Single File</h3><ul><li>Many frameworks utilize a separate template file. In contrast, each React component is a single autonomous file that you can work with and test in isolation.</li></ul><h3 id="standard-vs-non-standard"><a class="markdownIt-Anchor" href="#standard-vs-non-standard"></a> Standard vs Non-standard</h3><ul><li>The web component standard has been around for years, yet it continues to lack broad adoption. Non‑standard approaches, like React and Angular, remain more popular because they offer the same power, more rapid innovation, and a superior developer experience.</li></ul><h3 id="community-vs-corporate"><a class="markdownIt-Anchor" href="#community-vs-corporate"></a> Community vs Corporate</h3><ul><li>And React is corporate‑backed, which means its design is influenced by Facebook’s needs. But Facebook continues to accept input from the community and has evolved React into a highly flexible and well‑supported system.</li></ul><h2 id="decisions-to-make"><a class="markdownIt-Anchor" href="#decisions-to-make"></a> Decisions to make</h2><ol><li>Develop environment - create-react-app</li><li>Classes or Functions - Functions</li><li>Types - PropTypes, TypeScript, Flow</li></ol><ul><li>TypeScript is a superset of JavaScript that adds strong typing support and compiles down to plain JavaScript</li><li>Flow: adding static type checking to JavaScrWipt</li></ul><ol start="4"><li>States - Plain React, Flux, Redux, MobX</li></ol><ul><li>Component State: Plain React</li><li>Centralized State: Flux, Redux</li><li>Observable State: MobX</li></ul><ol start="5"><li>Styling - Plain CSS/Sass/Less, CSS in JS<br />W</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ASP.NET Core with SignalR</title>
      <link href="2021/03/11/ASP-NET-Core-with-SignalR/"/>
      <url>2021/03/11/ASP-NET-Core-with-SignalR/</url>
      
        <content type="html"><![CDATA[<h2 id="understanding-the-real-time-web"><a class="markdownIt-Anchor" href="#understanding-the-real-time-web"></a> Understanding the Real-time Web</h2><h3 id="polling"><a class="markdownIt-Anchor" href="#polling"></a> Polling</h3><ul><li>Clients periodically ask the server if there’s an update. For each poll, a HTTP request is made, and the server either responds with a new status or 204 No Content</li></ul><h3 id="long-polling"><a class="markdownIt-Anchor" href="#long-polling"></a> Long Polling</h3><ul><li><p>Clients send HTTP request to the server. But the server will not complete the request but leave it until there’s an update. When there’s no update within a certain timeframe, the request will time out. When that happens, the client will just start the process again by issuing a new request.</p></li><li><p>Long Polling is more efficient than polling, but it is still using HTTP requests to ask for updates.</p></li></ul><h3 id="server-sent-events-sse"><a class="markdownIt-Anchor" href="#server-sent-events-sse"></a> Server Sent Events (SSE)</h3><ul><li><p>a HTML5 feature, the server creats an HTTP connection to the client(browser) with Server Sent Events. The browser will listen for messages that will come in as a stream. The connection will remain open until it is actively closed.</p></li><li><p>The browser will use an object called EventSource that has an event onmessage to process incoming messages.</p></li></ul><ol><li>Using simple HTTP</li><li>Auto reconnects</li><li>No support for older browsers</li><li>Easily polyfilled</li><li>Maximum HTTP connections issue (6 connections at most)</li><li>Only support text messages</li><li>One-way connection</li></ol><h3 id="web-sockets"><a class="markdownIt-Anchor" href="#web-sockets"></a> Web Sockets</h3><ul><li><p>A standardized way to use one TCP socket through which messages can be sent from server to client and vice versa and without the latency of HTTP.</p></li><li><p>A TCP socket typically remains open for as long as the stream of the messages are not done.</p></li><li><p>SignalR will use WebSockets most of the time because its the most efficient transport.</p></li></ul><ol><li>Full duplex messaging (client to server and vice versa)</li><li>No 6 connections limit</li><li>For most browsers, the connection limit for web sockets is about 50 connections</li><li>Multi data type support (text, binary)</li><li>TCP socket upgrade (Regular HTTP request uses a TCP socket as well)</li></ol><ul><li><p>The WebSockets standards uses a handshake mechanism to upgrade an existing socket used for HTTP traffic to a WebSocket. After that, messages can travel through the socket until the socket is actively closed. When closing, a reason for closing is communicated.</p></li><li><p>Every WebScoket starts its life as a simple HTTP socket, A GET HTTP call is made to the server, requesting an upgrade of the socket. If the server agrees, the socket becomes a WebSocket from that point onwards.</p></li></ul><h2 id="signalr"><a class="markdownIt-Anchor" href="#signalr"></a> SignalR</h2><ul><li>SignalR is an open source framework that wraps the complexity of real-time web transports. You don’t need to worry about the lower level transports like long polling, Server Sent Event or WebSockets.</li></ul><h3 id="transports"><a class="markdownIt-Anchor" href="#transports"></a> Transports</h3><ul><li>WebSockets, Server Sent Events, Long Polling</li><li>Requires client and server that supports transport</li><li>Fallback mechanism (if browser doesn’t support WebSocket, then use SSE instead, etc…)</li></ul><h3 id="remote-procedure-call-rpc"><a class="markdownIt-Anchor" href="#remote-procedure-call-rpc"></a> Remote Procedure Call (RPC)</h3><ul><li>Server can call a function in the Client and vice versa</li></ul><h3 id="hub"><a class="markdownIt-Anchor" href="#hub"></a> Hub</h3><ul><li>A hub is a server-side class that sends messages to and receives messages from clients by utilizing RPC.</li></ul><p><img src="/../images/ASP-NET-Core-with-SignalR/1.png" alt="" /></p><ul><li>A hub protocol is a format used to serialize parameters to and deserialize parameters from</li></ul><h3 id="differences-with-classic-signalr"><a class="markdownIt-Anchor" href="#differences-with-classic-signalr"></a> Differences with Classic SignalR</h3><ul><li>Simplified connection model</li><li>Single hub per connection</li><li>Async</li><li>Binary and custom protocols</li><li>No jQuery dependency for JavaScript client</li><li>Sticky session required</li></ul><h3 id="scaling-out"><a class="markdownIt-Anchor" href="#scaling-out"></a> Scaling Out</h3><ul><li>Running on muiltiple servers</li><li>Load Balancer picks server</li><li>Problem with non-WebSockets transport, it could send the first request to the first server, then send the second request to the second server, who doesn’t know anything about the context of the message.</li></ul><p><img src="/../images/ASP-NET-Core-with-SignalR/2.png" alt="" /></p><ul><li>We could solve this problem by using sticky sessions.</li><li>As part of the response of the first request, the load balancer sets a cookie in the browser, indicating the server that was used. On subsequent request, the load balancer then reads the cookie and assigns the request to the same server. (IIS using Application Request Routing Affinity (ARR Affinity))</li></ul><p><img src="/../images/ASP-NET-Core-with-SignalR/3.png" alt="" /></p><ul><li><p>Another problem, let’s say a user is working on a web document using Office 365, and she invites others to join her, the other might end up at another server. When user 1 on the server changes the document, a message has to be sent to the others, but server 1 doesn’t know about users that are connected to hubs in other servers.</p></li><li><p>To solve this, the servers need a way to share data. This can be done using a Database, but a faster alternative would be to use a Redis cache.</p></li></ul><p><img src="/../images/ASP-NET-Core-with-SignalR/4.png" alt="" /></p>]]></content>
      
      
      
        <tags>
            
            <tag> ASP.NET Core </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ASP.NET Core Fundamentals</title>
      <link href="2021/03/07/ASP-NET-Core-Fundamentals/"/>
      <url>2021/03/07/ASP-NET-Core-Fundamentals/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> ASP.NET Core </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C# Fundamentals</title>
      <link href="2021/03/04/C-Fundamentals/"/>
      <url>2021/03/04/C-Fundamentals/</url>
      
        <content type="html"><![CDATA[<h2 id="dotnet-cli"><a class="markdownIt-Anchor" href="#dotnet-cli"></a> dotnet CLI</h2><ul><li>Create new dotnet project</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dotnet new console</span><br><span class="line">dotnet new xunit</span><br></pre></td></tr></table></figure><ul><li>Add unget package</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet add package xunit --version 2.4.1</span><br></pre></td></tr></table></figure><ul><li>Add reference to another project in .csproj file</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet add reference projectName.csproj</span><br></pre></td></tr></table></figure><ul><li>Run unit test project</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet test</span><br></pre></td></tr></table></figure><ul><li>Run main project</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet run</span><br></pre></td></tr></table></figure><ul><li>Create solution file to include all projects</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet new sln</span><br></pre></td></tr></table></figure><ul><li>Add project into the solution file</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet sln add PathToProjectFile.csproj</span><br></pre></td></tr></table></figure><ul><li>Build all project in solution</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet build</span><br></pre></td></tr></table></figure><ul><li><p>C# passes variables by value unless you use keyword e.g. ref, out</p></li><li><p>C# has garbage collector</p></li></ul><h3 id="auto-property"><a class="markdownIt-Anchor" href="#auto-property"></a> Auto property</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public string Name &#123;</span><br><span class="line">    get &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line">    set &#123;</span><br><span class="line">        name &#x3D; value</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>This code can be simplified to</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public string Name &#123; get; set; &#125;</span><br></pre></td></tr></table></figure><ul><li>difference between auto property and field</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public string Name &#123;get; set;&#125;</span><br><span class="line"></span><br><span class="line">public string Name;</span><br></pre></td></tr></table></figure><ul><li>You can specify custom code in getter and setter functions.</li><li>When serialize objects, fields may not be counted.</li></ul><h3 id="readonly"><a class="markdownIt-Anchor" href="#readonly"></a> readonly</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">readonly public string category;</span><br></pre></td></tr></table></figure><ul><li>readonly can only be assigned in constructor.</li></ul><h3 id="const"><a class="markdownIt-Anchor" href="#const"></a> const</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const public string CATEGORY</span><br></pre></td></tr></table></figure><ul><li>const is more strict than readonly, you can’t assign it in constructor, it is not a variable. Once you initialized it, you can’t change its value. And when you access it. You can access it from the class name, not the object name. Because every object instance will have the same value for this const. So its better to access it from the class. Its more clear.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; Book is a class</span><br><span class="line">&#x2F;&#x2F; CATEGORY is a const in Book</span><br><span class="line">&#x2F;&#x2F; Category is a readonly field in Book</span><br><span class="line">Console.WriteLine(Book.CATEGORY); &#x2F;&#x2F; const</span><br><span class="line"></span><br><span class="line">var book1 &#x3D; new Book();</span><br><span class="line">Console.WriteLine(book1.Category); &#x2F;&#x2F; readonly field</span><br></pre></td></tr></table></figure><h3 id="delegate"><a class="markdownIt-Anchor" href="#delegate"></a> Delegate</h3><ul><li>A delegate is a type that represents references to methods with a particular parameter list and return type. When you instantiate a delegate, you can associate its instance with any method with a compatible signature and return type. You can invoke (or call) the method through the delegate instance.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public delegate string WriteLogDelegate (string logMessage);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; reference the main project to the test project in .csproj</span><br><span class="line">public class TypeTests</span><br><span class="line">&#123;</span><br><span class="line">    [Fact]</span><br><span class="line">    public void WriteLogDelegateCanPointToMethod() &#123;</span><br><span class="line">        WriteLogDelegate log &#x3D; new WriteLogDelegate(ReturnMessage);</span><br><span class="line"></span><br><span class="line">        var result &#x3D; log(&quot;Hello!&quot;);</span><br><span class="line">        Assert.Equal(&quot;Hello!&quot;, result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private string ReturnMessage(string message) &#123;</span><br><span class="line">        return message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="multi-cast-delegate"><a class="markdownIt-Anchor" href="#multi-cast-delegate"></a> Multi-Cast Delegate</h3><ul><li>One delegate variable can points to multiple methods, and by invoking that delegate variable, all subscribed methods will be invoked too</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">public delegate string WriteLogDelegate (string logMessage);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; reference the main project to the test project in .csproj</span><br><span class="line">public class TypeTests</span><br><span class="line">&#123;</span><br><span class="line">    int count &#x3D; 0;</span><br><span class="line"></span><br><span class="line">    [Fact]</span><br><span class="line">    public void WriteLogDelegateCanPointToMethod() &#123;</span><br><span class="line">        WriteLogDelegate log &#x3D; new WriteLogDelegate(ReturnMessage);</span><br><span class="line">        log +&#x3D; IncrementCounter;</span><br><span class="line"></span><br><span class="line">        var result &#x3D; log(&quot;Hello!&quot;);</span><br><span class="line">        Assert.Equal(2, count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private string ReturnMessage(string message) &#123;</span><br><span class="line">        count++;</span><br><span class="line">        return message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private string IncrementCounter(string message) &#123;</span><br><span class="line">        count++;</span><br><span class="line">        return message.Tolower();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="event"><a class="markdownIt-Anchor" href="#event"></a> Event</h3><ul><li>Sometimes after we have done someting, we want to broadcast it to all people that are interested. The broadcast delegate usually takes two parameters, the object sender and EventArgs. object is the base type in C#, all types and classes can be fitted into object.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public delegate void GradeAddedDelegate(object sender, EventArgs eventArgs);</span><br><span class="line"></span><br><span class="line">public class Book &#123;</span><br><span class="line">    public event GradeAddedDelegate GradeAdded;</span><br><span class="line"></span><br><span class="line">    public void AddGrade(double grade) &#123;</span><br><span class="line">        if (grade &lt;&#x3D; 100 &amp;&amp; grade &gt;&#x3D; 0) &#123;</span><br><span class="line">            grades.Add(grade);</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; broadcast</span><br><span class="line">            &#x2F;&#x2F; if GradeAdded is null, then no one is listening to this event</span><br><span class="line">            &#x2F;&#x2F; so there is no need to invoke the delegate.</span><br><span class="line">            if (GradeAdded !&#x3D; null) &#123;</span><br><span class="line">                GradeAdded(this, new EventArgs())</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            throw new ArgumentException($&quot;Invalid &#123;nameof(grade)&#125;&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>In program.cs where we are trying to use this Book object</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class Program</span><br><span class="line">&#123;</span><br><span class="line">    static void Main(string[] args)</span><br><span class="line">    &#123;</span><br><span class="line">        var book &#x3D; new Book(&quot;Yuan&#39;s Grade Book&quot;);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; add OnGradeAdded to this delegate</span><br><span class="line">        book.GradeAdded +&#x3D; OnGradeAdded;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    static void OnGradeAdded(object sender, EventArgs e) &#123;</span><br><span class="line">        Console.WriteLine($&quot;A grade was added.&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="oop"><a class="markdownIt-Anchor" href="#oop"></a> OOP</h2><h3 id="inheritance"><a class="markdownIt-Anchor" href="#inheritance"></a> Inheritance</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">public class NamedObject &#123;</span><br><span class="line">    &#x2F;&#x2F; Name field</span><br><span class="line">    public string Name &#123;get; set;&#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; constructor</span><br><span class="line">    public NamedObject(string name) &#123;</span><br><span class="line">        Name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; inherit from NamedObject base class</span><br><span class="line">public class BookBase : NamedObject &#123;</span><br><span class="line">    public BookBase(string name) : base(name) &#123;</span><br><span class="line">        Name &#x3D; name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public Program clas &#123;</span><br><span class="line">    static void Main(string[] args)</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; when you create a new instance of Book</span><br><span class="line">        &#x2F;&#x2F; you assign the new name Book 1 to Book class</span><br><span class="line">        &#x2F;&#x2F; Book class will pass the same name to its base class</span><br><span class="line">        Book book1 &#x3D; new Book(&quot;Book 1&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>When you want to use some attributes or functions from a base class, instead of rewrite the code, you can inherit the base class. The constructor of the child class will also need to pass in the variable to its base class</li></ul><h3 id="polymophism"><a class="markdownIt-Anchor" href="#polymophism"></a> Polymophism</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public abstract class BookBase : NamedObject &#123;</span><br><span class="line">    public BookBase (string name) : base(name) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    public abstract void AddGrade(double grade);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>The abstract modifier indicates that the thing being modified has a missing or incomplete implementation. And it will be implemented by its child class. Child class who inherit the base class will need to add an override keyword to implement the abstract function</p></li><li><p>Base class can have different implementations of it. A Car base class may have Truck and Sport Car as its children class and they have some same base field and functions but also many different.</p></li></ul><h3 id="interface"><a class="markdownIt-Anchor" href="#interface"></a> Interface</h3><ul><li>Where abstract may content actual implementation of some field and functions (some is missing). The Interface class doesn’t have any implementations.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">namespace GradeBook</span><br><span class="line">&#123;</span><br><span class="line">    public interface IBook</span><br><span class="line">    &#123;</span><br><span class="line">        void AddGrade(double grade);</span><br><span class="line">        string Name &#123;get;&#125;</span><br><span class="line">        event GradeAddedDelegate GradeAdded;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="virtual"><a class="markdownIt-Anchor" href="#virtual"></a> Virtual</h3><ul><li>For base class, there may be some functions that already have an implementation. But Virtual keyword meaning its children class may choose to override it.</li></ul><h3 id="difference-between-virtual-and-abstract"><a class="markdownIt-Anchor" href="#difference-between-virtual-and-abstract"></a> Difference between Virtual and Abstract</h3><ul><li><p>Virtual methods have an implementation and provide the derived classes with the option of overriding it. Abstract methods do not provide an implementation and force the derived classes to override the method.</p></li><li><p>So, abstract methods have no actual code in them, and subclasses HAVE TO override the method. Virtual methods can have code, which is usually a default implementation of something, and any subclasses CAN override the method using the override modifier and provide a custom implementation.</p></li></ul><h3 id="using"><a class="markdownIt-Anchor" href="#using"></a> using</h3><ul><li>When we are writing text to file, we need to open the file and close it after finish. But if the program crashes when we editing the file, we will leave the file open. One thing we can do is to use the try catch block to catch the exception and close the file finally. C# has a short keyword for this purpose, the using keyword. It will call Dispose() function in IDisposable -&gt; TextWriter -&gt; StreamWriter to free up the memory and close the file.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">using (var writer &#x3D; File.AppendText($&quot;&#123;Name&#125;.txt&quot;))</span><br><span class="line">&#123;</span><br><span class="line">    writer.WriteLine(grade);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AWS SAA - Design Cost-Optimized Architectures</title>
      <link href="2021/02/28/AWS-SAA-Design-Cost-Optimized-Architectures/"/>
      <url>2021/02/28/AWS-SAA-Design-Cost-Optimized-Architectures/</url>
      
        <content type="html"><![CDATA[<ol><li><a href="#part-one-understanding-cost-effective-storage-in-aws">Part One: Understanding Cost Effective Storage in AWS</a></li><li><a href="#part-two-understanding-cost-effective-compute-in-aws">Part Two: Understanding Cost Effective Compute in AWS</a></li><li><a href="#part-three-understanding-database-pricing-and-cost-optimization">Part Three: Understanding Database Pricing and Cost Optimization</a></li><li><a href="#part-Four-understanding-cost-optimized-network-architectures">Part Four: Understanding Cost Optimized Network Architectures</a></li><li><a href="#part-five-making-cost-optimized-decisions">Part Five: Making Cost-optimized Decisions</a></li></ol><h2 id="part-one-understanding-cost-effective-storage-in-aws"><a class="markdownIt-Anchor" href="#part-one-understanding-cost-effective-storage-in-aws"></a> Part One: Understanding Cost Effective Storage in AWS</h2><h3 id="globomantics"><a class="markdownIt-Anchor" href="#globomantics"></a> Globomantics</h3><ul><li>Global health care organization</li><li>Been using AWS for some time</li><li>Most core service such as EC2, RDS, S3 etc.</li><li>We have been asked to<ul><li>identify solutions that will help reduce costs</li><li>maintain the same level of service and availability</li></ul></li></ul><h3 id="module-overview"><a class="markdownIt-Anchor" href="#module-overview"></a> Module Overview</h3><ol><li>S3<ul><li>Using S3 storage classes to reduce costs</li></ul></li><li>S3 glacier<ul><li>When to use S3 glacier and S3 glacier heep archieve</li></ul></li><li>EBS storage<ul><li>EBS pricing points and storage options</li></ul></li></ol><h3 id="s3-storage-classes"><a class="markdownIt-Anchor" href="#s3-storage-classes"></a> S3 Storage Classes</h3><ol><li>Influences availability, durability and cost for objects stored in S3</li><li>Applied at an object level, each S3 bucket can host objects with different classes</li><li>An objects storage class can be changed throughout its lifetime</li><li>Using the wrong storage class will lead to unnecessary spending</li></ol><ul><li>Standard: Charged based on object size</li><li>Standard - IA: Charged based on object size and retrieval</li><li>One Zone - IA: Stores objects in a single AZ</li><li>S3 Glacier: Used as an additional S3 storage class</li><li>Intelligent - Tiering: Transitions objects between classes based on their access frequencies</li></ul><h4 id="lifecycle-rules"><a class="markdownIt-Anchor" href="#lifecycle-rules"></a> Lifecycle rules</h4><ul><li>Use lifecycle rules to transition objects between classes and expire objects</li></ul><h4 id="caching"><a class="markdownIt-Anchor" href="#caching"></a> Caching</h4><ul><li>Downloading objects cost money, use caching to avoid unnecessary downloads and reduce S3 costs</li></ul><h4 id="globomantics-requirements"><a class="markdownIt-Anchor" href="#globomantics-requirements"></a> Globomantics Requirements</h4><ul><li>Use an appropriate storage class for each object</li><li>Avoid one zone -IA as it reduces availability (store data we can reproduce in OZ - IA)</li><li>Use lifecycle rules<ul><li>Transition to standard - IA</li><li>Transition to S3 Glacier</li><li>Expire objects(delete)</li></ul></li></ul><h3 id="s3-glacier-and-deep-archive"><a class="markdownIt-Anchor" href="#s3-glacier-and-deep-archive"></a> S3 Glacier and Deep Archive</h3><h4 id="globomantics-requirements-2"><a class="markdownIt-Anchor" href="#globomantics-requirements-2"></a> Globomantics Requirements</h4><ul><li>Need to store some data long term for compliance</li><li>Data must be stored for at least 10 years</li><li>Meet the following requirements<ul><li>Stored as cheaply as possible</li><li>Still be highly durable and available</li><li>Must be secure</li><li>Data won’t be needed again except for compliance requests</li></ul></li></ul><h4 id="s3-glacier"><a class="markdownIt-Anchor" href="#s3-glacier"></a> S3 Glacier</h4><ul><li>Long term archival storage</li><li>Two classes S3 Glacier and Deep Archive</li><li>Using S3 glacier we can retrieve archives in minutes</li><li>Using S3 glacier deep archive we can retrieve data within 12 hours</li></ul><ul><li>Data in S3 glacier are not available to you. You need to request a retrival.</li></ul><h4 id="comparing-storage-costs"><a class="markdownIt-Anchor" href="#comparing-storage-costs"></a> Comparing Storage Costs</h4><ul><li>S3 Standard - 10TB - eu-west-1 $245.64</li><li>S3 Glacier - 10TB - eu-west-1 $46.08</li><li>S3 Glacier Deep Archive - 10TB - eu-west-1 $18.44</li></ul><h3 id="ebs-storage"><a class="markdownIt-Anchor" href="#ebs-storage"></a> EBS Storage</h3><ul><li>Block storage for EC2 virtual machines</li><li>Persistent storage of up to 16TB per disk</li><li>SSD backed and HDD backed volumes</li><li>Provisioned storage priced at a GB per month rate</li></ul><ul><li>You are charged for the entire volume as soon as you created it. You can create a smaller EBS than increase it when you need it in the future</li></ul><h4 id="options"><a class="markdownIt-Anchor" href="#options"></a> Options</h4><ol><li>Cold HDD volumes, $0.025 per GB per month</li><li>Throughput optimized HDD volumes, $0.045 per GB per month</li><li>General purpose SSD volumes, $0.10 per GB per month</li><li>Provisioned IOPS SSD volumes, $0.125 per GB per month and $0.065 per provisioned IOPS per month</li></ol><h4 id="ebs-snapshots"><a class="markdownIt-Anchor" href="#ebs-snapshots"></a> EBS Snapshots</h4><ul><li>Snapshots consist of the used space in an EBS volume not the provisioned space</li><li>Charged on a per GB per month basis</li><li>Additional cost for EBS fast snapshot restore</li></ul><ul><li>If you have a 1000 GB provisioned EBS and only used 100 GB space, when you create a snapshot of this EBS, you will only be charged of 100 GB.</li></ul><h3 id="summary"><a class="markdownIt-Anchor" href="#summary"></a> Summary</h3><ol><li>Use S3 storage classes to reduce costs</li><li>Use S3 Glacier and its role in reducing costs</li><li>EBS storage pricing</li></ol><h2 id="part-two-understanding-cost-effective-compute-in-aws"><a class="markdownIt-Anchor" href="#part-two-understanding-cost-effective-compute-in-aws"></a> Part Two: Understanding Cost Effective Compute in AWS</h2><h3 id="module-overview-2"><a class="markdownIt-Anchor" href="#module-overview-2"></a> Module Overview</h3><ol><li>Discuss EC2 payment types</li><li>Discuss right sizing EC2 to optimize costs</li><li>Introduce cost benefits of serverless compute</li></ol><h3 id="pricing-points"><a class="markdownIt-Anchor" href="#pricing-points"></a> Pricing points</h3><ol><li>EC2 instance uptime</li><li>EBS storage</li><li>Data transfer out</li></ol><h3 id="instance-types"><a class="markdownIt-Anchor" href="#instance-types"></a> Instance types</h3><h4 id="on-demand-instances"><a class="markdownIt-Anchor" href="#on-demand-instances"></a> On Demand instances</h4><ul><li>Charged by the hour or second (minimum 60 seconds)</li><li>No upfront commitment, billed when instances are in a running state</li><li>Great when you want uninterrupted compute</li></ul><h4 id="reserved-instances"><a class="markdownIt-Anchor" href="#reserved-instances"></a> Reserved Instances</h4><ul><li>1-year or 3-year commitment</li><li>pay all, parital or no upront (the more you pay upfront, the bigger discount you will get)</li><li>Convertible RIs available</li><li>Capacity reservation with Zonal RIs</li><li>Instance size flexibility</li><li>Up to 72% saving</li></ul><h4 id="spot-instances"><a class="markdownIt-Anchor" href="#spot-instances"></a> Spot Instances</h4><ul><li>You are biding on unused capacity in an AZ</li><li>If your bid is higher than the spot price you pay the lower amount</li><li>Spot, Spot fleets (multiple machines, only launch when all of them can be launched at the same time), and spot blocks (multiple machines, only launch them when they can be running for a certain peroid of time) are available</li><li>When you loose the spot bid<ul><li>2-minute warning (to transfer your data)</li><li>instance terminate/hibernate/stop depend on your choice</li></ul></li></ul><h4 id="in-addition"><a class="markdownIt-Anchor" href="#in-addition"></a> In addition</h4><ul><li>Scheduled reserved instance: Useful if you are only running your instance periodically</li><li>Savings plans: Alternative to reserved instances, useful if you have mixed EC2 instance, AWS fargate and AWS lambda</li></ul><h3 id="globomantics-requirements-3"><a class="markdownIt-Anchor" href="#globomantics-requirements-3"></a> Globomantics Requirements</h3><ul><li>Use a minture of EC2 instances sizes and types</li><li>Currently only on-demand instance type used</li><li>EC2 instance characteristic<ul><li>Some instances run 24/7 and are expected to do so for at least 1 year (reserved instances with 1-year commitment)</li><li>Some instances are brought online for 48 hours every week to run weeekly batch jobs (scheduled reserved instances)</li><li>Other instances are brought online as needed to run short processes that must be completed within 2 hours (on-demand or spot block)</li></ul></li></ul><ul><li>Note using spot block you might need to wait for some time (when your bid is higher) before your instances can be launched</li></ul><h3 id="right-sizing-ec2-to-optimize-costs"><a class="markdownIt-Anchor" href="#right-sizing-ec2-to-optimize-costs"></a> Right Sizing EC2 to Optimize Costs</h3><ul><li>Eight instance familes: Groups of instances such as general purpose, compute optimized and memory optimized</li><li>Instance sizes: Each family has a range of instance sizes that offer different combinations of resources</li></ul><h4 id="burstable-and-fixed-performance-instances"><a class="markdownIt-Anchor" href="#burstable-and-fixed-performance-instances"></a> Burstable and Fixed performance instances</h4><ul><li>Fixed performance (e.g. M5) offers fixed compute</li><li>Burstable performance (e.g. T3) provide a baseline level of CPU (e.g. 20%) with the ability to burst above the baseline.</li><li>Standard and unlimited: For burstable instances, if you are not using your CPU, you will get tokens(credit) which you can use later when you need extra CPU power. For Standard, your compute power will reduce to original when you use up your tokens. For unlimited, you will be charged the on-demand price for the compute power but can still use the extra CPU power for as long as you need.</li></ul><h4 id="tools-for-right-ec2-sizing"><a class="markdownIt-Anchor" href="#tools-for-right-ec2-sizing"></a> Tools for Right EC2 Sizing</h4><ul><li>Amazon CloudWatch: Monitor CPU, network throughput, disk I/O</li><li>AWS Cost Explorer: Monitor your spending and view resource optimization recommendations</li><li>AWS Trusted Advisor: Best practice advice including advice on reduing costs</li></ul><h4 id="aws-serverless-platform"><a class="markdownIt-Anchor" href="#aws-serverless-platform"></a> AWS Serverless Platform</h4><ul><li>Compute: AWS lambda, AWS fargate</li><li>Storage: S3</li><li>Data Stores: DynamoDB, Aurora</li><li>API Proxy: Amazon API Gateway</li><li>Integration: Amazon SNS, Amazon SQS</li></ul><p><strong>Benefits of Serverless Compute</strong></p><ul><li>No server management: No need to provision administer or maintain EC2 instance</li><li>Flexible scaling: Scale automatically without downtime by adjusting capacity</li><li>High availability: Built for automated high availability and fault tolerance</li></ul><h4 id="globomantics-requirements-4"><a class="markdownIt-Anchor" href="#globomantics-requirements-4"></a> Globomantics Requirements</h4><ul><li>Deployed a 2-tier customer facing web application to AWS</li><li>Deployed using EC2 and RDS MySQL</li><li>Interested to know how this application would be deployed using serverless services?</li><li>Would there be cost benefits?</li></ul><p><img src="/../images/AWS-SAA-Design-Cost-Optimized-Architectures/1.png" alt="" /></p><h3 id="summary-2"><a class="markdownIt-Anchor" href="#summary-2"></a> Summary</h3><ol><li>Discussed different ways to pay for EC2</li><li>Demonstrated EC2 savings plans</li><li>Discussed right sizing of EC2</li><li>Discussed how serverless compute can help reduce costs</li></ol><h2 id="part-three-understanding-database-pricing-and-cost-optimization"><a class="markdownIt-Anchor" href="#part-three-understanding-database-pricing-and-cost-optimization"></a> Part Three: Understanding Database Pricing and Cost-optimization</h2><h3 id="module-overview-3"><a class="markdownIt-Anchor" href="#module-overview-3"></a> Module Overview</h3><ul><li>Discuss RDS Pricing</li><li>Discuss DynamoDB Pricing</li></ul><h3 id="rds-pricing-points"><a class="markdownIt-Anchor" href="#rds-pricing-points"></a> RDS Pricing Points</h3><ol><li>Instance type and size</li><li>Database storage</li><li>Data transfer out between AZs and between regions</li><li>Backup storage</li></ol><h4 id="amazon-rds-instance-types"><a class="markdownIt-Anchor" href="#amazon-rds-instance-types"></a> Amazon RDS Instance Types</h4><ol><li>General purpose: Including M4 and M5, good balance between computer memory and network resources</li><li>Memory optimized: Including R4 and R5, designed for memory-intensive database workloads</li><li>Burstable performance: Offering a baseline level of CPU with the ability to burst above the baseline</li></ol><h4 id="rds-payment-options"><a class="markdownIt-Anchor" href="#rds-payment-options"></a> RDS Payment Options</h4><ol><li>On-Demand: Pay as you go, no upfront payments</li><li>Reserved instances: 1-year or 3-year commitment for up to 69% saving</li></ol><h4 id="rds-storage"><a class="markdownIt-Anchor" href="#rds-storage"></a> RDS Storage</h4><ol><li>General purpose SSD: From 20GB to 64GB prices at a $ per GB per month</li><li>Provisioned IOPS SSD: Priced on a $ per GB per month plus $ per IOPS per month</li><li>Magnetic storage: Cheapest storage, not recommended for new deployments</li></ol><h3 id="amazon-aurora"><a class="markdownIt-Anchor" href="#amazon-aurora"></a> Amazon Aurora</h3><ol><li>Faster than MySQL and PostgreSQL</li><li>Offers additional features like Aurora serverless</li><li>Cheaper than both MySQL and PostgreSQL</li></ol><h3 id="dynamodb-pricing-points"><a class="markdownIt-Anchor" href="#dynamodb-pricing-points"></a> DynamoDB Pricing Points</h3><ol><li>On-demend: Charged foe the data reads and writes your application performs</li><li>Provisioned capacity: You buy the read and write capacity units that you need for your application</li></ol><h4 id="dynamodb-capacity-units"><a class="markdownIt-Anchor" href="#dynamodb-capacity-units"></a> DynamoDB Capacity Units</h4><ol><li>WCU(Write Capacity Units)<ul><li>Each WCU is equivalent to one 1KB write per second.</li><li>e.g. If each of your record is 10KB, and you need to write 5 records per second, then you need 50 WCU</li></ul></li><li>RCU(Read Capacity Units)<ul><li>Eventual &lt; Strongly &lt; transactional consistency</li><li>Each RCU is equivalent to one 4KB strongly consistent read per second.</li><li>Each RCU is equivalent to two 4KB eventual consistent read per second</li><li>Each RCU is equivalent to 0.5 transactional consistent read per second</li></ul></li></ol><ul><li>DynamoDB auto scaling: Dynamically adjusts provisioned throughput in response to traffic patterns</li><li>Reserved capacity: Purchase RCUs and WCUs with a 1-year or 3-year commitment at a reduced rate</li></ul><h4 id="additional-dynamodb-costs"><a class="markdownIt-Anchor" href="#additional-dynamodb-costs"></a> Additional DynamoDB Costs</h4><ul><li>Global secondary indexes need their own capacity units</li><li>Global DynamoDB tables will need additional capacity units</li><li>DynamoDB backups will increase costs</li></ul><h3 id="summary-3"><a class="markdownIt-Anchor" href="#summary-3"></a> Summary</h3><ul><li>Discussed RDS pricing options</li><li>Discussed DynamoDB pricing options</li></ul><h2 id="part-four-understanding-cost-optimized-network-architectures"><a class="markdownIt-Anchor" href="#part-four-understanding-cost-optimized-network-architectures"></a> Part Four: Understanding Cost-optimized Network Architectures</h2><h3 id="module-overview-4"><a class="markdownIt-Anchor" href="#module-overview-4"></a> Module Overview</h3><ul><li>Discuss using ELB and Auto Scale to reduce costs</li><li>Discuss VPC routing and hybrid connectivity cost decisions</li><li>Discuss using offloading to reduce costs</li></ul><h3 id="elb-and-auto-scaling"><a class="markdownIt-Anchor" href="#elb-and-auto-scaling"></a> ELB and Auto Scaling</h3><h4 id="globomantics-requirements-5"><a class="markdownIt-Anchor" href="#globomantics-requirements-5"></a> Globomantics Requirements</h4><ol><li>Deployed a 3-tier customer facing web application to AWS</li><li>Deployed using EC2 and RDS MySQL</li><li>Peak time for the application is Friday and Saturday where up to two times the amount of compute is needed</li></ol><p><img src="/../images/AWS-SAA-Design-Cost-Optimized-Architectures/2.png" alt="" /></p><ol><li>Right size the EC2 instances and RDS instances</li><li>Introduce EC2 auto scale for the web and app tier</li><li>Introduce load balancing for the app tier</li></ol><p><img src="/../images/AWS-SAA-Design-Cost-Optimized-Architectures/3.png" alt="" /></p><h4 id="auto-scaling-saves-money"><a class="markdownIt-Anchor" href="#auto-scaling-saves-money"></a> Auto Scaling Saves Money</h4><ol><li>With auto scaling we design for the normal</li><li>Auto scaling leads to better cost management</li><li>Integrate with load balancing to make use of launched instance</li><li>Using min and max values allow us to better predict costs</li></ol><h3 id="vpc-routing-and-hybrid-connectivity-decisions"><a class="markdownIt-Anchor" href="#vpc-routing-and-hybrid-connectivity-decisions"></a> VPC Routing and Hybrid Connectivity Decisions</h3><h4 id="globalmantics-requirements"><a class="markdownIt-Anchor" href="#globalmantics-requirements"></a> Globalmantics Requirements</h4><ol><li>Connect Globalmantics HQ and smaller regional offices to their AWS deployed VPC</li><li>Connect resources in their AWS deployed VPC to S3</li><li>Connect Globalmantics application VPC to a VPC that contains monitoring servers</li><li>Cost is a major factor, all designs should balance performance, funcationality and cost</li></ol><p><img src="/../images/AWS-SAA-Design-Cost-Optimized-Architectures/4.png" alt="" /></p><ol><li>For connecting HQ to AWS VPC, we can use Direct connect or site-to-site VPN, Direct connect will give us better performance but more expensive.</li><li>For connecting Branch offices to AWS VPC, site-to-site VPN should be good enough considering offices are small.</li><li>For connecting Application VPC to Monitoring VPC, we could use VPC peering, it will only charge us for data transfer. The others options are: Transit Gateway and site-to-site VPNs (more expensive).</li><li>For connecting Application VPC to S3, we could use VPC endpoints. Other option is to use public gateway but that is less secure(need to go through public internet).</li></ol><h4 id="aws-connectivity"><a class="markdownIt-Anchor" href="#aws-connectivity"></a> AWS Connectivity</h4><ul><li>Keep as much traffic as possible on the AWS backbone</li><li>Consider using Direct Connect hosted connections</li><li>Use AWS services to reduce development and management costs</li><li>Balance performance, functionality and cost</li></ul><h3 id="offloading-with-cloudfront"><a class="markdownIt-Anchor" href="#offloading-with-cloudfront"></a> Offloading with CloudFront</h3><h4 id="how-can-deploying-a-additional-technology-like-cloudfront-reduce-costs"><a class="markdownIt-Anchor" href="#how-can-deploying-a-additional-technology-like-cloudfront-reduce-costs"></a> How can deploying a additional technology like CloudFront reduce costs?</h4><ul><li>S3 charges a retrieval fee per GB and fees based on the type of request</li><li>CloudFront charges a retrieval fee and a fee for HTTP or HTTPS requests</li><li>CloudFront fees are cheaper than S3 fees</li><li>Serving content from CloudFront can be cheaper then serving content from S3</li></ul><p><img src="/../images/AWS-SAA-Design-Cost-Optimized-Architectures/5.png" alt="" /></p><h3 id="summary-4"><a class="markdownIt-Anchor" href="#summary-4"></a> Summary</h3><ul><li>Learned how ELB and auto scale can help reduce costs</li><li>Discussed VPC routing and hybrid connectivity options</li><li>Learned how offloading can help reduce costs</li></ul><h2 id="part-five-making-cost-optimized-decisions"><a class="markdownIt-Anchor" href="#part-five-making-cost-optimized-decisions"></a> Part Five: Making Cost-optimized Decisions</h2><h3 id="overview"><a class="markdownIt-Anchor" href="#overview"></a> Overview</h3><ul><li>Discuss factors that can affect costs</li><li>Work with AWS tools to monitor and estimate costs</li></ul><h4 id="some-factors-that-can-affect-cost"><a class="markdownIt-Anchor" href="#some-factors-that-can-affect-cost"></a> Some factors that can affect cost</h4><ul><li>AWS region and zone: Resource are priced per-region and per-availability zone</li><li>EC2 size and type: Instance type and size will have a big impact on the cost of your compute</li><li>S3 storage class: Choose the correct class for the objects you are storing</li></ul><h4 id="tips-to-help-save-money-in-aws"><a class="markdownIt-Anchor" href="#tips-to-help-save-money-in-aws"></a> Tips to Help Save Money in AWS</h4><ul><li>EC2 Payment: Use the correct payment model</li><li>Databases: Use reservation for RDS and DynamoDB</li><li>Tag Everything: Introduce and effective tagging policy</li><li>Intriduce SCPs(Service Control Policy): Use SCPs to restrict available features</li><li>Monitor everything: Use all the monitoring tools available to you</li><li>AutoScale: Implement AutoScale to avoid planning for peak</li><li>Offloading: Use offloading in your architectures (CloudFront, ElasticCache, RDS Read Replicas)</li><li>Turn things off: Shutdown and delete resources that you are not using</li></ul><h2 id="course-summary"><a class="markdownIt-Anchor" href="#course-summary"></a> Course Summary</h2><h3 id="storage-and-compute"><a class="markdownIt-Anchor" href="#storage-and-compute"></a> Storage and Compute</h3><ol><li>S3 Storage classes</li><li>S3 lifecycle rules</li><li>EBS storage options</li><li>EC2 pricing</li><li>EC2 right sizing</li><li>Serverless compute</li></ol><h3 id="databases-and-networks"><a class="markdownIt-Anchor" href="#databases-and-networks"></a> Databases and networks</h3><ol><li>RDS pricing and optimization</li><li>DynamoDB pricing and optimization</li><li>Cost optimized networks<ul><li>ELB and autoscale</li><li>Hybrid connectivity</li><li>VPC connectivity</li><li>Offloading with CloudFront</li></ul></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> AWS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java Learning Path</title>
      <link href="2021/02/21/Java-Learning-Path/"/>
      <url>2021/02/21/Java-Learning-Path/</url>
      
        <content type="html"><![CDATA[<h1 id="入坑java开发的学习之路"><a class="markdownIt-Anchor" href="#入坑java开发的学习之路"></a> 入坑Java开发的学习之路</h1><h2 id="基础知识"><a class="markdownIt-Anchor" href="#基础知识"></a> 基础知识</h2><ul><li>编程语言： Java Python C</li><li>基本算法</li><li>基本网络知识： TCP/IP HTTP HTTPS</li><li>基本设计模式</li></ul><hr /><h2 id="工具方面"><a class="markdownIt-Anchor" href="#工具方面"></a> 工具方面</h2><ul><li>操作系统： Linux (CentOS/Ubuntu…)</li><li>代码管理： SVN / Git</li><li>持续集成(CI/CD): Jenkins</li><li>Java项目管理工具： Maven / Gradle</li></ul><hr /><h2 id="框架方面"><a class="markdownIt-Anchor" href="#框架方面"></a> 框架方面</h2><h4 id="应用层框架"><a class="markdownIt-Anchor" href="#应用层框架"></a> 应用层框架</h4><ul><li><s>ssh: spring + structs + hibernate</s></li><li>ssm: spring + spring mvc + mybatis</li><li>spring boot</li></ul><h4 id="中间件"><a class="markdownIt-Anchor" href="#中间件"></a> 中间件</h4><ul><li>MQ 消息队列</li><li>RPC 通信框架 gRPC thrift dubbo spring cloud</li><li>Elasticsearch 数据库 搜索引擎</li></ul><h4 id="数据库"><a class="markdownIt-Anchor" href="#数据库"></a> 数据库</h4><ul><li>SQL: MySQL / Postgre SQL</li><li>NoSQL: Redis Memcached mongoDB elasticsearch</li></ul><hr /><h2 id="架构方面"><a class="markdownIt-Anchor" href="#架构方面"></a> 架构方面</h2><h4 id="分布式微服务架构"><a class="markdownIt-Anchor" href="#分布式微服务架构"></a> 分布式/微服务架构</h4><ul><li>spring cloud</li><li>dubbo</li><li>RPC通信</li></ul><h4 id="虚拟化容器化"><a class="markdownIt-Anchor" href="#虚拟化容器化"></a> 虚拟化/容器化</h4><ul><li>Docker</li><li>k8s kubernetes</li></ul><hr /><h2 id="关注源码性能"><a class="markdownIt-Anchor" href="#关注源码性能"></a> 关注源码/性能</h2><ul><li>JDK源码以及部分设计思想</li><li>Spring源码</li><li>JVM 细节与排错</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AWS SAA - Design Secure Applications and Architectures</title>
      <link href="2021/02/15/AWS-SAA-Design-Secure-Applications-and-Architectures/"/>
      <url>2021/02/15/AWS-SAA-Design-Secure-Applications-and-Architectures/</url>
      
        <content type="html"><![CDATA[<ol><li><a href="#part-one-protecting-aws-credentials">Part One: Protecting AWS Credentials</a></li><li><a href="#part-two-capturing-and-analyzing-logs">Part Two: Capturing and Analyzing Logs</a></li><li><a href="#part-three-protecting-network-and-host-level-boundaries">Part Three: Protecting Network and Host-level Boundaries</a></li><li><a href="#part-four-protecting-data-at-rest">Part Four: Protecting Data at Rest</a></li><li><a href="#part-five-protecting-data-in-transit">Part Five: Protecting Data in Transit</a></li><li><a href="#part-six-configuring-data-backup-replication-and-recovery">Part Six: Configuring Data Backup, Replication, and Recovery</a></li></ol><h2 id="part-one-protecting-aws-credentials"><a class="markdownIt-Anchor" href="#part-one-protecting-aws-credentials"></a> Part One: Protecting AWS Credentials</h2><ul><li>Security is about protecting data.</li></ul><h3 id="the-cia-triad"><a class="markdownIt-Anchor" href="#the-cia-triad"></a> The CIA Triad</h3><ul><li>Confidentiality</li><li>Integrity</li><li>Availability</li></ul><ul><li><p>Confidentiality: Only authorized parties can access data. (ACLs and encryption)</p></li><li><p>Integrity: Data has not been improperly modified. Includes knowing if data has been modified.</p></li><li><p>Availability: Authorized parties have access to data when they need it. Includes protecting systems that store, process, and deliver data.</p></li><li><p>Defense in depth: Protecting the confidentiality, integrity, and availability of data by securing everything that touches the data, including storage, compute and networking</p></li><li><p>Levels of Architecture: AWS services, Operating systems, Applications</p></li></ul><h3 id="aws-credentials"><a class="markdownIt-Anchor" href="#aws-credentials"></a> AWS Credentials</h3><ul><li><p>Root User: Full access to all AWS resources. Only one root user per account.</p></li><li><p>IAM principal: Any entity(could be a user or an application) that can perform actions on AWS services and resources. Policies determine what permissions a principal has</p></li><li><p>Locking down the Root user: Enable MFA. Don’t use the root user for administrative tasks. Use a non-root IAM user with administrative permissions</p></li><li><p>IAM Principal: The foundation of IAM. An entity that can take an action on an AWS service. Often used as a synonym for identity. Principles include users and roles</p></li><li><p>A non-root principal has no permissions by default. Policies determine what permission a principal has</p></li><li><p>You must grant permissions to a principal by associating it with a policy.</p></li><li><p>Policy and Permission: A policy consists of multiple permission statements. A permission statement consists of 4 elements.</p></li></ul><ol><li>Effect (allow or deny)</li><li>Service (etc: EC2)</li><li>Action/Operation (RunInstances)</li><li>Resource (image/ami-fjdfjfsdk)</li><li>Request condition(MFA, IP range, time…) (198.51.100.0/24)</li></ol><ul><li>This permission will allow a principal to run an EC2 instance with certain AMI, when it is in certain IP range.</li><li>AWS managed policies: AWS has many managed policies created for us to use. (they are updated regularly to include new services)</li><li>The deny effect always takes precedence over the allow effect (deny &gt; allow)</li></ul><p><img src="/../images/AWS-SAA-Design-Secure-Applications-and-Architectures/1.png" alt="" /></p><ul><li>We can create inline policy for a user to deny he’s access to terminate any EC2 instances.</li></ul><p><img src="/../images/AWS-SAA-Design-Secure-Applications-and-Architectures/2.png" alt="" /></p><ul><li>This is the JSON representation of the policy</li></ul><p><img src="/../images/AWS-SAA-Design-Secure-Applications-and-Architectures/3.png" alt="" /></p><ul><li>We could use policy simulator to check the effectiveness of the policy.</li><li>We could also create inline policy for a group.</li></ul><h3 id="summary"><a class="markdownIt-Anchor" href="#summary"></a> Summary</h3><ol><li>Implement MFA for the root user</li><li>User an administrative user instead of root user</li><li>AWS managed policies are updated as new services and actions are added</li><li>A policy permission consists of an effect, service, action/operation and resource</li><li>A user policy is an inline policy embedded in a user</li><li>A group policy is embedded in a group</li><li>Customer Managed policies work like AWS managed policies, but are created and managed by you</li></ol><h2 id="part-two-capturing-and-analyzing-logs"><a class="markdownIt-Anchor" href="#part-two-capturing-and-analyzing-logs"></a> Part Two: Capturing and Analyzing Logs</h2><h3 id="module-overview"><a class="markdownIt-Anchor" href="#module-overview"></a> Module Overview</h3><ol><li>Capturing events with CloudTrail</li><li>Viewing Logs with CloudWatch Logs</li><li>Creating alerts with CloudWatch Alarms</li><li>Searching logs with Athena</li><li>Tracking changes with AWS config</li></ol><ul><li>CloudTrail logs are stored in S3. Limit what you log to control costs</li></ul><h3 id="cloudtrail-event-types"><a class="markdownIt-Anchor" href="#cloudtrail-event-types"></a> CloudTrail event types</h3><ul><li><p>Management: Configuration changes to AWS services. Reading resources. Logging into the management console. Assuming a role.</p></li><li><p>Data: Access to S3 objects. Lambda function execution</p></li><li><p>CloudTrail: Logs AWS actions. Stores logs in S3</p></li><li><p>CloudWatch Logs: Aggregates logs from CloudTrail and non-AWS sources. Provides interface to view and search logs</p></li></ul><h3 id="create-iam-service-role"><a class="markdownIt-Anchor" href="#create-iam-service-role"></a> Create IAM service role</h3><ul><li>Contains inline service policy that grants CloudTrail permissions to send logs to CloudWatch Logs</li><li>Contains trust policy that allows CloudTrail to assume the role</li><li>Role is an IAM principal for CloudTrail to use to authenticate to CloudWatch Logs</li></ul><h3 id="demo"><a class="markdownIt-Anchor" href="#demo"></a> Demo</h3><p><img src="/../images/AWS-SAA-Design-Secure-Applications-and-Architectures/4.png" alt="" /></p><p><img src="/../images/AWS-SAA-Design-Secure-Applications-and-Architectures/5.png" alt="" /></p><h4 id="create-a-log-group-in-cloudwatch-logs"><a class="markdownIt-Anchor" href="#create-a-log-group-in-cloudwatch-logs"></a> Create a log group in CloudWatch Logs</h4><ul><li>Create an IAM role for CloudTrail to assume. The Role will have two permission statements. It can create log streams and it can put the log into CloudWatch Log groups.</li></ul><p><img src="/../images/AWS-SAA-Design-Secure-Applications-and-Architectures/6.png" alt="" /></p><p><img src="/../images/AWS-SAA-Design-Secure-Applications-and-Architectures/7.png" alt="" /></p><ul><li>The CloudTrail and the Role have a trusted relationship. If we have a look at the JSON policy. It will allow CloudTrail to assume the Role. The Role will give its permissions to CloudTrail.</li></ul><p><img src="/../images/AWS-SAA-Design-Secure-Applications-and-Architectures/8.png" alt="" /></p><p><img src="/../images/AWS-SAA-Design-Secure-Applications-and-Architectures/9.png" alt="" /></p><ul><li>Create CloudWatch Alarm we need to select a metric, in this case, IncomingLogEvents. We define the alarm so that it triggers the alarm if CloudTrail send more than 1 log to CloudWatch Logs within 1 minute period of time.</li></ul><p><img src="/../images/AWS-SAA-Design-Secure-Applications-and-Architectures/10.png" alt="" /></p><ul><li>We also created new topic with an email address so I will get notified if this happens.</li></ul><p><img src="/../images/AWS-SAA-Design-Secure-Applications-and-Architectures/11.png" alt="" /></p><ul><li>After the alarm has been created, the status is OK because we didn’t receive any logs in the last 1 minutes. And we treat missing logs as Good.</li></ul><p><img src="/../images/AWS-SAA-Design-Secure-Applications-and-Architectures/12.png" alt="" /></p><ul><li>When there is logs coming in, the status will be changed to In alarm for that 1 minute period and will be changed back to OK the next minute.</li><li>Notice the alarm logs are not in real time. There maybe a couple of minutes delay.</li></ul><h3 id="why-athena"><a class="markdownIt-Anchor" href="#why-athena"></a> Why Athena?</h3><ul><li><p>Maybe you don’t want to use CloudWatch Logs. You can use SQL like queries to search thought logs and all S3 objects. If the files are in correct format (e.g. csv, JSON, CloudTrail logs stored in S3 are in JSON format)</p></li><li><p>Athena usrs SQL, so to search files in s3, we need to provide the schema. AWS provides the schema for CloudTrail Logs</p></li></ul><h3 id="demo-2"><a class="markdownIt-Anchor" href="#demo-2"></a> Demo</h3><p><img src="/../images/AWS-SAA-Design-Secure-Applications-and-Architectures/13.png" alt="" /></p><p><img src="/../images/AWS-SAA-Design-Secure-Applications-and-Architectures/14.png" alt="" /></p><ul><li>Note you need to create a save location for the Athena search result in S3 before run the query.</li></ul><h3 id="tracking-configuration-changes-in-aws-config"><a class="markdownIt-Anchor" href="#tracking-configuration-changes-in-aws-config"></a> Tracking Configuration Changes in AWS Config</h3><ul><li>Tracks configuration changes over time.</li><li>AWS config can tell you the stats of all AWS services of any point of time in the past.</li><li>Records changes in S3.</li><li>Notifies of changes</li></ul><p><img src="/../images/AWS-SAA-Design-Secure-Applications-and-Architectures/15.png" alt="" /></p><h3 id="summary-2"><a class="markdownIt-Anchor" href="#summary-2"></a> Summary</h3><ul><li>CouldTrail tracks events</li><li>ClousdWatch Logs aggregates logs from different sources</li><li>CloudWatch Alarms trigger based on specific log activity</li><li>Athena performs SQL queries against objects in S3</li><li>AWS Config tracks configuration states over time</li></ul><h2 id="part-three-protecting-network-and-host-level-boundaries"><a class="markdownIt-Anchor" href="#part-three-protecting-network-and-host-level-boundaries"></a> Part Three: Protecting Network and Host-level Boundaries</h2><h3 id="tic-tac-toe-web-application"><a class="markdownIt-Anchor" href="#tic-tac-toe-web-application"></a> Tic-tac-toe web application</h3><p><img src="/../images/AWS-SAA-Design-Secure-Applications-and-Architectures/16.png" alt="" /></p><ul><li>Host-level boundary is the default security group between the public subnet and the EC2 instance(auto created).</li><li>NACL(netwoek access control list): controls traffic in and out the subnet</li><li>having both the security group and NACL gives you layers of security around your instance.</li><li>The game data stored in DynamoDB, to communicate with it, we have two options</li></ul><ol><li>We can go over the public internet via igw(internet gateway)</li><li>We can also use a VPC endpoint, which is a non-internet private connection</li></ol><h3 id="module-overview-2"><a class="markdownIt-Anchor" href="#module-overview-2"></a> Module Overview</h3><ol><li>Creating a public subnet</li><li>Creating and using an IAM instance profile</li><li>Using SSH key pairs</li><li>Using VPC endpoints</li><li>Network access control lists</li></ol><h3 id="demo-3"><a class="markdownIt-Anchor" href="#demo-3"></a> Demo</h3><ol><li>Create VPC</li><li>Create subnet</li><li>Create igw</li><li>Attach igw to VPC</li><li>Add routes in VPC’s main route table</li><li>Add VPC’s inbound rules</li><li>Create IAM role to allow access to DynamoDB</li><li>Role will contain a trust policy to allow EC2 instances to assume the role</li><li>Launch instance and attach instance profile</li></ol><p><img src="/../images/AWS-SAA-Design-Secure-Applications-and-Architectures/17.png" alt="" /></p><ul><li>Create VPC</li></ul><p><img src="/../images/AWS-SAA-Design-Secure-Applications-and-Architectures/18.png" alt="" /></p><ul><li>Create public subnet, we use the CIDR block the same as our VPC because we are only going to create one subnet for this VPC</li></ul><p><img src="/../images/AWS-SAA-Design-Secure-Applications-and-Architectures/19.png" alt="" /></p><ul><li>Create internet gateway</li></ul><p><img src="/../images/AWS-SAA-Design-Secure-Applications-and-Architectures/20.png" alt="" /></p><ul><li>Attach internet gateway to VPC</li></ul><p><img src="/../images/AWS-SAA-Design-Secure-Applications-and-Architectures/21.png" alt="" /></p><ul><li>Edit the main route table, add another record. Route all traffic to igw. By doing this we make our subnet a public subnet</li></ul><p><img src="/../images/AWS-SAA-Design-Secure-Applications-and-Architectures/22.png" alt="" /></p><ul><li>Add two inbound rules in our VPC’s default security group. Use my home IP as source. So only at my home can I access the VPC services by HTTP or SSH.</li></ul><p><img src="/../images/AWS-SAA-Design-Secure-Applications-and-Architectures/23.png" alt="" /></p><ul><li>Create IAM role to access DynamoDB</li></ul><p><img src="/../images/AWS-SAA-Design-Secure-Applications-and-Architectures/24.png" alt="" /></p><ul><li>Create a role and attach the policy to it. Because we choose EC2 as the service that will be using this role, the trusted entity is EC2. It also creates an instance profile for us.</li></ul><p><img src="/../images/AWS-SAA-Design-Secure-Applications-and-Architectures/25.png" alt="" /></p><ul><li>Create an EC2 instance</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh ec2-user@13.55.117.52 -i .\hellcyAWSkey.pem</span><br></pre></td></tr></table></figure><ul><li>Access EC2 instance via SSH</li><li>You need to go to your private key location (pem) and change the access level to 400(linux) or change the Owner to yourself and remove all other groups and users. <a href="https://superuser.com/questions/1296024/windows-ssh-permissions-for-private-key-are-too-open">Check here</a></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum -y install git python2-pip.noarch</span><br></pre></td></tr></table></figure><ul><li>install the app</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;benpiper&#x2F;dynamodb-tictactoe-example-app</span><br></pre></td></tr></table></figure><ul><li>clone the repo from github</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip install flask boto</span><br></pre></td></tr></table></figure><ul><li>install dependecies</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo python application.py</span><br></pre></td></tr></table></figure><p><img src="/../images/AWS-SAA-Design-Secure-Applications-and-Architectures/26.png" alt="" /></p><ul><li>cd to the application folder and run the app.</li><li>You can play the game with other people who logs in</li></ul><p><img src="/../images/AWS-SAA-Design-Secure-Applications-and-Architectures/27.png" alt="" /></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl 169.254.169.254&#x2F;latest&#x2F;meta-data&#x2F;iam&#x2F;security-credentials&#x2F;tic-tac-toe-app</span><br></pre></td></tr></table></figure><p><img src="/../images/AWS-SAA-Design-Secure-Applications-and-Architectures/28.png" alt="" /></p><ul><li>this is the secret token generated by AWS STS(Security Token Service) using instance profile(from the role) to allow our instance to access DynamoDB.</li></ul><h3 id="using-vpc-endpoints"><a class="markdownIt-Anchor" href="#using-vpc-endpoints"></a> Using VPC Endpoints</h3><ul><li>Now we are going to change our traffic to go through a private link via VPC endpoint.</li></ul><h3 id="demo-4"><a class="markdownIt-Anchor" href="#demo-4"></a> Demo</h3><ol><li>Block outbound internet access from the instance</li><li>Configure VPC endpoint</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nslookup dynamodb.ap-southeast-2.amazonaws.com</span><br></pre></td></tr></table></figure><ul><li>look up the ip address of DynamoDB at our current AWS region</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo netstat -tp | grep python</span><br></pre></td></tr></table></figure><ul><li>check outbound connection from our EC2 instance to DynamoDB. Note our application needs to be running for this to work.</li></ul><p><img src="/../images/AWS-SAA-Design-Secure-Applications-and-Architectures/29.png" alt="" /></p><h4 id="create-vpc-endpoint"><a class="markdownIt-Anchor" href="#create-vpc-endpoint"></a> Create VPC Endpoint</h4><ul><li>New route rules will be added to the route table. This is to change the traffic sent to the DynamoDB from the private VPC endpint instead of the public igw</li><li>Note it is required to create a policy for this VPC endpoint. The policy controls what the requests can do to the DynamoDB. Remember we already created a policy for a role and attached that role to our EC2 instance. They are two different policies. One for EC2, One for VPC endpoint.</li></ul><p><img src="/../images/AWS-SAA-Design-Secure-Applications-and-Architectures/30.png" alt="" /></p><p><img src="/../images/AWS-SAA-Design-Secure-Applications-and-Architectures/31.png" alt="" /></p><ul><li><p>in the VPC’s security group. We need to remove the outbound rule for accessing public internet. Add a new rule to access DynamoDB endpoint.</p></li><li><p>Note that we can access to the EC2 instance because we still have the inbound rules.</p></li><li><p>Security Groups are stateful. They track the state of the connections to and from your instance. If you allow the traffic into your instance, then the security group will automatically allow the instance to reply to that traffic.</p></li><li><p>Note there is a file <strong>bootstrap-responsive.css</strong> missing in the course app. I used FlieZilla uploaded this file to EC2. Below is the FlieZilla connection settings. Note port is 22.</p></li></ul><p><img src="/../images/AWS-SAA-Design-Secure-Applications-and-Architectures/32.png" alt="" /></p><h3 id="network-access-control-lists"><a class="markdownIt-Anchor" href="#network-access-control-lists"></a> Network Access Control Lists</h3><ul><li>Security Group controls in/out traffic for a EC2 instance. While NACL controls all traffic in the subnet. They are two layers of security.</li></ul><h4 id="differences-between-security-group-and-nacl"><a class="markdownIt-Anchor" href="#differences-between-security-group-and-nacl"></a> Differences between Security Group and NACL</h4><ol><li>Security Group<ul><li>Instance Level</li><li>Stateful</li><li>Unnumbered rules (rules don’t have order)</li></ul></li><li>NACL<ul><li>Subnet level</li><li>Stateless</li><li>Numbered rules (rules have order)</li></ul></li></ol><ul><li><p>Stateful means security groups will automatically allow reply traffic.</p></li><li><p>Stateless means if you only have inbound rule to access the instance. But do not have the outbound rule. Then the traffic can not leave the subnet. You have to setup both in/out rules to access an instance in the subnet.</p></li><li><p>Numbered rules means each rule will have a number. Smaller number rules will be applied first(high priority).</p></li></ul><h3 id="summary-3"><a class="markdownIt-Anchor" href="#summary-3"></a> Summary</h3><ol><li>A public subnet has a default route to an internet gateway</li><li>Use an IAM instance profile to grant an instance access to an AWS service</li><li>Decide whether to connect to AWS endpoints via the internet or a VPC endpoint</li><li>Security groups and network access control lists act as firewalls but differ in significant ways</li></ol><h2 id="part-four-protecting-data-at-rest"><a class="markdownIt-Anchor" href="#part-four-protecting-data-at-rest"></a> Part Four: Protecting Data at Rest</h2><ul><li>Data at Rest is the data stored in a place(hard drive)</li><li>Data in Transit is the data being sent in public internet</li></ul><ol><li>Access Permissions<ul><li>Bucket policies</li><li>User policies</li><li>Access Control lists</li></ul></li><li>Encryption<ul><li>Requires access to a key to encrypt and decrypt data</li><li>if the key is gone. so is the data!</li></ul></li></ol><h3 id="module-overview-3"><a class="markdownIt-Anchor" href="#module-overview-3"></a> Module Overview</h3><ol><li>Create a customer master key(CMK)</li><li>Encrypt an EBS volumn</li><li>S3 access control lists, bucket policies, and user policies</li><li>Securely grant anonymous access to S3 object</li><li>Encrypt S3 object</li></ol><h3 id="demo-create-a-customer-master-key-using-kms"><a class="markdownIt-Anchor" href="#demo-create-a-customer-master-key-using-kms"></a> Demo Create a customer master key using KMS</h3><ol><li>Assign a key alias(friendly name)</li><li>Define key administrators (people who manages the key)</li><li>Define key users (people who will be using the key)</li></ol><h3 id="demo-encrypt-the-data-on-an-unencrypted-ebs-volume"><a class="markdownIt-Anchor" href="#demo-encrypt-the-data-on-an-unencrypted-ebs-volume"></a> Demo Encrypt the data on an unencrypted EBS volume</h3><ol><li>Stop the web1 instance (tic-tac-toe)</li><li>Take a snapshot of the root volume</li><li>Make an encrypted copy of the snapshot</li><li>Create an AMI(instance image) using the encrypted snapshot</li><li>Launch another instance using the new AMI</li></ol><h3 id="demo-s3-access-permissions"><a class="markdownIt-Anchor" href="#demo-s3-access-permissions"></a> Demo S3 Access Permissions</h3><ol><li>Create an S3 bucket</li><li>Configure bucket access control lists</li><li>Create a bucket policy</li></ol><ul><li>There are two types of policies</li></ul><ol><li>identity based policy<ul><li>we set this up in IAM, we can grant policy to a IAM user</li></ul></li><li>resource based policy<ul><li>we set this up in resource page. We can add IAM users to the policy to let the resource know that these people can access it.</li></ul></li></ol><ul><li>Create a folder in the new S3 bucket and try to access this folder using another IAM user who only has read access to S3 buckets. Then try to use the new user to create another folder in S3 (will fail).</li><li>Note folder in S3 is just another object(just look like a folder). So it requires the same permission as objects.</li></ul><p><img src="/../images/AWS-SAA-Design-Secure-Applications-and-Architectures/33.png" alt="" /></p><ul><li>using Bucket inline policy generator, we can add another IAM user to the access list in S3 policy. Need to specify the IAM user ARN and S3 bucket ARN. After doing this we can create another folder using another IAM user.</li></ul><p><img src="/../images/AWS-SAA-Design-Secure-Applications-and-Architectures/34.png" alt="" /></p><h3 id="demo-cloudfront-origin-access-identity"><a class="markdownIt-Anchor" href="#demo-cloudfront-origin-access-identity"></a> Demo CloudFront Origin Access Identity</h3><ol><li>Create an S3 bucket</li><li>Create an origin access identity(OAI)</li><li>Grant OAI access to the bucket</li><li>Create a CloudFront distribution</li></ol><ul><li>Note to grant OAI access to the S3 bucket, we need to create an inline policy for the S3 bucket. Tell the bucket to let our OAI user have the read access.</li><li>Now only through the CloudFront can we access the bucket files.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># Load named profile</span><br><span class="line">export AWS_PROFILE&#x3D;ben</span><br><span class="line"></span><br><span class="line"># Create S3 bucket</span><br><span class="line">aws s3api create-bucket --bucket yuan.com-cloudfront</span><br><span class="line"></span><br><span class="line"># Create and uplaod index.html document</span><br><span class="line">echo &quot;Hello, world!&quot; &gt; index.html</span><br><span class="line">aws s3 cp index.html s3:&#x2F;&#x2F;yuan.com-cloudfront&#x2F;</span><br><span class="line"></span><br><span class="line"># Create the origin access identity (OAI)</span><br><span class="line">aws cloudfront create-cloud-front-origin-access-identity --cloud-front-origin-access-identity-config CallerReference&#x3D;&quot;demo&quot;,Comment&#x3D;&quot;OAI for yuan.com-cloudfront&quot;</span><br><span class="line"></span><br><span class="line"># Apply a bucket policy granting read access to the OAI</span><br><span class="line">aws s3api put-bucket-policy --bucket yuan.com-cloudfront --policy file:&#x2F;&#x2F;bucketpolicy.json</span><br><span class="line"></span><br><span class="line"># Verify bucket policy</span><br><span class="line">aws s3api get-bucket-policy --bucket yuan.com-cloudfront</span><br><span class="line"></span><br><span class="line"># Create a CloudFront distribution</span><br><span class="line">aws cloudfront create-distribution --distribution-config file:&#x2F;&#x2F;dist-config.json</span><br></pre></td></tr></table></figure><h3 id="demo-granting-anonymous-access-with-object-acls-and-bucket-policies"><a class="markdownIt-Anchor" href="#demo-granting-anonymous-access-with-object-acls-and-bucket-policies"></a> Demo Granting Anonymous Access with Object ACLs and Bucket Policies</h3><ol><li>Grant anonymous access to an individual S3 object</li><li>Grant read permissions to everyone using the object’s ACL (Resources based policy)</li><li>Use a bucket policy to grant everyone permission to perform the GetObject action against the object (identity based policy)</li></ol><ul><li><p>Note even if we logged as the IAM who has full access to S3 object (owner). When we try to access a certain file in S3 bucket. We will still get Access Denied response. Why is that? Because when we click the link to access S3 object, our browser will make an anonymous request to the object, which doesn’t not include any authentication information with it.</p></li><li><p>Note if you are trying to modify bucket policy to give public access to a file. You have to make the bucket public first.</p></li></ul><h3 id="encrypting-s3-objects-with-kms-managed-keys"><a class="markdownIt-Anchor" href="#encrypting-s3-objects-with-kms-managed-keys"></a> Encrypting S3 Objects with KMS-managed Keys</h3><ol><li>Generate a new CMK</li><li>Enable encryption on our S3 bucket (existing files in bucket will not be encrypted)</li><li>Verify that unauthorized users can’t decrypt data</li></ol><h3 id="summary-4"><a class="markdownIt-Anchor" href="#summary-4"></a> Summary</h3><ol><li>Use KMS to create customer master keys</li><li>Use the key policy to grant principals permission to use the key</li><li>To encrypt data on an existing EBS volume, snapshot the volume, and make an encrypted copy of a snapshot</li><li>Enabling KMS encryption on an S3 bucket doesn’t encrypt existing objects.</li><li>Don’t delete a key that’s being used to encrypt or decrypt data! (you can’t decrypt data after key’s deleted)</li><li>To control access to S3, you can use access control lists, bucket policies, or user policies(identity based policies)</li><li>Use object ACLs to grant anonymous access to individual objects</li><li>Bucket policies contain the principal element while user policies don’t</li></ol><h2 id="part-five-protecting-data-in-transit"><a class="markdownIt-Anchor" href="#part-five-protecting-data-in-transit"></a> Part Five: Protecting Data in Transit</h2><ul><li>Encrypting data between users in public internet and AWS cloud</li></ul><h3 id="transport-layer-security-tls"><a class="markdownIt-Anchor" href="#transport-layer-security-tls"></a> Transport Layer Security (TLS)</h3><ul><li>People sometimes incorrectly call this SSL(secure sockets layer, which is the old technology that nobody uses anymore)</li><li>HTTPS uses TLS (S stands for security which the underlying protocol is TLS)</li></ul><ol><li><p>Configure application to use TLS</p><ul><li>Application-dependent configuration</li><li>independent of AWS</li></ul></li><li><p>Application Load Balancer (We use this in this course)</p><ul><li>Configure AWS application load balancer to use TLS</li><li>Force all clients through the load balancer</li></ul></li></ol><p><img src="/../images/AWS-SAA-Design-Secure-Applications-and-Architectures/35.png" alt="" /></p><ul><li>We are going to create a load balancer and a TLS certificate using AWS ACM, then install the certificate on the load balancer. All users need to access the load balancer to access our instances (which hosted the tic-tac-toe application). And all traffic between users and load balancer are encrypted.</li></ul><h3 id="module-overview-4"><a class="markdownIt-Anchor" href="#module-overview-4"></a> Module Overview</h3><ol><li>Prepare the infrastructure to support an applicatioin load balancer</li><li>Create a secure Application load balancer</li></ol><h3 id="demo-preparing-for-the-load-balancer"><a class="markdownIt-Anchor" href="#demo-preparing-for-the-load-balancer"></a> Demo Preparing for the Load Balancer</h3><ol><li>Create a new subnet in a different zone (load balancer requires instances to be at different AZs)</li><li>Bring up an instance named web2</li><li>Launch the application</li><li>Reconfigure security group (permit access to/from load balancer)</li></ol><h3 id="demo-creating-a-secure-application-load-balancer"><a class="markdownIt-Anchor" href="#demo-creating-a-secure-application-load-balancer"></a> Demo Creating a Secure Application Load Balancer</h3><ol><li>Use the AWS Certificate Manager to create a TLS certificate</li><li>Create an Application Load Balancer</li><li>Create a DNS record for the application</li><li>Browse to the application using HTTPS</li></ol><ul><li><p>If you use Route53 to control the DNS records of your domain. You can let AWS create the CNAME record for you.</p></li><li><p>To create a load balancer, you need to specify the following</p><ol><li>Load Balancer type: HTTPS, internet facing</li><li>VPC AZs (tic-tac-toe)</li><li>Security groups (tic-tac-toe)</li><li>Routing (new target group HTTP:80 to both instances)</li><li>Register both instance as load balancer targets</li><li>DNS name is the load balancer name we can browse to</li><li>Create an A record in Route53 convert load balancer DNS name to a friendly domain name.</li></ol></li><li><p>Now you can browse to the URL using HTTPS</p></li></ul><h3 id="summary-5"><a class="markdownIt-Anchor" href="#summary-5"></a> Summary</h3><ol><li>Choose where to terminate the TLS connection<ul><li>Individual instances (you need to configure TLS connection of your application and install TLS certificate on each instance)</li><li>Application Load Balancer (only need to install one TLS certificate on the load balancer)</li></ul></li><li>ALB requires two availability zones</li><li>ACM requires you to verify control of the domain name in the certificate</li></ol><h2 id="part-six-configuring-data-backup-replication-and-recovery"><a class="markdownIt-Anchor" href="#part-six-configuring-data-backup-replication-and-recovery"></a> Part Six: Configuring Data Backup, Replication, and Recovery</h2><h3 id="module-overview-5"><a class="markdownIt-Anchor" href="#module-overview-5"></a> Module Overview</h3><ol><li>Versioning</li><li>Lifecycle rules</li><li>Cross-region replication</li></ol><h3 id="demo-versioning"><a class="markdownIt-Anchor" href="#demo-versioning"></a> Demo Versioning</h3><ol><li>Versioning prevents accidental deletion and overwriting of data</li><li>Enable versioning</li><li>Upload object</li><li>Restoring versions</li></ol><p><img src="/../images/AWS-SAA-Design-Secure-Applications-and-Architectures/36.png" alt="" /></p><ul><li>After you enabling the versioning of a S3 bucket, when you deleted a file. AWS will not delete the file but instead hide it and give the file a deletion marker. In the version list, you can see all versions of the same file. And if you delete the version with deletion marker, you can bring the deleted files back.</li></ul><h3 id="lifecycle-management"><a class="markdownIt-Anchor" href="#lifecycle-management"></a> Lifecycle Management</h3><ol><li>Different storage classes provide different levels of redundency</li><li>Standard is the default storage class</li><li>Automatically migrate older objects to a cheaper class</li><li>Automatically delete old objects</li></ol><h3 id="demo-liftcycle-management"><a class="markdownIt-Anchor" href="#demo-liftcycle-management"></a> Demo Liftcycle Management</h3><ol><li>Examine object storage classes</li><li>Create a lifecycle rule</li></ol><p><img src="/../images/AWS-SAA-Design-Secure-Applications-and-Architectures/37.png" alt="" /></p><ul><li>This image explains the current lifecycle I set up for the bucket.</li></ul><ol><li>On day 30, objects will be moved to One-Zone IA</li><li>On day 31, objects will be added a delete marker and become previous versions</li><li>On day 32, objects will be moved to Glacier</li><li>On day 39, objects will be deleted permenately</li></ol><ul><li>Note, small objects in Glacier will have higher costs (objects &lt; 128KB)</li></ul><h3 id="demo-cross-region-replication"><a class="markdownIt-Anchor" href="#demo-cross-region-replication"></a> Demo Cross-Region Replication</h3><ol><li>Congifure cross-region replication</li><li>Replication doesn’t include existing objects</li></ol><ul><li>When enable replication rules</li></ul><ol><li>choose destination bucket</li><li>choose keys to decrypt data in source bucket</li><li>choose keys to encrypt data in destination bucket</li></ol><h3 id="summary-6"><a class="markdownIt-Anchor" href="#summary-6"></a> Summary</h3><ol><li>Versioning<ul><li>Every change results in a new object version</li><li>deleting an object creates a marker</li><li>delete the marker to restore the object</li></ul></li><li>Lifecycle Management<ul><li>Move objects to different classes</li><li>delete objects</li></ul></li><li>Cross-region replication<ul><li>Synchronously copy new objects to a different bucket</li><li>Replicating to a different region offers protection against local catastrophes</li></ul></li></ol><h2 id="couse-summary"><a class="markdownIt-Anchor" href="#couse-summary"></a> Couse Summary</h2><ul><li><p>Remember that the goal of security is protect the confidentiality, integrity, and availability of data. It’s that CIA triad.</p></li><li><p><strong>Protecting AWS Credentials</strong>: At the start of this course, you learned how to configure identity and access management. This is like the building security system. It controls who can enter the building, what rooms they can go into, and so on.</p></li><li><p><strong>Capturing and Analyzing Logs</strong>: After that, you learned how to capture and analyze logs using CloudTrail and CloudWatch. In a physical building, this would be the building’s cameras, security guards, and log books. You’re not just concerned with what should happen, but what did happen. You want to know everything that’s going on inside that building.</p></li><li><p><strong>Protecting Network and Host-level Boundaries</strong>: However, perhaps the nature of your particular building is such that it’s not practical to identify everyone that exits and enters. If you’ve got a business that has clients coming in and out all the time, making them sign in and sign out can be a burden. In that case, you need a different way of controlling access to the building. This is analogous to protecting network and host-level boundaries in your AWS environment. Think of security groups and network access control lists. You’ll let strangers in your building, but you’re going to be strict about where they can go and what they can do.</p></li><li><p><strong>Protecting Data at Rest</strong>: Next, you learned how to protect at rest using encryption and access controls. Think of a combination safe that contains a secret message. The safe is locked in a room that you have to use a badge to gain access to. First, you swipe your badge to get into the room, and then once in the room, you must possess the correct combination to open the safe.</p></li><li><p><strong>Protecting Data in Transit</strong>: Next, you’ll learn how to protect data in transit by way of, yes, encryption. Again, if you want to take a top secret document out of the building and deliver it to someone, you might stick it in a locked briefcase or perhaps hire an armored courier to transport it for you. As long as the document is outside of the building, it remains under lock and key until it gets to its destination.</p></li><li><p><strong>Configuring Data Backup, Replication and Recovery</strong>: Lastly, we looked at how to perform data backup, replication, and recovery. Basically, if all else fails and your data does get destroyed, at least it’s not gone forever. You can get it back.</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> AWS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AWS SAA - Architecting for Reliability on AWS</title>
      <link href="2020/10/15/AWS-SAA-Architecting-for-Reliability-on-AWS/"/>
      <url>2020/10/15/AWS-SAA-Architecting-for-Reliability-on-AWS/</url>
      
        <content type="html"><![CDATA[<p>AWS SAA C02 exam will include 4 topic</p><ol><li>Resilience</li><li>Performance</li><li>Security</li><li>Cost-Optimization</li></ol><h3 id="chapter-one-resilience"><a class="markdownIt-Anchor" href="#chapter-one-resilience"></a> Chapter One: Resilience</h3><h4 id="section-one-availability"><a class="markdownIt-Anchor" href="#section-one-availability"></a> Section One: Availability</h4><p>Resiliency: The ability of an application to avoid and recover from failure.</p><p>Availability: The percentage of time that an application is performing as expected.</p><p>Poor performance implies low availablility. Uptime isn’t the same as availability.</p><p>The service level agreement(SLA) for each service includes its annual availability.</p><p>The availability of a single EC2 instance is 90%</p><p>The availability of an ELB(Elastic Load Balancer) and EFS(Elastic File System) is 99.99%</p><p>The availability of a RDS(Relational DataBase System) multi-AZ(multi-Availability Zone) is 99.95%</p><p>The availability of a Lambda is 99.95%</p><p>The availability of a S3 is 99.9%</p><p>The availability of a DynamoDB with Global Tables (replicates our database across multiple regions) is 99.999%</p><p>Traditional web application: can be convert to AWS web application without having to change the code. For example, a traditional video processing application can use Elastic File System(EFS) to store video data. But it cannot use S3 to store video data. Because that requires changes of code.</p><p>EFS provides a network file system (NFS) volume, NFS is an established standard that most Linux distributions support.</p><p>For DB: we can use (Relational Database Service)RDS. It offers managed database engines (MySQL, MariaDB, PostgreSQL, Microsoft SQL server, Oracle…). AWS manages database infrastructure and backups.</p><h4 id="loose-coupling"><a class="markdownIt-Anchor" href="#loose-coupling"></a> Loose Coupling</h4><p>One component doesn’t depend on a specific component (e.g. URL points to ELB, not a specific EC2), one-to-many relationship</p><p>is EFS a single point of failure?</p><p>No, Elastic services are always composed of redundant components, they just hide it. Elastic services are always loosely coupled with other services like EC2.</p><p>Loose Coupling helps Performance: If our application’s performance is low and we want to upgrade our EC2 instances, because they are loose coupled, we can upgrade EC2 instances one by one and our application will still be available, ELB will just route traffic to other instances.</p><p>Performance and Availability are linked.</p><h4 id="simple-queue-service"><a class="markdownIt-Anchor" href="#simple-queue-service"></a> Simple Queue Service</h4><p>The concept of Loose Coupling can be applied to the application level too. For example, we have a video processing application, we can create two components for this application, the web interface part and the video processing part. Users go to the webpage and submit a request of a video with differnt options, and video processing part gets the request and start processing.</p><p>But because processing videos take much more time than sending requests. We need a Message Queue Service to save all the requests in order. Simple Queue Service(SQS) is one option with high availability.</p><h4 id="elastic-container-service"><a class="markdownIt-Anchor" href="#elastic-container-service"></a> Elastic Container Service</h4><p>Container helps you to deploy web serices easier. Build an image of your container, deploy the image to an instance, and launch the containser in the image. E.g. Docker</p><p>You can have multiple containers in one instance, so it is like you are running multiple web services for the price of one instance. Also, if one container is down, the other containers on that instance will still be running. (Processes running inside the container are isolated from the host.)</p><h4 id="cloud-native-applications"><a class="markdownIt-Anchor" href="#cloud-native-applications"></a> Cloud Native Applications</h4><p>Depend on a cloud service that can’t be deployed on-premises</p><p>Examples: SQS, S3, DynamoDB</p><p>Lambda, S3 and DynamoDB are three main serverless components.</p><p>Rather than running the video processing function on a service on a EC2 instance, we could write a Lambda function to do that. Lambda is a serverless service (they are running on a server of course, but the server is managed by AWS and we don’t need to worry about it, so we call it serverless.)</p><p>Advantages of using Cloud Native Architecture: Scalability, Performance, Convenience</p><p>Disadvantages: Could vendor lock-in (have to use AWS services), Slightly lower availability (Cloud services are hard dependencies).</p><p>However, because of the scalability of Cloud Applications, if we deploy the application to two different regions, we could improve the availability. (introduce more redundence)</p><h4 id="trusted-advisor"><a class="markdownIt-Anchor" href="#trusted-advisor"></a> Trusted Advisor</h4><p>Where you can found the number of limits for all services on AWS.</p><h4 id="section-one-summary"><a class="markdownIt-Anchor" href="#section-one-summary"></a> Section One Summary</h4><p>Availability is not cheap, we need to found the balance between availability and cost. We can achieve high availability use Redundancy and Loose Coupling</p><p>The Simple Queue Service can act as a go-between for loosely coupled services. 1. Sending service places message in a queue. 2. Receiving service polls the queue for new messages. E.g. Online voting service</p><p>The Elastic Container Service deploys microservices using Docker containers, can improve availability by running multiple containers on a single instance.</p><h4 id="section-two-setting-up-aws-environment"><a class="markdownIt-Anchor" href="#section-two-setting-up-aws-environment"></a> Section Two: Setting up AWS Environment</h4><h4 id="aws-budget"><a class="markdownIt-Anchor" href="#aws-budget"></a> AWS Budget</h4><p>In the Billing section, you can create an AWS Budget and setup an email alert, AWS will send you an email when the budget amount has been reached. There are more options.</p><h4 id="aws-iam"><a class="markdownIt-Anchor" href="#aws-iam"></a> AWS IAM</h4><p>AWS has two account types, Root User account and IAM account. We can setup a password policy for AWS accounts.</p><p>AWS provides MFA for Root User account in case someone else knows your AWS account credentials.</p><p>Delete root user access keys: if someone knows your root user access key, he can use CLI to do anything. MFA will not be required to use CLI if he knows root user access key. So it is recommanded to create an IAM user and create access key for IAM users.</p><p>You can create IAM accounts and Groups and assign Policies to Users or Groups, IAM users will use Root account ID or Alias and their account details to login.</p><p>CloudTrail: where AWS logs all events such as: user login, user create new resources, user attach policy to its account etc…</p><p>Configure AWS account using AWS CLI. This command can also be used to change default AWS credentials in .aws folder.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws configure</span><br></pre></td></tr></table></figure><p><img src="/../images/AWS-SAA-Architecting-for-Reliability-on-AWS/1.png" alt="" /></p><h4 id="tls-certificate"><a class="markdownIt-Anchor" href="#tls-certificate"></a> TLS Certificate</h4><p>TLS(Transport Layer Security): Make sure messages being transferred between Load Balancer and Clients are secure.</p><p>ACM(Amazon Certificate Manager): we ask ACM to issue us a TLS certificate</p><p>Route 53: when you purchase a domain, you need to config the DNS records, you can do this in the service where you purchased the domain (e.g. GoDaddy) or in Route 53.</p><p>Note: Once your TLS certificate has been issued, you still can’t visit your website via https, you have to link your TLS certificate to other AWS services like CloudFront or ELB</p><h4 id="section-two-summary"><a class="markdownIt-Anchor" href="#section-two-summary"></a> Section Two Summary</h4><ol><li>Set up budget alert</li><li>Create IAM policy</li><li>Set up MFA for the root user</li><li>Create IAM user</li><li>View CloudTrail event history</li><li>Configure AWS CLI</li><li>Create a TLS certificate using ACM</li></ol><h4 id="section-three-vpc-networks"><a class="markdownIt-Anchor" href="#section-three-vpc-networks"></a> Section Three: VPC networks</h4><p>AWS managers underlying VPC infrastructrue and is responsible for reliability of VPC network components. You don’t need to worry about VPC failures. There are many redundencies built in.</p><p>VPC contains one or more subnets. A subnet exists in an availability zone. An instance exists in a subnet.</p><p>Because one instance only exists in one subnet which exists in one availability zone, it lacks of redundency and availability is not high. If the zone fails, the instance will fail.</p><p>Availability zones: they are basically the data centers in different locations. if you have your instances running in different availability zones, it is highly unlikely that all zones fail.</p><p>Client(me) can access a VPC via three ways: 1. Internet Gateway, 2. VPN network, 3. Direct Connect link provided by AWS.</p><p>Transit Gateway: high availability service that can connect two networks together (two VPCs)</p><p><img src="/../images/AWS-SAA-Architecting-for-Reliability-on-AWS/2.png" alt="" /></p><h4 id="elastic-ip-address"><a class="markdownIt-Anchor" href="#elastic-ip-address"></a> Elastic IP Address</h4><p>EIP allows an instance to retain the same public IP address. EIP is bound to an ENI(Elastic Network Interface), which is attached to an instance. You can move an EIP to differnt ENI</p><p>To check EC2 instances EIPs.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws ec2 describe-addresses</span><br></pre></td></tr></table></figure><p>To allocate new EIP</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws ec2 allocate-address</span><br></pre></td></tr></table></figure><p>To release the EIP</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws ec2 release-address --allocation-id (your_allocation_id)</span><br></pre></td></tr></table></figure><h4 id="global-accelerator"><a class="markdownIt-Anchor" href="#global-accelerator"></a> Global Accelerator</h4><p>Provides two anycast IPv4 addresses. While ELP is bound to a AWS region, Global Accelerator IPs doesn’t, Users connects to a global accelerator static IP will be routed to a nearest POP(points-of-presence), which then will provide you with resources in any region.</p><h4 id="vpc-architecture"><a class="markdownIt-Anchor" href="#vpc-architecture"></a> VPC Architecture</h4><p>Public Subnet: has full access to the internet, can also be reached from the internet.</p><p>Private Subnet: is isolated from the internet, cannot reach internet nor be reached from the internet.</p><p>NAT Gateway: Provides outbound internet access for instance in Private Subnet</p><p><img src="/../images/AWS-SAA-Architecting-for-Reliability-on-AWS/3.png" alt="" /></p><p>Create VPC with Public Subnet and Private Subnet.</p><p><img src="/../images/AWS-SAA-Architecting-for-Reliability-on-AWS/4.png" alt="" /></p><p>Public Subnet has a default Route Rule which route all requests(0.0.0.0/0) to a IGW(Internet Gateway), this allows instance in Public Subnet access public internet(inbound and outbound).</p><p><img src="/../images/AWS-SAA-Architecting-for-Reliability-on-AWS/5.png" alt="" /></p><p>Private Subnet has a default Route Rule which route all requests(0.0.0.0/0) to a NAT(NAT Gateway), this allows instance in Private Subnet outbound only access to internet.</p><p><img src="/../images/AWS-SAA-Architecting-for-Reliability-on-AWS/6.png" alt="" /></p><p>NAT Gateway: Instance in private subnet send outbound traffic to NAT Gateway, NAT Gateway then sends traffic to Internet Gateway.</p><p>Create multiple Public and Private subnets for redundency.</p><p>To find a subnet by its CIDR block, we will be using the subnet ID to launch the instance.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws ec2 describe-subnets --filters Name&#x3D;cidr-block,Values&#x3D;&quot;10.0.11.0&#x2F;24&quot;</span><br></pre></td></tr></table></figure><p>Launch an EC2 instance into a public subnet:</p><p>Note: subnetId is the ID of your public subnet, which you can get by using the describe-subnets command above. ImageID is the ID of the EC2 instance, it specify some options about the instance you want to launch. key-name is the name of the SSH key pair you created, which you can use later to login to the instance.</p><p>You can create or manage your SSH key pair under your EC2 panel, NETWORK &amp; SECURITY tab.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws ec2 run-instances --subnet-id subnet-0aa8c9baa867b88f0 --image-id ami-0e6449745600ac1da --instance-type t3.micro --key-name hellcyAWSkey</span><br></pre></td></tr></table></figure><p><img src="/../images/AWS-SAA-Architecting-for-Reliability-on-AWS/7.png" alt="" /></p><p>Note: You could optionally associate a public IP address to the instance you are about to launch. By using the command</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--associate-public-ip-address</span><br></pre></td></tr></table></figure><p>It will make EC2 to associate a temporary public IP address to this instance, and will close the ip address when the instance is stopped. I will not do that because I want to keep the IP and so I will associate an EIP to this instance.</p><p>To allocate a new EIP</p><p>Note before we have associated the EIP to the NAT gateway. Now we are going to associate the new EIP to the EC2 instacne</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws ec2 allocate-address</span><br></pre></td></tr></table></figure><p>To associate the new EIP to the new EC2 instance</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws ec2 associate-address --instance-id Your_Instance_Id --allocation-id Your_EIP_Allocation_Id</span><br></pre></td></tr></table></figure><p><img src="/../images/AWS-SAA-Architecting-for-Reliability-on-AWS/8.png" alt="" /></p><p>To terminate the EC2 instance</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws ec2 terminate-instances --instance-ids Your_Instance_Id</span><br></pre></td></tr></table></figure><p>To release the EIP so AWS will not charge us</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws ec2 release-address --allocation-id Your_EIP_Allocation_Id</span><br></pre></td></tr></table></figure><p><img src="/../images/AWS-SAA-Architecting-for-Reliability-on-AWS/9.png" alt="" /></p><p>Launch an EC2 instance into private subnet</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws ec2 run-instances --subnet-id [private_subnet_id] --image-id ami-0e6449745600ac1da --instance-type t3.micro --key-name hellcyAWSkey</span><br></pre></td></tr></table></figure><p>To delete NAT gateway</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws ec2 delete-nat-gateway --nat-gateway-id Your_NAT_Gateway_Id</span><br></pre></td></tr></table></figure><p>Don’t forget to release the EIP associated with the NAT gateway.(They will charge for un-associated EIP)</p><p><img src="/../images/AWS-SAA-Architecting-for-Reliability-on-AWS/10.png" alt="" /></p><h4 id="aws-shield-standard"><a class="markdownIt-Anchor" href="#aws-shield-standard"></a> AWS Shield Standard</h4><p>Free service that detects against DDoS attacks, always ON</p><h4 id="direct-connect"><a class="markdownIt-Anchor" href="#direct-connect"></a> Direct Connect</h4><p>Low-latency connection to an AWS region. Bypasses the internet, Two types: Dedicated, Hosted</p><p>Dedicated: Physical connection that terminates at a Direct Connection location, fast, 1 or 10 Gbps</p><p>Hosted: Last-mile connection provided by a Direct Connect partner(Local ISP). 50 Mbps to 10 Gbps</p><h4 id="vpn-connection"><a class="markdownIt-Anchor" href="#vpn-connection"></a> VPN Connection</h4><p>Encrypted IPsec connection over the internet, Unpredicatable latency, Can be implemented in two ways: Virtual private gateway, Transit gateway.</p><p>Virtual private gateway: Enables you to establish a VPN tunnel with only one VPC. Doesn’t scale well when you have multiple VPCs, then you need to create multiple Virtual private gateway for each VPC you want to connect.</p><p>Transit Gateway: Connects VPCs and on-premises networks, 1. Terminates multiple VPN connections, 2. Supports Direct Connect. Connects multiple VPCs together.</p><p>Transit Gateway Route Tables: Control how traffic is routed between subnets. Can block traffic.</p><p>To create a Transit Gateway</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws ec2 create-transit-gateway</span><br></pre></td></tr></table></figure><p><img src="/../images/AWS-SAA-Architecting-for-Reliability-on-AWS/11.png" alt="" /></p><p>To create a VPC</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws ec2 create-vpc --cidr-block 127.27.0.0&#x2F;16</span><br></pre></td></tr></table></figure><p><img src="/../images/AWS-SAA-Architecting-for-Reliability-on-AWS/12.png" alt="" /></p><p>To create a Subnet in the VPC</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws ec2 create-subnet --vpc-id Your_VPC_Id --cidr-block 172.27.1.0&#x2F;24 --availability-zone ap-southeast-2a</span><br></pre></td></tr></table></figure><p><img src="/../images/AWS-SAA-Architecting-for-Reliability-on-AWS/13.png" alt="" /></p><p>To attach Transit Gateway to the subnet of the VPC</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws ec2 create-transit-gateway-vpc-attachment --transit-gateway-id Your_TGW_Id --vpc-id Your_VPC_Id --subnet-ids Your_Subnet_Ids</span><br></pre></td></tr></table></figure><p><img src="/../images/AWS-SAA-Architecting-for-Reliability-on-AWS/14.png" alt="" /></p><h4 id="section-three-summary"><a class="markdownIt-Anchor" href="#section-three-summary"></a> Section Three Summary</h4><ol><li>Allocating and assigning EIP addresses</li><li>Creating VPCs</li><li>Creating public and private subnets</li><li>Launching instances into subnets</li><li>Transit gateways</li></ol><h4 id="section-four-automated-deployments-with-cloudformation"><a class="markdownIt-Anchor" href="#section-four-automated-deployments-with-cloudformation"></a> Section Four: Automated Deployments with CloudFormation</h4><p><img src="/../images/AWS-SAA-Architecting-for-Reliability-on-AWS/15.png" alt="" /></p><p>Overview of the architecture: The architecture has two tiers, the web tier and the application tier. The client connects to the internet facing application load balancer, it proxies the connection to one of the instances in the web tier, and all of the instances in the web tier are running a web server. The web tier instance then opens a back-end connection to the internal load balancer, which then proxies the connection to one of the instances in the application tier. The idea is that the web tier instance grabs some information from an instance in the app tier, and it displays that information to a webpage, which presents to the client.</p><p>The instances in the web tier and the app tier are going to be part of two different Auto Scaling groups. Auto Scaling is going to launch these isntances and make sure we always have a minimum number of healthy instances. If an instance fail, Auto Scaling will terminate it and launch a new one.</p><h4 id="cloudformation"><a class="markdownIt-Anchor" href="#cloudformation"></a> CloudFormation</h4><p>JSON or YAML document that describes AWS resources. Infrastructrue as code. Used to create a stack.</p><p>Stack: Created by a template, is a COLLECTION OF RESOURCES that you create, update, and delete as a single unit. You can manually manage individual resources in a stack.</p><p>Multiple templates: Different teams manage different resources. Resources have different lifecycles. Distributing resources across different stacks makes them easier to manage.</p><p>Template for this course can be downloaded from <a href="https://github.com/benpiper/architecting-reliability-aws/">here</a>. Name: app-stack.json and network-stack.json.</p><p>app-stack.json depends on network-stack.json, so it calls network-stack.json to create the nested stack first, then it will create the parent stack by using some of the outputs from network-stack.json.</p><p>Stack output: key-value pairs that CloudFormation makes available to other stacks and via the aws cloudformation describe-stacks CLI command.</p><h4 id="application-load-balancers"><a class="markdownIt-Anchor" href="#application-load-balancers"></a> Application Load Balancers</h4><ol><li>Supports HTTP and HTTPS traffic</li><li>You can use any TCP port, default is 80 and 443</li><li>ALB listener receives connection from a client and proxies it to an instance in the target group</li><li>Uses round-robin load balancing by default</li><li>Can monitor health of instances</li></ol><p>ALB Schemes</p><p>internet-facing: reachable from the internet, public IP address, Public DNS name</p><p>internel: Not reachable from the internet, private IP address, Private DNS name</p><p>Health Checks</p><p>Each instance must pass its health check before receiving traffic. ALB will send HTTP GET request and looks for a success code every 10 seconds.</p><h4 id="auto-scaling-groups"><a class="markdownIt-Anchor" href="#auto-scaling-groups"></a> Auto Scaling Groups</h4><ol><li>Launch a certain number of instances into the Auto Scaling group</li><li>Add the instacnes to the ALB target group</li><li>Terminate and recreate unhealthy instances</li><li>Scale in or out based on average group CPU utilization</li></ol><p>Follow the steps to deploy stack to AWS Cloudformation</p><p>First validate the templates, you will see the output parameters if template format is correct.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws cloudformation validate-template --template-body file:&#x2F;&#x2F;app-stack.json</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws cloudformation validate-template --template-body file:&#x2F;&#x2F;network-stack.json</span><br></pre></td></tr></table></figure><p>deploy the stack to AWS cloudformation</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws cloudformation deploy --template-file &quot;app-stack.json&quot; --stack-name &quot;app-stack&quot;</span><br></pre></td></tr></table></figure><ol><li>Change the TLS certificate ARN</li><li>Change the S3 URL to yours</li><li>Change the SSH key pairs for logging into EC2 instance</li><li>Change the EC2 instance image ID</li></ol><p>Note: the template will only work for us-east-1 region, tried using ap-southeast-2 but failed when waiting for the cfn-signal. Probably because the application doesn’t exist in ap-southeast-2 docker market.</p><p><img src="/../images/AWS-SAA-Architecting-for-Reliability-on-AWS/17.png" alt="" /></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws cloudformation describe-stacks --stack-name &quot;app-stack&quot;</span><br></pre></td></tr></table></figure><p>Using the command above we can find the URL of the Internet-facing application load balancer. We securely(HTTPS) connect to this load balancer. And it redirect us to one of the instance in web tier.</p><p><img src="/../images/AWS-SAA-Architecting-for-Reliability-on-AWS/16.png" alt="" /></p><p>Note we do added a TLS certificate in the template. But the TLS certficate is for my website <a href="http://theyuancheng.com">theyuancheng.com</a>, and the domain of the EC2 instance does not match. So we are connecting using HTTP protocol.</p><p><img src="/../images/AWS-SAA-Architecting-for-Reliability-on-AWS/19.png" alt="" /><br /><img src="/../images/AWS-SAA-Architecting-for-Reliability-on-AWS/18.png" alt="" /></p><p>Also pay attention to the EC2 hostname, Web tier server information, ip-10-0-1-42 belongs to Public Subnet A, and one of the instance is running inside this subnet. App server information, ip-10-0-102-180 belongs to Private Subnet B, one of the instance is running inside this subnet too.</p><p><img src="/../images/AWS-SAA-Architecting-for-Reliability-on-AWS/20.png" alt="" /><br /><img src="/../images/AWS-SAA-Architecting-for-Reliability-on-AWS/21.png" alt="" /></p><p>If you refresh the URL a couple of times, you can see that the hostname ip we are connecting to changes, which means the load balancer redirect us to a different instance.</p><p><img src="/../images/AWS-SAA-Architecting-for-Reliability-on-AWS/22.png" alt="" /></p><p>Now, let us try to terminate both of the web tier instances and see if Auto Scaling will recreate the instances for us.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws autoscaling describe-auto-scaling-instances</span><br></pre></td></tr></table></figure><p>This command will list all the instances, we can find the instance ids in the list.</p><p><img src="/../images/AWS-SAA-Architecting-for-Reliability-on-AWS/23.png" alt="" /></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws ec2 termin ate-instances --instance-ids</span><br></pre></td></tr></table></figure><p>We can see Auto Scaling automatically recreate another two instances, the intance ids are different.</p><p>Use this command to delete the stack.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws cloudformation delete-stack --stack-name &quot;app-stack&quot;</span><br></pre></td></tr></table></figure><p>After deleting the stack, use this command to check if the stack has been deleted.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws cloudformation describe-stacks</span><br></pre></td></tr></table></figure><h4 id="section-four-summary"><a class="markdownIt-Anchor" href="#section-four-summary"></a> Section Four Summary</h4><ol><li>Use Stack template to deploy Auto Scaling multi-tier web application with load balancer.</li><li>Stack will automatically rollback everything if deploy failed.</li><li>Elastic load balancing and Auto Scaling work together. ELB provides health checks, Auto Scaling adds instances to the ELB target group.</li></ol><h4 id="section-five-multi-region-applications-with-route-53"><a class="markdownIt-Anchor" href="#section-five-multi-region-applications-with-route-53"></a> Section Five: Multi-region Applications with Route 53</h4><ol><li>Deploying a multi-region application</li><li>Active-active redundancy using weighted resource records</li><li>Active-passive redundancy using failover resource records</li><li>Route 53 health checks</li></ol><p>We are going to deploy two cloudFormation stacks into the same region to simulate the multi-region application deployment.</p><p>But because we have two URLs for the two Internet facing ALB, we need Route 53 to send traffic to these two ALBs. This is called an active-active scanario, because they are both active. We are going to create two weighted resource record sets with equal weight, so Route 53 will distribute traffic evenly.</p><p><img src="/../images/AWS-SAA-Architecting-for-Reliability-on-AWS/26.png" alt="" /><br /><img src="/../images/AWS-SAA-Architecting-for-Reliability-on-AWS/27.png" alt="" /></p><p>See the image above to create a new record.</p><p><img src="/../images/AWS-SAA-Architecting-for-Reliability-on-AWS/28.png" alt="" /></p><p>Create another record and route traffic to the two load balancers evenly.</p><p>Checklist for creating records</p><ol><li>Routing Policy: Weighted</li><li>Record name: www</li><li>Turn on Alias</li><li>Record Type: A</li><li>Route traffic to: Classic load balancer, region (us-east-1), webtier-app-stack-1</li><li>Weight: 50</li><li>Record ID: app-stack-1</li></ol><p><img src="/../images/AWS-SAA-Architecting-for-Reliability-on-AWS/29.png" alt="" /></p><p>The connection to the instance is now secure. (Notice the lock icon at top left corner, in front of the URL)</p><p>How to check if Route53 distribute the traffic evenly to two load balancers? Go to <a href="dnschecker.org">DNS checker</a> and type in <a href="http://www.theyuancheng.com">www.theyuancheng.com</a>. And you will see that half of the traffic ending in one IP.</p><p><img src="/../images/AWS-SAA-Architecting-for-Reliability-on-AWS/30.png" alt="" /></p><h4 id="active-passive-redundancy-using-failover-resource-records"><a class="markdownIt-Anchor" href="#active-passive-redundancy-using-failover-resource-records"></a> Active-passive Redundancy using Failover Resource Records</h4><ul><li>Primary region services all requests</li><li>Secondary region does not service any requests unless the primary fails</li><li>Also called active-standby architecture</li></ul><p>Two ways to run this architecture</p><p>Pilot Light: Secondary region runs minimal amount of resources to keep costs down. (in our case, maybe only one instance in the web tier and one instance in the app tier (normally should be 2 and 2)). When we need the secondary region, Auto Scaling can increase the instance number when needed.</p><p>Warm Standby: Secondary region has roughly the same capacity as the primary region. Quicker to start, doesn’t need Auto Scanling.</p><p><img src="/../images/AWS-SAA-Architecting-for-Reliability-on-AWS/31.png" alt="" /></p><p>Similar to what we did before, this time we create two records, one pointing to app-stack-1 and the other is pointing to app-stack-2. As long as app-stack-1 is healthy, Route 53 will not send any traffic to app-stack-2.</p><p><img src="/../images/AWS-SAA-Architecting-for-Reliability-on-AWS/32.png" alt="" /></p><p>For the Routing policy we choose Failover and Failover Record Type is Primary for the first record.(Secondary for the second record).</p><p><img src="/../images/AWS-SAA-Architecting-for-Reliability-on-AWS/33.png" alt="" /></p><p>Now both records are created. We can go the <a href="dnschecker.org">DNS checker</a> and check the differences.</p><p><img src="/../images/AWS-SAA-Architecting-for-Reliability-on-AWS/34.png" alt="" /></p><p>Now they all resolve to the same set of IP addresses.</p><p>Now let us try to shut down app-stack-1.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws cloudformation delete-stack --stack-name &quot;app-stack-1&quot;</span><br></pre></td></tr></table></figure><p><img src="/../images/AWS-SAA-Architecting-for-Reliability-on-AWS/35.png" alt="" /><br /><img src="/../images/AWS-SAA-Architecting-for-Reliability-on-AWS/36.png" alt="" /></p><p>Now the DNS checker returns a different set of ip addresses over time. (from 236, 12 to 252, 207)</p><h4 id="route-53-health-checks"><a class="markdownIt-Anchor" href="#route-53-health-checks"></a> Route 53 Health Checks</h4><p>We are going to use the two instances in app-stack-2, use below command to get the IPs</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws ec2 describe-instances --query &quot;Reservations[*].Instances[*].PublicIpAddress&quot; --output&#x3D;text</span><br></pre></td></tr></table></figure><p>Create Route 53 health checks. Type in the IPs of the instances.</p><p><img src="/../images/AWS-SAA-Architecting-for-Reliability-on-AWS/37.png" alt="" /></p><p>Once both health checks have been created, we can try to shut down one of them.</p><p><img src="/../images/AWS-SAA-Architecting-for-Reliability-on-AWS/38.png" alt="" /></p><p>Create another record with instance IP and health check.</p><p><img src="/../images/AWS-SAA-Architecting-for-Reliability-on-AWS/39.png" alt="" /><br /><img src="/../images/AWS-SAA-Architecting-for-Reliability-on-AWS/40.png" alt="" /></p><p>Route 53 will distribute traffic evenly to both instances, if one of the instances fail, the Route 53 health check will detect that and Route 53 will stop sending traffic to it. If you don’t need <strong>ELB</strong>, DNS based load balancing is a cost-effective option.</p><h4 id="course-summary"><a class="markdownIt-Anchor" href="#course-summary"></a> Course Summary</h4><ol><li>Architecture for availability</li><li>Setting up AWS environment</li><li>VPC(Subnets, NAT Gateways, Direct Connect, VPN, Transit Gateways)</li><li>CloudFormation, Elastic Load Balancing, Auto Scaling</li><li>Multi-region Applications(Route 53, Active-active weighted records, Active-passive failover records)</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> AWS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AWS SAM and CloudFront</title>
      <link href="2020/10/07/AWS-SAM-and-CloudFront/"/>
      <url>2020/10/07/AWS-SAM-and-CloudFront/</url>
      
        <content type="html"><![CDATA[<ol><li><a href="#part-one-aws-sam">Part One: AWS SAM</a></li><li><a href="#part-two-aws-sso">Part Two: AWS SSO</a></li><li><a href="#part-three-aws-cloudfront">Part Three: AWS CloudFront</a></li></ol><h2 id="part-one-aws-sam"><a class="markdownIt-Anchor" href="#part-one-aws-sam"></a> Part One: AWS SAM</h2><ul><li>Note: This is a brief introduction about how to setup a Serverless Application Model using VS Code and Nodejs. I will probably be adding more details later.</li></ul><h3 id="visual-studio-code"><a class="markdownIt-Anchor" href="#visual-studio-code"></a> Visual Studio Code</h3><ul><li>VS Code is an perfect IDE for writing/testing/deploying SAM. Some key points need attention are listed.</li></ul><ol><li>AWS credentials in Users/UserName/.aws folder.</li><li>Create yaml file with resources: lambda function, policies, runtime language, environment variable etc…</li><li>Writing lambda function in Nodejs, CROS policy…</li><li>CRUD operation: marshall/unmarshall object etc…</li><li>AWS CLI: package and deploy SAM to AWS</li></ol><ul><li>AWS CLI command to package and deploy SAM to AWS.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sam deploy --template-file output-yamlFileName.yaml --stack-name Your_Stack_Name --capabilities CAPABILITY_IAM</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sam package --template-file yamlFileName.yaml --s3-bucket S3_Bucket_Name --output-template-file output-yamlFileName.yaml</span><br></pre></td></tr></table></figure><ul><li>A very useful course I took about AWS SAM: <a href="https://app.pluralsight.com/library/courses/aws-deploying-serverless-applications-application-model/table-of-contents">Deploying Serverless Applications in AWS Using the Serverless Application Model</a></li></ul><h2 id="part-two-aws-sso"><a class="markdownIt-Anchor" href="#part-two-aws-sso"></a> Part Two: AWS SSO</h2><h3 id="create-custom-saml-application"><a class="markdownIt-Anchor" href="#create-custom-saml-application"></a> Create Custom SAML Application</h3><p>We can use AWS SSO as an IDP for our web application.</p><p>Create new Custom SAML 2.0 application.</p><p><img src="/../images/AWS-SAM-and-CloudFront/8.png" alt="" /></p><p>This is IDP metadata, we will download it after finishing configuring return attributes.</p><p><img src="/../images/AWS-SAM-and-CloudFront/9.png" alt="" /></p><p>This is SP metadata, which we will prepare and upload.</p><p><img src="/../images/AWS-SAM-and-CloudFront/10.png" alt="" /></p><p>This is where we config the return attribute in SAML response. Supported attribute list can be found [here](https://docs.aws.amazon.com/singlesignon/latest/userguide/attributemappingsconcept.html?icmpid=docs_sso_console)</p><p><img src="/../images/AWS-SAM-and-CloudFront/11.png" alt="" /></p><h3 id="create-users"><a class="markdownIt-Anchor" href="#create-users"></a> Create Users</h3><ul><li>Users can be created by simply fill this form. You can also setup MFA device after creating the user.</li></ul><p><img src="/../images/AWS-SAM-and-CloudFront/12.png" alt="" /></p><h2 id="part-three-aws-cloudfront"><a class="markdownIt-Anchor" href="#part-three-aws-cloudfront"></a> Part Three: AWS CloudFront</h2><h3 id="restricting-access-to-files-in-amazon-s3-buckets"><a class="markdownIt-Anchor" href="#restricting-access-to-files-in-amazon-s3-buckets"></a> Restricting Access to Files in Amazon S3 Buckets</h3><ul><li>You can optionally secure the content in your Amazon S3 bucket so that users can access it through CloudFront but cannot access it directly by using Amazon S3 URLs. This prevents someone from bypassing CloudFront and using the Amazon S3 URL to get content that you want to restrict access to. (Using Origin Access Identity)</li></ul><h3 id="block-all-public-access-to-s3-bucket"><a class="markdownIt-Anchor" href="#block-all-public-access-to-s3-bucket"></a> Block all public access to S3 bucket</h3><p><img src="/../images/AWS-SAM-and-CloudFront/1.png" alt="" /></p><p><img src="/../images/AWS-SAM-and-CloudFront/2.png" alt="" /></p><ul><li>When creating new distribution in CloudFront, do the following steps</li></ul><ol><li>Select Web distribution</li><li>Select the S3 bucket you want to connect to</li><li>Select Redirect HTTP to HTTPS if you don’t want people to access your content by HTTP requests</li><li>Select Yes for ‘Restrict Viewer Access’</li><li>Select Self as trusted signer</li></ol><h3 id="create-trusted-signer"><a class="markdownIt-Anchor" href="#create-trusted-signer"></a> Create Trusted Signer</h3><p>Note When 'Restrict Viewer Access' is selected, you can specify which account is the 'Trusted Signer'. Which means they have the permission to create signed URL or signed cookie for people to access your private content.</p><p>Self is the default 'Truested Signer', which is the account your are currently using. You can also add another accounts by entering their account ID.</p><h3 id="create-another-behavior"><a class="markdownIt-Anchor" href="#create-another-behavior"></a> Create another behavior</h3><ul><li>Login page should be accessiable by public, so as the js, css and image files. So we should create another behavior to let CloudFront know which file access is retricted and which are not.</li></ul><p><img src="/../images/AWS-SAM-and-CloudFront/3.png" alt="" /></p><p>Path Pattern decides which files can be set to public(also select No for 'Retrict Viewer Access' this time)</p><p>Rules about Path Pattern can be found [here](https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#DownloadDistValuesPathPattern)</p><h3 id="create-cloudfront-key-pairs"><a class="markdownIt-Anchor" href="#create-cloudfront-key-pairs"></a> Create CloudFront Key Pairs</h3><p>We need CloudFront key pairs to create signed URLs and signed Cookies, they are a pair of public and private keys AWS uses to encrypt requests people send to CloudFront, so it knows whether they are authenticated users.</p><p>This step can only be done using AWS root account, IAM account cannot create CloudFront key pairs.</p><p><img src="/../images/AWS-SAM-and-CloudFront/4.png" alt="" /></p><ul><li>Save the private key pem file and Access key ID to a save place. We will use it later.</li></ul><h3 id="create-signed-url"><a class="markdownIt-Anchor" href="#create-signed-url"></a> Create Signed URL</h3><p>This is the most important part.</p><p>I used two ways to create signed URL, nodejs and C#. I use nodejs to create a lambda function as an API, which will return the signed URL generated. I also add this feature to the SAML project, so when IDP returned SAML response, I can add signed details to the URL and redirect user to the home page.</p><p><img src="/../images/AWS-SAM-and-CloudFront/5.png" alt="" /></p><p>Note that yaml file supports multiple line string (a vertical line followed by a hyphen), so we can add private key string in the yaml file as a environment variable, so as the public key.</p><p><img src="/../images/AWS-SAM-and-CloudFront/13.png" alt="" /></p><p>Also note expiry time input are in [Unix Epoch Time format](https://www.epochconverter.com/) in miliseconds(13 digits). However, the expires argument in the signed URL are in seconds format (10 digits).</p><p>Also note that C# doesn't recognize private key string in PEM format. We have to convert it to XML format before create signed URL.</p><p><img src="/../images/AWS-SAM-and-CloudFront/6.png" alt="" /></p><ul><li>The signed URL created will append three arguments at the end of the original URL: Expires, Signature and Key-Pair-Id</li></ul><p><img src="/../images/AWS-SAM-and-CloudFront/7.png" alt="" /></p><ul><li>Note the signature contains information about the original URL so you cannot reuse it with different URLs. We have to generate new signed URLs when direct user to other pages.(this will also refresh the session time, which is we want.)</li></ul><h3 id="create-signed-cookies"><a class="markdownIt-Anchor" href="#create-signed-cookies"></a> Create Signed Cookies</h3><p>NodeJs: Signed Cookies can be created using below code. I used <a href="https://github.com/h-arora/aws-cloudfront-cookie-signer/blob/master/cookieSign.js">this</a> post as a reference.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&quot;use strict&quot;</span><br><span class="line">const AWS &#x3D; require(&quot;aws-sdk&quot;)</span><br><span class="line"></span><br><span class="line">exports.handler &#x3D; async (event, context, callback) &#x3D;&gt; &#123;</span><br><span class="line">    var cfsign &#x3D; require(&#39;aws-cloudfront-sign&#39;);</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; 5 seconds</span><br><span class="line">    var expireTime &#x3D; Math.floor((+new Date() + 1000 * 300) &#x2F; 1000);</span><br><span class="line">    </span><br><span class="line">    var signingParams &#x3D; &#123;</span><br><span class="line">    keypairId: process.env.PUBLIC_KEY,</span><br><span class="line">    privateKeyString: process.env.PRIVATE_KEY,</span><br><span class="line">    &#x2F;&#x2F; Optional - this can be used as an alternative to privateKeyString</span><br><span class="line">    &#x2F;&#x2F;privateKeyPath: &#39;&#x2F;path&#x2F;to&#x2F;private&#x2F;key&#39;,</span><br><span class="line">    expireTime: expireTime</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    const body &#x3D; JSON.parse(event.body);</span><br><span class="line">    </span><br><span class="line">    &#x2F;&#x2F; Method 2: Generating singed Cookies</span><br><span class="line">    let policy &#x3D; &#123;</span><br><span class="line">        &#39;Statement&#39;: [&#123;</span><br><span class="line">        &#39;Resource&#39;: body.url + &#39;*&#39;,</span><br><span class="line">        &#39;Condition&#39;: &#123;</span><br><span class="line">            &#39;DateLessThan&#39;: &#123;&#39;AWS:EpochTime&#39;: expireTime&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;;</span><br><span class="line">    let policyString &#x3D; JSON.stringify(policy);</span><br><span class="line">    const signer &#x3D; new AWS.CloudFront.Signer(signingParams.keypairId, signingParams.privateKeyString);</span><br><span class="line"></span><br><span class="line">    const options &#x3D; &#123;</span><br><span class="line">    url: body.url,</span><br><span class="line">    policy: policyString</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    const signedCookie &#x3D; signer.getSignedCookie(options);</span><br><span class="line"></span><br><span class="line">    var response &#x3D; &#123;</span><br><span class="line">        statusCode: 200,</span><br><span class="line">        headers: &#123;</span><br><span class="line">            &quot;Access-Control-Allow-Origin&quot; : &quot;*&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        body: JSON.stringify(signedCookie)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    callback(null, response);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>By default, CloudFront caches a response from Amazon S3 for 24 hours, so if you just updated contents in S3 bucket, CloudFront may still serve you the outdated content. Use the below code in cmd to force CloudFront to update its files from S3.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aws cloudfront create-invalidation --distribution-id &#39;YOUR DISTRIBUTION ID&#39; --paths &quot;&#x2F;*&quot;</span><br></pre></td></tr></table></figure><h3 id="references"><a class="markdownIt-Anchor" href="#references"></a> References</h3><ol><li><a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-task-list.html">Task List for Serving Private Content using S3 and CloudFront</a></a></li><li><a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-restricting-access-to-s3.html">Restricting Access to Amazon S3 Content by Using an Origin Access Identity</a></a></li><li><a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-trusted-signers.html">Specifying the AWS Accounts That Can Create Signed URLs and Signed Cookies (Trusted Signers)</a></a></li><li><a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-trusted-signers.html#private-content-reformatting-private-key">Reformatting the CloudFront Private Key (.NET and Java Only)</a></a></li><li><a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-signed-urls.html">Using Signed URLs</a></a></li><li><a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/private-content-creating-signed-url-canned-policy.html">Creating a Signed URL Using a Canned Policy</a></a></li><li><a href="https://aws.amazon.com/blogs/developer/creating-amazon-cloudfront-signed-urls-in-node-js/">Code Example: Creating Amazon CloudFront Signed URLs in Node.js</a></a></li><li><a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/CreateSignatureInCSharp.html">Code Example: Create a URL Signature Using C# and the .NET Framework</a></a></li><li><a href="https://github.com/h-arora/aws-cloudfront-cookie-signer/blob/master/cookieSign.js">Code Example: Create Signed Cookies using NodeJs</a></a></li><li><a href="https://medium.com/@himanshuarora/protect-private-content-using-cloudfront-signed-cookies-fd9674faec3">Test Signed Cookies using Postman</a></a></li><li><a href="https://www.epochconverter.com/">Epoch &amp; Unix Timestamp Conversion Tools</a></a></li><li><a href="https://aws.amazon.com/premiumsupport/knowledge-center/cloudfront-serving-outdated-content-s3/">Why is CloudFront serving outdated content from Amazon S3?</a></a></li><li><a href="https://stackoverflow.com/questions/8637419/rsa-public-private-keys-in-yaml">RSA public/private keys in YAML</a></a></li><li><a href="https://stackoverflow.com/questions/9091900/how-can-i-convert-pem-public-key-to-rsa-public-key-with-bouncycastle-in-c">Convert PEM to XML in C#</a></a></li><li><a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/distribution-web-values-specify.html#DownloadDistValuesPathPattern">CloudFront Path Pattern Rules</a></a></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> AWS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Wishlist 2021</title>
      <link href="2020/10/06/Wishlist-2021/"/>
      <url>2020/10/06/Wishlist-2021/</url>
      
        <content type="html"><![CDATA[<ol><li>Get AWS SAA C02 certificate</li><li>Finish 1500+ Leetcode Problems (at least 2 problems per day)</li><li>Get 2000+ points in Leetcode contests</li><li>Setup a simple LAMP website</li><li>Get a new job by the end of year 2021</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Wishlist </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dynamic Programming</title>
      <link href="2020/08/27/Dynamic-Programming/"/>
      <url>2020/08/27/Dynamic-Programming/</url>
      
        <content type="html"><![CDATA[<h2 id="lecture-1-introduction"><a class="markdownIt-Anchor" href="#lecture-1-introduction"></a> Lecture 1 Introduction</h2><h3 id="什么是动态规划"><a class="markdownIt-Anchor" href="#什么是动态规划"></a> 什么是动态规划？</h3><ul><li>1.计数型</li><li>有多少种方式走到右下角</li><li>有多少种方法选出k个数使得和是Sum</li><li>2.求最大最小值</li><li>从左上角到右下角的路径的最大数字和</li><li>最长上升子序列长度</li><li>3.求存在性</li><li>取石子游戏，先手是否必胜</li><li>能不能选出k个数使得和是sum</li><li>Coin Change(最大最小型)</li><li>一般想法：先用面值大的硬币，最后想办法用小硬币</li><li>动态规划四个步骤</li><li><ol><li>确定状态</li></ol></li><li>一般来说，解决动态规划需要开一个数组，可能是一维的或者二维的，要确定数组的每一个元素代表什么</li><li>转移方程有几个变量就需要创建几维数组</li><li>确定状态需要两个意识：最后一步是什么，子问题是什么</li><li><ol start="2"><li>转移方程</li></ol></li><li>每个子问题到下一个子问题的过程</li><li><ol start="3"><li>初始条件和边界情况</li></ol></li><li>什么时候停下来？初始条件是什么?</li><li><ol start="4"><li>计算顺序</li></ol></li><li>一般是从小到大</li><li>Coin Change</li><li>从第一步算到m步，每一步算n次，其中m为最后的硬币sum，n为总共有多少种不用的硬币，时间复杂度为O（m*n）</li><li>最后一步是由前面几步的最小值确定的，所以先确定前面的值，从小到大，就能判断出最后一步的值</li><li>Unique Path:计数型</li><li>Jump Game：存在型</li></ul><h3 id="lecture-2-coordinates-and-bit-operation"><a class="markdownIt-Anchor" href="#lecture-2-coordinates-and-bit-operation"></a> Lecture 2 Coordinates and Bit Operation</h3><ul><li>序列型：前i个，最小，方式数，可行性。。</li><li>Paint House</li><li>分别记录每栋房子之前的房子的每种颜色的最小花费</li><li>划分型</li><li>Decode ways</li><li>解密数字串即划分成若干段数字，每段数字对应一个字母</li><li>知道前N-1和N-2个数字分别有多少种方式，再相加</li><li>坐标型</li><li>需要找到序列中某些子序列或者网格中的某条路径：计数，最大，最小，存在性</li><li>Minimum Path Sum</li><li>空间优化：计算第i行时，只需要i行和i-1行的f值（滚动数组）</li><li>Bomb Enemy</li><li>给定输入为序列或者网格矩阵</li><li>问题一般为：以第i个元素结尾的某种性质，到格子（i， j）的路径的性质</li><li>Minimum path sum打印路径：新建一个二维数组，记录每次的方向，然后从最后（右下角）往前推，最后记住要反转数组才是从开始到结束的顺序</li><li>位操作型动态规划</li><li>Counting bits: removing the last bits</li></ul><h3 id="lecture-3-sequence"><a class="markdownIt-Anchor" href="#lecture-3-sequence"></a> Lecture 3 Sequence</h3><ul><li>给定一个序列，转移方程f（i）下标i表示前i个元素的某种性质， f(0)就是空序列的性质</li><li>Paint House II: Similar to Paint House I, Optimization: pick the smallest and the second smallest cost of all colors, reduce the min calculation to O(1) and totoal time complexity from O(N * K * K) to O(N * K * 2), where N is the number of houses and K is the number of colors</li><li>House Robber</li><li>House Robber II:想办法把圈断开，分两种情况处理，变成两种序列情况</li><li>Buy and Sell Stock III:分成五个状态，分别记录下每天每个状态的情况（类似于Paint house）</li><li>Russian Doll Envelope</li></ul><h3 id="lecture-4-划分型博弈型背包型"><a class="markdownIt-Anchor" href="#lecture-4-划分型博弈型背包型"></a> Lecture 4 划分型，博弈型，背包型</h3><ul><li>划分型</li><li>Perfect Squares</li><li>Palindrome Partitioning II:1. find all possible palindrome from the string s ans store them in a 2d array expand palindrome start and end index to both sides. 2. partition dp: dp[i] = min(dp[i], dp[j] &amp;&amp; isPalin(s[j][i - 1]))</li><li>Copy Books(LintCode)</li><li>划分型dp关键字：连续！Substring, continuous subarray</li><li>博弈型(两方游戏)</li><li>从第一部开始分析!!!问题规模会越来越小。</li><li>Coins in a line: Alince and Bob takes one or two coins each turn</li><li>Alice先手还剩N个Coin，与Bob先手还剩N-1个Coin是一样的，所以每个局面都可以看成是先手但是剩下不同数量的Coin</li><li>背包型</li><li>你有一个背包，背包有最大承重</li><li>商店里有若干物品，都是免费拿</li><li>目标： 1. 装下最多重量的物品， 2. 装下最大总价值的物品。 3. 有多少种方式正好带走满满一书包物品</li><li>给定背包最大承重M， 物品的重量都是整数</li><li>每个方案的总重量都是从0到M</li><li>对于每个重量方案，我们要知道能不能做到</li><li>Note：背包问题中，dp数组大小和总承重有关</li><li>现在需要知道前N个物品能否拼出重量W</li><li>如果前N-1个物品能拼出W，当然前N个物品也可以拼出W</li><li>如果前N-1个物品能拼出W-A(N-1),A(N-1)为第N个物品的重量，那么前N个物品也能拼出W</li><li>BackPack I - V</li><li>Coin Change 1, 2</li><li>当每个物品只能用一次时，需要多开一维的dp数组去计算前N个物品的方式</li></ul><h3 id="lecture-5-背包型-区间型"><a class="markdownIt-Anchor" href="#lecture-5-背包型-区间型"></a> Lecture 5 背包型, 区间型</h3><ul><li>背包型</li><li>Backpack II：现在每个物品有价值，求能带走最大多少价值的物品</li><li>f[i][j]: 用前i个物品拼出重量j时的最大总价值，j = -1表示不能拼出</li><li>dp[i][j] = Math.max(dp[i - 1][j], dp[i - 1][j - nums[i - 1]] + Value[i - 1])</li><li>区间型：当子问题还是连续的index时</li><li>Scramble String</li><li>Burst Ballons</li><li>消去型的题目要从后往前想，最后一步只剩一个，然后往前想</li><li>先从小的len开始计算</li></ul><h3 id="lecture-6-双序列型"><a class="markdownIt-Anchor" href="#lecture-6-双序列型"></a> Lecture 6 双序列型</h3><ul><li>有两个序列</li><li>每个序列本身是一维的</li><li>可以转化为二维的动态规划</li><li>查看最后一个字符是否匹配，缩减问题规模</li><li>易错点： 记得初始化，空串处理，结果是否 + 1</li><li>Longest common subsequence</li><li>Interleaving String</li><li>Edit Distance</li><li>Distinct Distance</li><li>Regular Expression Matching</li><li>Wildcard Matching</li><li>Ones and Zeros</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Dynamic Programming </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Harvard CS75 Web Development</title>
      <link href="2020/06/30/Harvard-CS75-Web-Development/"/>
      <url>2020/06/30/Harvard-CS75-Web-Development/</url>
      
        <content type="html"><![CDATA[<ol><li><a href="#chapter-0-http">Chapter 0: HTTP</a></li><li><a href="#chapter-1-php">Chapter 1: PHP</a></li><li><a href="#chapter-2-php-continued">Chapter 2: PHP Continued</a></li><li><a href="#chapter-3-mvc-xml">Chapter 3: MVC XML</a></li><li><a href="#chapter-4-sql">Chapter 4: SQL</a></li><li><a href="#chapter-5-sql-continued">Chapter 5: SQL Continued</a></li><li><a href="#chapter-6-javascript">Chapter 6: JavaScript</a></li><li><a href="#chapter-7-ajax">Chapter 7: AJAX</a></li><li><a href="#chapter-8-security">Chapter 8: Security</a></li><li><a href="#chapter-9-scalability">Chapter 9: Scalability</a></li></ol><h2 id="chapter-0-http"><a class="markdownIt-Anchor" href="#chapter-0-http"></a> Chapter 0: HTTP</h2><h3 id="what-happens-after-you-pressing-enter"><a class="markdownIt-Anchor" href="#what-happens-after-you-pressing-enter"></a> What happens after you pressing Enter?</h3><ul><li>The URL address will be translate to an IP address. 我们现在所用的IP address是ipv4,它由四组0-255的数字组成，总共32bits，可以有40亿总可能，我们现在每个人都有很多设备，ipv4的组合已经快不够用了。</li><li>所以新的ipv6要替代原来的ip address，它由8组4位的16进制组成，总共有128bits</li><li>怎么样将hostname网址转换成IP address呢？我们需要用到DNS（Domain name server）,他储存有ip address到hostname的一个mapping table，如果你访问的网址不在这个DNS里，他就会不断的访问上级服务器，直到访问到root server，root server知道谁有可能知道这个ip address，在不断的访问到下级服务器/DNS，直到找到并把hostname转换成ip address</li><li>互联网就像一个邮件系统，我们现在知道邮件该送给谁，我们知道自己的ip address(return address). 我们就可以把信息送给我们想送的网站，<a href="http://xn--google-hh4kj42j.com">比如google.com</a>，他收到信后，会拆开看我们相访问哪个网址，比如index.html,然后把我们想要的内容装进信封，颠倒送件人和收件人，然后送回来，我们拆开信封看到html信息，浏览器就会显示这些信息</li><li>Private Ip address</li><li>对于一个家庭来说，所有的设备共享一个公共ip，但是每个设备都会有自己的private ip，192.168.x.y. 或者172.16.x.y. 当你需要很多设备时，比如在大型公司，你可以使用10.x.y.z</li><li>TCP/IP</li><li>IP用来确认谁要向谁传送信息，TCP就是传送协议</li><li>Port Number</li><li>信息的传送有很多种，不光是HTTP，还有邮件，短信等等，我们使用不同的port number来让服务器知道进来的request是哪种请求，比如HTTP: TCP 80，我们让服务器听取port 80的网页请求，还可以SMTP: TCP 25让服务器听取port 25 的邮件请求， HTTPS： TCP 443, 加密的网页请求。</li><li>现在的浏览器会自动在网址后面加上port number</li><li>Getting your own domain name</li><li>我们的设备虽然可以联网，但是他只有一个公共ip，如果我们想host我们自己的网站，我们就需要有一个域名 GoDaddy, NameCheap</li><li>Hosting your own website</li><li>当我们有了域名之后，我们还需要一个web server用来存放我们的网站相关文件，HTML， CSS， JAVASCRIPT等等，这需要我们再找一个提供DNS服务的公司（<a href="http://dreamhost.com">dreamhost.com</a>），向他们租用一些online storeage，他们也会提供两个ip addresses（还有一个是备用的）。并且与我们的域名关联</li><li>DNS</li><li>例子：如果你的网站是一个邮件服务网站，比如Google email。我们的email虽然可以是yuan@unicard.com，但是其实我们使用的是Google的邮件服务，DNS识别出以unicard结尾的邮件地址是属于Google的一个服务，并把他发送到Google的服务器。</li><li>NS Name Server</li><li>一个NS record的作用是告诉大家哪个name server知道关于我们域名的一些信息</li><li>NS stands for ‘name server’ and this record indicates which DNS server is authoritative for that domain (which server contains the actual DNS records). A domain will often have multiple NS records which can indicate primary and backup name servers for that domain</li><li>A</li><li>A record的作用是把ip address和域名相连(Domain name to ip address)</li><li>CNAME Canonical name</li><li>与A record不同的是CNAME是把域名和域名相连(Domain name to domain name)，因为比如我们相用Google的邮件服务，所以我们想把yuan@unicard.com，关联到yuan@google.com,然后Google用他们呢的DNS server去把他转换成ip address，我们就不用担心Google改变他的ip address了。 再比如说，如果Dell公司的客户服务是外包出去的，那么我们访问Dell的网站，在通过Dell官网进入到他们的客户服务网站，我们就会发现我们从<code>Dell.com</code> 到了<code>customerService.com</code>，这样可能不太好，Dell想让他的网站看起来是一个整体，所以就可以用CNAME让<code>customerService.com</code>的名字隐藏起来，只显示成<code>support.dell.com</code></li></ul><p><img src="/../images/Harvard-CS75-Web-Development/1.png" alt="" /></p><ul><li>MX Mail Exchange</li><li>MX record把负责处理请求的server和他们的ip address相连，这样就可以知道进来的email请求该由哪个server负责</li></ul><h3 id="what-happens-when-you-reach-the-target-website"><a class="markdownIt-Anchor" href="#what-happens-when-you-reach-the-target-website"></a> What happens when you reach the target website?</h3><ul><li>Web host</li><li>Web host companies host multiple websites with one ip address, they share one ip address. Server response with different content based on the headers in the request</li><li>If the hosting server is using Php v4.3, you have to use the same. If the hosting server is down, all websites related to this server is also down.</li><li>VPS(Virtual Private Server)</li><li>VMware, Parallels, Virtual Box</li><li>Install multiple instances of Windows or Linux or MacOS on the server, and you can control the software and tools on that VPS</li><li>SSH/SFTP</li><li>SSH: Connecting to a remote server and execute commands on it. SFTP: Transfer files to a remote server.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">telnet www.google.com 80</span><br><span class="line"></span><br><span class="line">GET &#x2F; HTTP&#x2F;1.1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(press enter twice)</span><br></pre></td></tr></table></figure><ul><li>If your webiste is hosted by a server that are shared with other website, you have to send a get request with a host header specify your domain name. Otherwise the server don’t know what content to return.</li><li>nslookup <a href="http://google.com">google.com</a></li><li>will list ip address for that host</li><li>sudo vi /etc/hosts</li><li>this is a local ip address &lt;-&gt; domain name mapping table, browser will check this file first before sending any request</li></ul><h2 id="chapter-1-php"><a class="markdownIt-Anchor" href="#chapter-1-php"></a> Chapter 1: PHP</h2><h3 id="apache"><a class="markdownIt-Anchor" href="#apache"></a> Apache</h3><ul><li>Configuration file for Apache web server: httpd.conf, apache.conf, apache2.conf</li></ul><p><img src="/../images/Harvard-CS75-Web-Development/2.png" alt="" /></p><ol><li>listen to port 80 of any ip addresses of incoming requests</li><li>ServerName and ServerAlias: the destination of the incoming requests, both will need an A record in DNS to work (or CNAME)</li><li>CustomLog, ErrorLog: Specify where to save the log files</li><li>DocumentRoot: Root path of your website</li><li>port 443 uses SSL(Secure socket layer), needs a certificate to be installed on the server.<br />SSL: there are two keys, public key and private key, when a user visits our website, the website sends the public key to the user’s machine, user uses it to encrypt the message. Then when our website receives the message from the user, we use the private to decrypt it to get the original message. But this is not enough, we need to ask some Certificate Authorization(CA) for a certificate. This is because user doesn’t trust our website. but because our website is trusted by a CA, so the user can trust our website. Certificate needs to be digitally signed.</li><li>SSLCertificateKeyFile: the private key on the server</li><li>SSLCertificateFile: the certificate</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mod_rewrite</span><br><span class="line"></span><br><span class="line">RewriteEngine On</span><br><span class="line">RewriteCond %&#123;HTTP_HOST&#125; !^www\.cs75\.net [NC]</span><br><span class="line">RewriteRule (.*) https:&#x2F;&#x2F;www.cs75.net&#x2F;$1 [R&#x3D;301, L]</span><br></pre></td></tr></table></figure><ul><li><ol><li>HTTP_HOST is an environment variable, it is the host name. In English, the first line is a condition, it is saying if the host name is not starting with <a href="http://www.cs75.net">www.cs75.net</a>(Regex), do the following line, [NC], no case, case insensetive</li></ol></li><li><ol start="2"><li>(.*) one or more any characters, it remembers what user was typing, redirect user to the correct URL, 301 move permanently, the browser saves the result and next time will redirect you automatically. whereas 302 is move temporarily.</li></ol></li><li>The reason to do this is to make sure the URL in user’s browser is the website URL. Because there are multiple ways to visit the website and not typing the website URl. We could use ip address, we could use ‘udo vi /etc/hosts’(see end of lecture 0). So this will make sure that the URL will always be <a href="http://www.cs75.net">www.cs75.net</a> no matter what user originally typed.</li><li>XAMPP</li><li>Linux, Apache, MySQL, PHP, Perl</li><li>We can set up our dynamic website without using remote virtual server, people from outside world cannot visit it. But it is good for development purposes</li><li>GET/POST</li><li>GET: will change the state of the url, add parameters behind the quesiont mark ‘?’, parameters are separated by &amp;, everything will be shown in URL, not good to send sensitive or huge information</li><li>POST: can upload files(images), it is not in URL, can send sensitive information. Post request cannot be copied. One of the downsides of POST is that when user click reload or backbutton, browser will try to submit the form again, you may end up buying things twice. One of the solutions would be, whenever user submitted a form, immediately redirect user to another website page with only GET request, so they cannot revisit the POST request page anymore.</li><li>PHP</li><li>Very well documented. Interpreted(alternative to compiled) language, you don’t need to compile it first then to run it, you can just give your code to a interpreter and it will run. Downside is performance. Once a C++ language be compiled, the complied code can be run by CPU superfast. whereas PHP needs to be interpreted everytime.</li><li>suPHP</li><li>Web servers usually have root user(administrator) and other users. If you are user A, and you want the web server to be able to use your PHP code. You have to set them to be readable. Then another user B would be able to see your PHP code. Use suPHP could solve this issue. It makes sure that web server can only execute A’s code when A’s logged in. And B cannot see it when B’s logged in. And A can only delete A’s file, so no one else could modify or break A’s code. If A’s website’s users upload files or images, they are stored in the server where only A can see.</li><li>Variables</li><li>Data Types(loose in PHP), PHP functions will return different data types based on situations</li><li>Superglobals</li></ul><ol><li>$_COOKIE, key values from browser</li><li>$_ENV, lower details of user’s machine</li><li>$_FILES</li><li>$_GET, hash table</li><li>$_POST, array</li><li>$_REQUEST, details from requests</li><li>$_SERVER, user agent, browser and OS</li><li>$_SESSION, states, save values</li></ol><ul><li>Command line</li><li>mkdir, make directory</li><li>cd, change directory</li><li>cat/more, show content of a file</li><li>ls, list content of a directory</li><li>. current folder</li><li>… parent folder</li><li>ls -al, list permission settings for all files in current directory</li><li>chmod, change mode of a file or directory: e.g. chmod a+r filename: give read access to a file called filename</li><li>permission settings looks like this: -rw-rw-r–, the first - means it is a file or it can be ‘d’ for directory, it can then be split into three groups, they are the owner, the group and the world.</li><li>Use $_GET[‘username’] to get the variable values user send by GET request.</li><li>Use htmlspecialchars to escape all html tags to sanity check user inputs</li></ul><h2 id="chapter-2-php-continued"><a class="markdownIt-Anchor" href="#chapter-2-php-continued"></a> Chapter 2: PHP Continued</h2><ul><li>PHP is an interpreted language, it can be run at anywhere no matter what the PC is like. Compiled language depends on the PC, it may run at one PC and may not run at another.</li><li>POST request</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;pre&gt;</span><br><span class="line">    &lt;?php print_r($_POST) ?&gt;</span><br><span class="line">&lt;&#x2F;pre&gt;</span><br></pre></td></tr></table></figure><ul><li>use print_r to recursivly display all data inside the POST request</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;?</span><br><span class="line">    if (empty($_POST[&#39;fname&#39;]) || empty($_POST[&#39;lname&#39;])) &#123;</span><br><span class="line">        header(&quot;Location: http:&#x2F;&#x2F;localhost&#x2F;yuan&quot;);</span><br><span class="line">        exit;</span><br><span class="line">    &#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><ul><li>check if necessary form information is filled(not empty). If not, redirect user back to the previous form page. header(“Location: URL”) is to redirect user</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;? if (empty($_POST[&#39;fname&#39;]) || empty($_POST[&#39;lname&#39;])): ?&gt;</span><br><span class="line">    You must provide your full name and gender to continue. Go &lt;a href&#x3D;&quot;index.html&quot;&gt;back&lt;&#x2F;a&gt;</span><br><span class="line">&lt;? else: ?&gt;</span><br><span class="line">    You are registered!</span><br><span class="line">    &lt;pre&gt;&lt;? print_r($_POST) ?&gt;&lt;&#x2F;pre&gt;</span><br><span class="line">&lt;? endif ?&gt; </span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;? if (empty($_POST[&#39;fname&#39;]) || empty($_POST[&#39;lname&#39;])) &#123; ?&gt;</span><br><span class="line">    You must provide your full name and gender to continue. Go &lt;a href&#x3D;&quot;index.html&quot;&gt;back&lt;&#x2F;a&gt;</span><br><span class="line">&lt;? &#125; else &#123; ?&gt;</span><br><span class="line">    You are registered!</span><br><span class="line">    &lt;pre&gt;&lt;? print_r($_POST) ?&gt;&lt;&#x2F;pre&gt;</span><br><span class="line">&lt;? &#125; ?&gt; </span><br></pre></td></tr></table></figure><ul><li>if else conditions in PHP supports both colon and curly brackets</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">if (!empty($_POST[&#39;fname&#39;]) &amp;&amp; !empty($_POST[&#39;lname&#39;])) &#123;</span><br><span class="line">    $to &#x3D; &#39;chengyuan82281681@hotmail.com&#39;;</span><br><span class="line">    $subject &#x3D; &#39;Registration&#39;;</span><br><span class="line">    $body &#x3D; &quot;This person just registered!\n\n&quot; .</span><br><span class="line">    $_POST[&#39;fname&#39;] . &quot;\n&quot; .</span><br><span class="line">    $_POST[&#39;lname&#39;];</span><br><span class="line">    $headers &#x3D; &quot;From: chengyuan82281681@hotmail.com\r\n&quot;;</span><br><span class="line">    mail($to, $subject, $body, $headers);</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">    header(&quot;Location: http:&#x2F;&#x2F;localhost&#x2F;yuan&#x2F;index.html&quot;);</span><br><span class="line">    exit;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Dot symbol is a concatenation symbol, connect two strings into one</li><li>This mail function comes with PHP doesn’t uaually work on local network, because ISP blocks outbound port 25 for SMTP. Same reason as they block port 80.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;?</span><br><span class="line">    if (isset($_POST[&#39;action&#39;])) &#123;</span><br><span class="line">        if (empty($_POST[&#39;fname&#39;]) || empty($_POST[&#39;lname&#39;])) &#123;</span><br><span class="line">            $error &#x3D; true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">&lt;? if ($error): ?&gt;</span><br><span class="line">    &lt;div style&#x3D;&quot;color: red&quot;&gt;You must fill out the form!&lt;&#x2F;div&gt;</span><br><span class="line">&lt;? endif ?&gt;</span><br></pre></td></tr></table></figure><ul><li>To be able to check form errors using PHP code, index.html has to be changed to index.php</li><li>in index.php, setup a variable named ‘action’(other names work too) and send it to the backend, the server code will know if user submit a form by checking by variable.</li><li>if form has errors, send user back to itself with errors.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$DORMS &#x3D; array(&quot;one&quot;, &quot;two&quot;, &quot;three&quot;);</span><br><span class="line">&lt;? foreach ($DORMS as $dorm): ?&gt;</span><br><span class="line">    &lt;option value&#x3D;&quot;&lt;?&#x3D; $dorm ?&gt;&quot;&gt;&lt;?&#x3D; $dorm ?&gt;&lt;&#x2F;option&gt; </span><br><span class="line">&lt;? endforeach ?&gt;</span><br></pre></td></tr></table></figure><ul><li>Define array in PHP</li><li>Foreach loop in PHP</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?</span><br><span class="line">    foreach ($DORMS as $dorm) &#123;</span><br><span class="line">        if (isset($_POST[&quot;dorm&quot;]) &amp;&amp; $_POST[&quot;dorm&quot;] &#x3D;&#x3D; $dorm)</span><br><span class="line">            echo &quot;&lt;option selected&#x3D;&#39;selected&#39; value&#x3D;&#39;$dorm&#39;&gt;$dorm&lt;&#x2F;option&gt;&quot;;</span><br><span class="line">        else</span><br><span class="line">            echo &quot;&lt;option value&#x3D;&#39;$dorm&#39;&gt;$dorm&lt;&#x2F;option&gt;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><ul><li>When redirect user back because there are some errors in the form, the selected value will stay</li><li>Xdebug: extension of PHP to debug.</li></ul><h3 id="let-website-remember-your-login-with-sessions"><a class="markdownIt-Anchor" href="#let-website-remember-your-login-with-sessions"></a> Let website remember your login with sessions</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;?</span><br><span class="line">    &#x2F;&#x2F; 1</span><br><span class="line">    session_start();</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 2</span><br><span class="line">    define(&quot;USER&quot;, &quot;yuan&quot;);</span><br><span class="line">    define(&quot;PASS&quot;, &quot;123&quot;);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 3</span><br><span class="line">    if (isset($_POST[&quot;user&quot;]) &amp;&amp; isset($_POST[&quot;pass&quot;])) &#123;</span><br><span class="line">        if ($_POST[&quot;user&quot;] &#x3D;&#x3D; USER &amp;&amp; $_POST[&quot;pass&quot;] &#x3D;&#x3D; PASS) &#123;</span><br><span class="line">            $_SESSION[&quot;authenticated&quot;] &#x3D; true;</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 4 save user in cookie for a week</span><br><span class="line">            setcookie(&quot;user&quot;, $_POST[&quot;user&quot;], time() + 7 * 24 * 60 * 60);</span><br><span class="line">            </span><br><span class="line">            &#x2F;&#x2F; redirect user to home page, using absolute path.</span><br><span class="line">            redirect(&quot;home.php&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; 5</span><br><span class="line">    function redirect($file) &#123;</span><br><span class="line">        $host &#x3D; $_SERVER[&quot;HTTP_HOST&quot;];</span><br><span class="line">        $path &#x3D; rtrim(dirname($_SERVER[&quot;PHP_SELF&quot;]), &quot;&#x2F;\\&quot;); &#x2F;&#x2F; current php directory, trim out unwanted leading slashes</span><br><span class="line">        header(&quot;Location: http:&#x2F;&#x2F;$host$path&#x2F;$file&quot;);</span><br><span class="line">        exit;</span><br><span class="line">    &#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><ul><li><ol><li>this will enable session, must be at the top of your code. Make sure no whitespaces or any code in front of this.</li></ol></li><li><ol start="2"><li>Define constants</li></ol></li><li><ol start="3"><li>check user form data are exist and valid</li></ol></li><li><ol start="4"><li>Session will be saved on the web server on the disk with a unique session id. Cookie will saved on the client machine. Everytime user visit the website, it will show us the cookies, web server will quickly open up the file saved with the same session id, and grab all the values(key-value pairs) to our webpage. Webpage also can access to the user Cookies.</li></ol></li><li><ol start="5"><li>define functions in PHP</li></ol></li><li>Note: make sure to give web server user the write permission to the session folder. Otherwise it cannot write session variables to the file. Also, make sure to use session_start(); in home.php as well. So it can have access to the session variables after redirecting. Any sensitive information should not be stored in the Cookies.</li><li>Note: make sure to give web server user the write permission to the session folder. Otherwise it cannot write session variables to the file. Also, make sure to use session_start(); in home.php as well. So it can have access to the session variables after redirecting.</li></ul><h2 id="chapter-3-mvc-xml"><a class="markdownIt-Anchor" href="#chapter-3-mvc-xml"></a> Chapter 3: MVC XML</h2><h3 id="mvc"><a class="markdownIt-Anchor" href="#mvc"></a> MVC</h3><ul><li>Change permission to write and read directory or files:</li><li>Read: r = 4</li><li>Write: w = 2</li><li>Execute: x = 1</li><li>adds them up to get the mode code.</li><li>e.g. sudo chmod 644 filename means: give the file the permission level: -rw-r–r--</li><li>sudo chmod 700 filename: give the file the permission level -rwx------</li><li>commonly used mode of files:</li><li>644: can be read and write by the file owner, also can be read by other group of users and the whole world.</li><li>600: can be read and write by the file owner only.</li><li>html 644</li><li>gif 644</li><li>jpg 644</li><li>css 644</li><li>js 644</li><li>png 644</li><li>php 600</li><li>For directory: Read means user can list all content inside a directory(same as the ls command in terminal). Execute means user can go into this directory(same as the cd command).</li><li>Common permission level for directory:</li><li>dir 711: user can go into this directory, can read/write all its files. Other groups or outside world can only go into this directory. If they know the exact filename in this directory and has read permission to that particular file. They can read it. But they can’t list all filenames of that directory.</li><li>dir 755: user can go into this directory, can read/write all its files, Other groups or outside world can go inside and list all files.</li><li>Use different hostname with only one web server. Change the hosts table file to give your domain a different name locally instead of localhost. sudo vi /etc/hosts</li><li>Use RewriteModule to manipulate the URL, route user to correct places with cleaner URLs</li></ul><h3 id="xml"><a class="markdownIt-Anchor" href="#xml"></a> XML</h3><p><img src="/../images/Harvard-CS75-Web-Development/3.png" alt="" /></p><ul><li>XML is an extensible markup language where you can extend structure without breaking existing data and applications.</li><li>Adding more children to an element is 100% fine.</li><li>Config files can be XML, you can add more KEYs and variables to the config files later.</li><li>Escape entities(pre-defined keywords) in XML: <code>&amp;amp;amp; &amp;amp;lt; &amp;amp;gt; &amp;amp;apos; &amp;amp;quot;</code></li><li>Declare your own entity: <code>&amp;lt;!ENTITY nbsp &quot;&amp;amp;#160;&quot;&amp;gt;</code></li><li>SimpleXML API: See XML in a Tree Structure</li><li>DOM(Document Object Model)</li><li>RSS</li></ul><p><img src="/../images/Harvard-CS75-Web-Development/4.png" alt="" /></p><ul><li>In PHP, we can use SimpleXML API to read an XML file and load its contents.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;?</span><br><span class="line">    $dom &#x3D; simplexml_load_file(&quot;lectures.xml&quot;);</span><br><span class="line">    foreach ($dom-&gt;xpath(&quot;&#x2F;lectures&#x2F;lecture&quot;) as $lecture) &#123;</span><br><span class="line">    print &quot;&quot;;</span><br><span class="line">    print &quot;Lecture &quot; . $lecture[&quot;number&quot;] . &quot;: &quot;;</span><br><span class="line">    print $lecture-&gt;title;</span><br><span class="line">    print &quot;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">?&lt;</span><br></pre></td></tr></table></figure><ul><li>Recall dot symbol . in PHP means concatenation.</li><li>Select XML node from PHP using xpath: If you only want to display certain lecture, for example, lecture 3, you could add additional condition in xpath<br /><code>$dom-&gt;xpath(&quot;/lectures/lecture[@number='3']&quot;)</code></li><li>@ is short for attributes, we can expend it as ‘attributes::’</li><li>We can also start at any given node and go to its parent, chlid or siblings by define the axis in the path(below is just an example and will not work):<br /><code>$dom-&gt;xpath(&quot;/parent::lectures/child::lecture[attributes::number='3']&quot;)</code></li></ul><h2 id="chapter-4-sql"><a class="markdownIt-Anchor" href="#chapter-4-sql"></a> Chapter 4: SQL</h2><ul><li>CSV(comma separated values)</li><li>PSV(Pipe separated values) pipe is the vertical line in the keyboard |</li><li>TSV(Tab separated values)</li><li>CSV</li><li>fgetcsv: load csv file content into an array of arrays</li><li>fputcsv: write content to a csv file</li><li>XML: SimpleXML</li><li>MySQL: database</li><li>SQLite: Allow you to use SQL without an actual Database, it is just a file stored in your disk.</li><li>SQL</li><li>CREATE</li><li>ALTER</li><li>DROP</li><li>SELECT</li><li>INSERT</li><li>UPDATE</li><li>DELETE</li><li>Connection MySQL to PHP: MyPHPAdmin</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&gt;?</span><br><span class="line">    &#x2F;&#x2F; enable sessions</span><br><span class="line">    session_start();</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; connect to databsae</span><br><span class="line">    if (($connection &#x3D; mysqli_connect(&quot;localhost&quot;, &quot;yuan&quot;, &quot;123&quot;, &quot;yuan_lecture&quot;)) &#x3D;&#x3D;&#x3D; false)</span><br><span class="line">    die(&quot;Could not connect to database&quot;);</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; if username and password were submitted, check them</span><br><span class="line">    if (isset($_POST[&quot;user&quot;]) &amp;&amp; isset($_POST[&quot;pass&quot;]))</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; prepare SQL</span><br><span class="line">        $sql &#x3D; sprintf(&quot;SELECT * FROM users WHERE username&#x3D;&#39;%s&#39;&quot;, mysqli_real_escape_string($connection, $_POST[&quot;user&quot;]));</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; execute query</span><br><span class="line">        $result &#x3D; mysqli_query($connection, $sql);</span><br><span class="line">        if ($result &#x3D;&#x3D;&#x3D; false)</span><br><span class="line">            die(&quot;Could not query database&quot;);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; check whether we found a row</span><br><span class="line">        if (mysqli_num_rows($connection, $result) &#x3D;&#x3D; 1) &#123;</span><br><span class="line">            &#x2F;&#x2F; fetch row</span><br><span class="line">            $row &#x3D; mysqli_fetch_assoc($connection, $result);</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; check password</span><br><span class="line">            if ($row[&quot;password&quot;] &#x3D;&#x3D; $_POST[&quot;pass&quot;]) &#123;</span><br><span class="line">            &#x2F;&#x2F; remember that user&#39;s logged in</span><br><span class="line">            $_SESSION[&quot;authenticated&quot;] &#x3D; true;</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; redirect user to home page, using absolute path.</span><br><span class="line">            redirect(&quot;home.php&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function redirect($file) &#123;</span><br><span class="line">    $host &#x3D; $_SERVER[&quot;HTTP_HOST&quot;];</span><br><span class="line">    $path &#x3D; rtrim(dirname($_SERVER[&quot;PHP_SELF&quot;]), &quot;&#x2F;\\&quot;); &#x2F;&#x2F; current php directory, trim out unwanted leading slashes</span><br><span class="line">    header(&quot;Location: http:&#x2F;&#x2F;$host$path&#x2F;$file&quot;);</span><br><span class="line">    exit;</span><br><span class="line">    &#125;</span><br><span class="line">?&lt;</span><br></pre></td></tr></table></figure><ul><li><ol><li>in mysql_connect(), the first variable is the DB server, second is username of the DB, thrid is the password of the DB</li></ol></li><li><ol start="2"><li>mysql_real_escape_string is preventing SQL injection attack.</li></ol></li><li><ol start="3"><li>$result is a temporary table get from DB</li></ol></li><li><ol start="4"><li>mysql_num_rows return number of rows in the temp table</li></ol></li><li><ol start="5"><li>mysql_fetch_assoc return an associated array with keys and values from the temp table</li></ol></li><li>One way hash password</li><li>It is not good to store password in the DB in plain text. So we should use a hash function to hash the password into some random characters, whenever user logs in, we use the same algorithm to hash the password and check if it equals to the same random characters in the DB.</li><li>SQL indexes, Constraints</li><li>PRIMARY KEY</li><li>INDEX: doing a binary search or some other tree structure to a column, so it will be much faster to run a query. Cost more disk space. The below image shows that this table has two indexes, and it is using BTREE structure to store all values.</li></ul><p><img src="/../images/Harvard-CS75-Web-Development/8.png" alt="" /></p><ul><li>UNIQUE</li><li>FULLTEXT</li><li>BLOB (Binary Large Object) -&gt; etc. Images</li><li>Although you can store images into DB, it cost space, it would be better to store it in a folder(file system), and store the link to this file into the DB.</li><li>Foriegn Key: is a primary key in another table</li></ul><h2 id="chapter-5-sql-continued"><a class="markdownIt-Anchor" href="#chapter-5-sql-continued"></a> Chapter 5: SQL Continued</h2><ul><li>CRUD (Create Read Update Delete) model</li><li>VARCHAR will save more space than using CHAR, because it uses different length of chars for each value.</li><li>CHAR will use same length of chars for all values, but it will run query faster, because it knows the length of values, it can move to next value by adding the length to the current position. (For VARCHAR it has to keep searching until reach to the end of the value.)</li><li>AI (Auto Increment) Good for IDs, plus one each time. When you delete the ID, the ID number will NOT be reused.</li><li>Float numbers: 32-bit or 64-bit numbers are finite. If we are using it to represents real numbers(infinite), SQL will round the number to its closest number that it can find. e.g. if you enter 1.9, it might give you 1.89999999 instead. So it is not good to use Float to represent Money etc… important values</li><li>MySQL Functions</li><li>PDO(Portable Data Object)</li></ul><p><img src="/../images/Harvard-CS75-Web-Development/5.png" alt="" /></p><ul><li>Assign variables to values, so when you change database next time, you don’t have to change the code. You just need to change the variables of PDO arguments.</li><li>JOIN</li></ul><p><img src="/../images/Harvard-CS75-Web-Development/6.png" alt="" /><br /><img src="/../images/Harvard-CS75-Web-Development/7.png" alt="" /></p><ul><li>Join tables together. Get data from multiple tables at once.</li><li>In the above example, we could further create another table that has Product_Id and Product_Name, and use only Product_Id in the orders table.</li></ul><p><img src="/../images/Harvard-CS75-Web-Development/9.png" alt="" /></p><ul><li>Only the person that have sold products are displayed.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT Employees.Name, Orders.Product</span><br><span class="line">FROM Employees</span><br><span class="line">JOIN Orders ON Employees.Employee_ID &#x3D; Orders.Employee_ID</span><br></pre></td></tr></table></figure><ul><li>This is another syntax to use to join tables. This is the same as the other SQL syntax shown above.</li><li>Left Join, Right Join</li><li>Their are differnt type of joins, they decides which table should carry more weight in this query. For example, in the Employees table, if someone has left the company and is no longer exist in the Employees table. But his sell history is still in the orders table. We want to keep the sell history. Then we could use a Right Join, it will display all sell history related. But will show NULL in the Employee_ID(because there is no corresponding Employee_ID in the Employees table).</li><li>Race Conditions(Atomicity)</li><li>In computer programming, an operation done by a computer is considered atomic if it is guaranteed to be isolated from other operations that may be happening at the same time. Put another way, atomic operations are indivisible.</li><li>INSERT INTO table (a,b,c) VALUES (1,2,3) ON DUPLICATE KEY UPDATE c=c+1;</li><li>This will help you to merge SELECT and UPDATE into one query. Potentially solve the race conditions issue(NOT enough though).</li><li>Transactions</li><li>Transactions means do the following queries atomically, do not allow any other queries perform in the meantime.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">START TRANSACTION;</span><br><span class="line">UPDATE ACCOUNT SET BALANCE &#x3D; BALANCE - 1000 WHERE NUMBER &#x3D; 2;</span><br><span class="line">UPDATE ACCOUNT SET BALANCE &#x3D; BALANCE + 1000 WHERE NUMBER &#x3D; 1;</span><br><span class="line">COMMIT;</span><br></pre></td></tr></table></figure><ul><li>In the example above, we transfer 1000 balance from account 1 to account 2 at the same time.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">START TRANSACTION;</span><br><span class="line">UPDATE ACCOUNT SET BALANCE &#x3D; BALANCE - 1000 WHERE NUMBER &#x3D; 2;</span><br><span class="line">UPDATE ACCOUNT SET BALANCE &#x3D; BALANCE + 1000 WHERE NUMBER &#x3D; 1;</span><br><span class="line">SELECT BALANCE FROM ACCOUNT WHERE NUMBER &#x3D; 2;</span><br><span class="line"># suppose account number 2 has a negative balance here!</span><br><span class="line">ROLLBACK;</span><br></pre></td></tr></table></figure><ul><li>In the example above, if we find something wrong happened after we perform the transaction, ROLLBACK will undo all the changes in the transaction.</li><li>Locks (MyISAM)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LOCK TABLES account WRITE;</span><br><span class="line">SELECT balance FROM account WHERE number &#x3D; 2;</span><br><span class="line">UPDATE account SET balance &#x3D; 1500 WHERE number &#x3D; 2;</span><br><span class="line">UNLOCK TABLES;</span><br></pre></td></tr></table></figure><ul><li>‘LOCK TABLES account WRITE;’’ will lock the table ‘account’, prevening people from WRITING to the table.</li><li>One downside is that LOCK will lock the entire table, so no one can write to the table even if they are updating other accounts.</li></ul><p><img src="/../images/Harvard-CS75-Web-Development/10.png" alt="" /></p><ul><li>Add Foreign key constraints so that the DB knows the primary key in one table is related to another foreign key in another table.</li><li>ON DELETE RESTRICT and ON UPDATE RESTRICT means if we want to delete something that is actually a primary key in a table, DB will reject it because it is related to another tables. If we changed it to CASCADE, then if we delete a record that is a primary key, DB will delete all records that are related to this primary key in other tables too.</li></ul><h2 id="chapter-6-javascript"><a class="markdownIt-Anchor" href="#chapter-6-javascript"></a> Chapter 6: JavaScript</h2><ul><li>Javacript, like PHP, is also an interpreted language. Node.js is a server side js language.</li></ul><h3 id="global-objects"><a class="markdownIt-Anchor" href="#global-objects"></a> Global objects</h3><ol><li>Array</li><li>Boolean</li><li>Date</li><li>Function</li><li>Math</li><li>Number</li><li>Object</li><li>RegExp</li><li>String</li></ol><h3 id="array"><a class="markdownIt-Anchor" href="#array"></a> Array</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var array &#x3D; [];</span><br><span class="line">array[0] &#x3D; &#39;abc&#39;;</span><br><span class="line">array.push(&#39;abc&#39;);</span><br></pre></td></tr></table></figure><ul><li>Array doesn’t have a fixed length, you can use index or ‘push’ method to add elements.</li><li>Put cursor in form field that is empty.</li></ul><p><img src="/../images/Harvard-CS75-Web-Development/11.png" alt="" /></p><ul><li>Document is a super global object. It is a DOM(document object model)</li></ul><p><img src="/../images/Harvard-CS75-Web-Development/12.png" alt="" /></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    function validate(f)</span><br><span class="line">    &#123;</span><br><span class="line">        if (f.email.value &#x3D;&#x3D; &quot;&quot;)</span><br><span class="line">        &#123;</span><br><span class="line">            alert(&quot;You must provide an email adddress.&quot;);</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        else if (f.password1.value &#x3D;&#x3D; &quot;&quot;)</span><br><span class="line">        &#123;</span><br><span class="line">            alert(&quot;You must provide a password.&quot;);</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        else if (f.password1.value !&#x3D; f.password2.value)</span><br><span class="line">        &#123;</span><br><span class="line">            alert(&quot;You must provide the same password twice.&quot;);</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        else if (!f.agreement.checked)</span><br><span class="line">        &#123;</span><br><span class="line">            alert(&quot;You must agree to our terms and conditions.&quot;);</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;title&gt;&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action&#x3D;&quot;process.php&quot; method&#x3D;&quot;get&quot; name&#x3D;&quot;registration&quot; onsubmit&#x3D;&quot;return validate(this);&quot;&gt;</span><br><span class="line">    Email: &lt;input name&#x3D;&quot;email&quot; type&#x3D;&quot;text&quot;&gt;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    Password: &lt;input name&#x3D;&quot;password1&quot; type&#x3D;&quot;password&quot;&gt;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    Password (again): &lt;input name&#x3D;&quot;password2&quot; type&#x3D;&quot;password&quot;&gt;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    I agree to the terms and conditions: &lt;input name&#x3D;&quot;agreement&quot; type&#x3D;&quot;checkbox&quot;&gt;</span><br><span class="line">    &lt;br&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;Submit&quot;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><ul><li>check the form fields values at client side using Javascript. validate(this), is passing ‘document.forms.registration’ to the function.</li><li>Both client side and server side form validation and necessary. User’s can change js using tools like inspector console and bypass the client side validation.</li><li>Regular Expressions</li><li>Object</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var obj &#x3D; &#123;&#125;;</span><br><span class="line">obj.key &#x3D; value;</span><br><span class="line">obj[&#39;key&#39;] &#x3D; value;</span><br><span class="line">var obj &#x3D; &#123;key: value&#125;;</span><br></pre></td></tr></table></figure><h3 id="event-handlers"><a class="markdownIt-Anchor" href="#event-handlers"></a> Event handlers</h3><ol><li>onblur</li><li>onchange</li><li>onclick</li><li>onfocus</li><li>onkeydown</li><li>onkeyup</li><li>onload</li><li>onmousedown</li><li>onmouseup</li><li>onmouseout</li><li>onmouseover</li><li>onresize</li><li>onselect</li><li>onsubmit</li></ol><ul><li>Call a function as a reference</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        function blinker()</span><br><span class="line">        &#123;</span><br><span class="line">            var blinks &#x3D; document.getElementsByTagName(&quot;blink&quot;);</span><br><span class="line">            for (var i &#x3D; 0; i &lt; blinks.length; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                if (blinks[i].style.visibility &#x3D;&#x3D; &quot;hidden&quot;)</span><br><span class="line">                    blinks[i].style.visibility &#x3D; &quot;visible&quot;;</span><br><span class="line">                else</span><br><span class="line">                    blinks[i].style.visibility &#x3D; &quot;hidden&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        window.setInterval(blinker, 500);</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;title&gt;&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;&#x2F;head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">    &lt;center&gt;</span><br><span class="line">        &lt;blink&gt;&lt;h1&gt;hello, world&lt;&#x2F;h1&gt;&lt;&#x2F;blink&gt;</span><br><span class="line">    &lt;&#x2F;center&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><ul><li>Notice in the code above, when we call the blinker function in window.setInterval(blinker, 500), we are not adding () at the end of the function name. This is because we are passing a reference of that function(blinker) to it. If we use window.setInterval(blinker(), 500), we are passing the return result of blinker function to it, which will not work because blinker function doesn’t return anything.</li><li>Anonymous function(lambda function)</li><li>window.setInterval(function() { alert(“HI”); }, 5000);</li><li>Javascript code can be minimized to save traffic. Variable names and spaces will be shrinked.</li></ul><h2 id="chapter-7-ajax"><a class="markdownIt-Anchor" href="#chapter-7-ajax"></a> Chapter 7: AJAX</h2><p><img src="/../images/Harvard-CS75-Web-Development/13.png" alt="" /></p><ul><li>XML and json and data transfer machanism, json tends to be much more popular thesedays</li><li>XMLHttpRequest</li></ul><ol><li>abort()</li><li>getAllResponseHeaders()</li><li>getResponseHeader()</li><li>open(method, url)</li><li>open(method, url, async)</li><li>open(method, url, async, user)</li><li>open(method, url, async, user, password)</li><li>send()</li><li>send(data)</li><li>setRequestHeader(header, value)</li></ol><h3 id="xmlhttprequest-properties"><a class="markdownIt-Anchor" href="#xmlhttprequest-properties"></a> XMLHttpRequest properties</h3><ol><li>onreadystatechange</li><li>readyState(0 unitialized, 1 open, 2 sent, 3 receiving, 4 loaded)</li><li>responseBody</li><li>responseText</li><li>responseXML</li><li>status(200 OK, 404 Not Found, 500 Internal Server Error)</li><li>statusText</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">function handler()</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F; only handle requests in &quot;loaded&quot; state</span><br><span class="line">        if (xhr.readyState &#x3D;&#x3D; 4)</span><br><span class="line">        &#123;</span><br><span class="line">            if (xhr.status &#x3D;&#x3D; 200)</span><br><span class="line">            &#123;</span><br><span class="line">                &#x2F;&#x2F; get XML</span><br><span class="line">                var xml &#x3D; xhr.responseXML;</span><br><span class="line"></span><br><span class="line">                &#x2F;&#x2F; update price</span><br><span class="line">                var prices &#x3D; xml.getElementsByTagName(&quot;price&quot;);</span><br><span class="line">                if (prices.length &#x3D;&#x3D; 1)</span><br><span class="line">                &#123;</span><br><span class="line">                    var price &#x3D; prices[0].firstChild.nodeValue;</span><br><span class="line">                    document.getElementById(&quot;price&quot;).innerHTML &#x3D; price;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                &#x2F;&#x2F; update low</span><br><span class="line">                var lows &#x3D; xml.getElementsByTagName(&quot;low&quot;);</span><br><span class="line">                if (lows.length &#x3D;&#x3D; 1)</span><br><span class="line">                &#123;</span><br><span class="line">                    var low &#x3D; lows[0].firstChild.nodeValue;</span><br><span class="line">                    document.getElementById(&quot;low&quot;).innerHTML &#x3D; low;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                &#x2F;&#x2F; update high</span><br><span class="line">                var highs &#x3D; xml.getElementsByTagName(&quot;high&quot;);</span><br><span class="line">                if (highs.length &#x3D;&#x3D; 1)</span><br><span class="line">                &#123;</span><br><span class="line">                    var high &#x3D; highs[0].firstChild.nodeValue;</span><br><span class="line">                    document.getElementById(&quot;high&quot;).innerHTML &#x3D; high;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            else</span><br><span class="line">                alert(&quot;Error with Ajax call!&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>if PHP return data as XML type, ajax has a function called responseXML, but it is not very easy to get the data you want. Because XML data structure is quite complex.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        &#x2F;&#x2F; an XMLHttpRequest</span><br><span class="line">        var xhr &#x3D; null;</span><br><span class="line">        &#x2F;*</span><br><span class="line">            * void</span><br><span class="line">            * quote()</span><br><span class="line">            *</span><br><span class="line">            * Gets a quote.</span><br><span class="line">            *&#x2F;</span><br><span class="line">        function quote()</span><br><span class="line">        &#123;</span><br><span class="line">            &#x2F;&#x2F; instantiate XMLHttpRequest object</span><br><span class="line">            try</span><br><span class="line">            &#123;</span><br><span class="line">                xhr &#x3D; new XMLHttpRequest();</span><br><span class="line">            &#125;</span><br><span class="line">            catch (e)</span><br><span class="line">            &#123;</span><br><span class="line">                xhr &#x3D; new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; handle old browsers</span><br><span class="line">            if (xhr &#x3D;&#x3D; null)</span><br><span class="line">            &#123;</span><br><span class="line">                alert(&quot;Ajax not supported by your browser!&quot;);</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; get symbol</span><br><span class="line">            var symbol &#x3D; document.getElementById(&quot;symbol&quot;).value;</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; construct URL</span><br><span class="line">            var url &#x3D; &quot;quote7.php?symbol&#x3D;&quot; + symbol;</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; get quote</span><br><span class="line">            xhr.onreadystatechange &#x3D;</span><br><span class="line">            function()</span><br><span class="line">            &#123;</span><br><span class="line">                &#x2F;&#x2F; only handle loaded requests</span><br><span class="line">                if (xhr.readyState &#x3D;&#x3D; 4)</span><br><span class="line">                &#123;</span><br><span class="line">                    if (xhr.status &#x3D;&#x3D; 200)</span><br><span class="line">                    &#123;</span><br><span class="line">                        &#x2F;&#x2F; evaluate JSON</span><br><span class="line">                        var quote &#x3D; eval(&quot;(&quot; + xhr.responseText + &quot;)&quot;);</span><br><span class="line"></span><br><span class="line">                        &#x2F;&#x2F; show JSON in textarea</span><br><span class="line">                        document.getElementById(&quot;code&quot;).value &#x3D; xhr.responseText;</span><br><span class="line"></span><br><span class="line">                        &#x2F;&#x2F; insert quote into DOM</span><br><span class="line">                        var div &#x3D; document.createElement(&quot;div&quot;);</span><br><span class="line">                        var text &#x3D; document.createTextNode(symbol + &quot;: &quot; + quote.price);</span><br><span class="line">                        div.appendChild(text);</span><br><span class="line">                        document.getElementById(&quot;quotes&quot;).appendChild(div);</span><br><span class="line">                    &#125;</span><br><span class="line">                    else</span><br><span class="line">                        alert(&quot;Error with Ajax call!&quot;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            xhr.open(&quot;GET&quot;, url, true);</span><br><span class="line">            xhr.send(null);</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">    &lt;title&gt;&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;&#x2F;head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">    &lt;form onsubmit&#x3D;&quot;quote(); return false;&quot;&gt;</span><br><span class="line">        Symbol: &lt;input id&#x3D;&quot;symbol&quot; type&#x3D;&quot;text&quot;&gt;</span><br><span class="line">        &lt;br&gt;&lt;br&gt;</span><br><span class="line">        &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;Get Quote&quot;&gt;</span><br><span class="line">    &lt;&#x2F;form&gt;</span><br><span class="line">    &lt;br&gt;&lt;br&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;quotes&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;br&gt;&lt;br&gt;</span><br><span class="line">    &lt;textarea cols&#x3D;&quot;80&quot; id&#x3D;&quot;code&quot; rows&#x3D;&quot;16&quot;&gt;&lt;&#x2F;textarea&gt;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><ul><li>Encode ajax response to json and return to js as an object. json_encode is a PHP function that convert data into json string. ‘eval’ is a js function that convert json data into js object.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$(document).ready(function() &#123;</span><br><span class="line">    $(&quot;#form&quot;).submit(function() &#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">        url: &quot;quote7.php&quot;,</span><br><span class="line">        data: &#123; </span><br><span class="line">        symbol: $(&quot;#symbol&quot;).val()</span><br><span class="line">        &#125;,</span><br><span class="line">        success: function(data) &#123;</span><br><span class="line">            $(&quot;#price&quot;).html(data.price);</span><br><span class="line">            $(&quot;#high&quot;).html(data.high);</span><br><span class="line">            $(&quot;#low&quot;).html(data.low);</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        return false;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>Another even cleaner example is to using jQuery. Dollar sign $ is short for ‘jQuery’. $(&quot;#form&quot;) is equals to jQuery(&quot;#form&quot;)</li><li>jQuery is a library that provides more functionality to your code. $(document) is passing document to the jQuery library so you can use the extra features that jQuery provides.</li><li>.ready is to make sure the whole html page is being loaded correctly. Because some of the code in ready function may require html elements.</li><li>.ajax function takes one argument, which is in the parentheses, the argument is an object. JS only has two data structures, array and object, which represented by [] and {} respectively.</li><li>the object in .ajax function has three keys, url, data and success.</li><li>url takes a string, which is the url we will go to.</li><li>data takes an object, which is the data we send.</li><li>success takes an anonymous function, it is only being called when ajax request is success.(state is ready and response code is 200)</li><li>the anonymous function after the .submit event handler return false because we don’t want to submit the form again, we already got the data from the ajax call.</li><li>Content Types</li><li>Specify the data type of the current file.</li><li>HTML (text/html) (default)</li><li>XML (text/XML)</li><li>JSON (application/json)</li><li>PHP + JSON</li><li>json_encode($value): convert data to json on server side to be ready to send</li><li>eval(string): convert data from json to object so we can access it on the client side</li><li>Same Origin Policy</li><li>We are not allowed to display data we get from another domain. We can make ajax call at JS and get response, but we cannot display it. You cannot embed it into your DOM. CORS can override this.</li></ul><h2 id="chapter-8-security"><a class="markdownIt-Anchor" href="#chapter-8-security"></a> Chapter 8: Security</h2><ul><li>Obvious Threats</li><li>Telnet, FTP, HTTP, MySQL</li><li>suPHP, all users can only access to their own files. No one can delete or modify your files.</li><li>Session Hijacking(scenarios)</li><li>Physical Access</li><li>Packet Sniffing: For website not using HTTPS</li><li>Session Fixation: Guess the session ID</li><li>XSS: Cross site scripting attack</li><li>SSL Certificate</li><li>Public key Cryptography</li><li>There is a public key and a private key. Imagine we want to buy something from a website. Before we sending credit card information to the website. The website will send me the public key(can be see by everyone). And we are going to use the public key to encrypt the information. Only the private key can be used to decrypt the information. And only the website has the private key. Likewise, if the website wants to send me some information. I need to send it the public key too. And use my private key to decrypt it when I receive the information.</li><li>SQL injection attacks</li><li>mysql_real_escape_string(): put backslash to quote etc…</li><li>Same-Origin Policy: You can only get data from the same origin as your HTML DOM. (ajax calls)</li><li>CORS can override same origin policy, jsonp</li><li>Attacks</li><li>CSRF (Cross-site scripting forgery): If you login to some stock trade website recently and saved your login session. And you visited the bad website in the meantime and being tricked to click the link in their website. The link is actually a request and will send a request to the stock trade website to buy some stock. Note: User click a link could send both GET/POST request. Forms can be hidden and submitted by JS code. So just change the buying request to POST request doesn’t solve this issue.</li><li>1.The way to prevent this is whenever you want to send a request, the website will send a random session token back to you. And you have to add this token in the request to be able to make the request work. The CSRF link will never know what the token is.</li><li>2.CAPTCHA: enter some words that easy for human to see but not for machine.</li><li>3.Whenever you want to checkout, the website will make you log out immediately when you click the checkout button.</li><li>XSS</li><li>You can access to the Cookie from JS</li><li>And there is a flawed website which writing values to its body, and you can be tricked to click the link and send your Cookie to other people.</li><li>An attacker can use XSS to send a malicious script to an unsuspecting user. The end user’s browser has no way to know that the script should not be trusted, and will execute the script. Because it thinks the script came from a trusted source, the malicious script can access any cookies, session tokens, or other sensitive information retained by the browser and used with that site.</li><li>Escape HTML special chars</li></ul><h2 id="chapter-9-scalability"><a class="markdownIt-Anchor" href="#chapter-9-scalability"></a> Chapter 9: Scalability</h2><h3 id="vertical-scaling"><a class="markdownIt-Anchor" href="#vertical-scaling"></a> Vertical Scaling</h3><ul><li>增加服务器的CPU，内存，硬盘等，但总会不够用</li></ul><ol><li>CPU: cores, L2 cache…</li><li>Disk: PATA, SATA, SAS, RAID</li><li>RAID(Redundent array of independent disks)<ol><li>RAID 0 :如果你有n块磁盘，原来只能同时写一块磁盘，写满了再下一块，做了RAID 0之后，n块可以同时写，速度提升很快，但由于没有备份，可靠性很差。n最少为2。</li><li>RAID 1: 正因为RAID 0太不可靠，所以衍生出了RAID1。如果你有n块磁盘，把其中n/2块磁盘作为镜像磁盘，在往其中一块磁盘写入数据时，也同时往另一块写数据。坏了其中一块时，镜像磁盘自动顶上，可靠性最佳，但空间利用率太低。n最少为2。</li><li>RAID 10: 是RAID 0 和RAID 1 的结合，同时写入n/2的硬盘并将剩下n/2作为备份，可靠性和速度都有，但是需要两倍的钱。</li><li>RAID 3：为了说明白RAID 5，先说RAID 3.RAID 3是若你有n块盘，其中1块盘作为校验盘，剩余n-1块盘相当于作RAID 0同时读写，当其中一块盘坏掉时，可以通过校验码还原出坏掉盘的原始数据。这个校验方式比较特别，奇偶检验，1 XOR 0 XOR 1=0，0 XOR 1 XOR 0=1，最后的数据时校验数据，当中间缺了一个数据时，可以通过其他盘的数据和校验数据推算出来。但是这有个问题，由于n-1块盘做了RAID 0，每一次读写都要牵动所有盘来为它服务，而且万一校验盘坏掉就完蛋了。最多允许坏一块盘。n最少为3.</li><li>RAID 5：在RAID 3的基础上有所区别，同样是相当于是1块盘的大小作为校验盘，n-1块盘的大小作为数据盘，但校验码分布在各个磁盘中，不是单独的一块磁盘，也就是分布式校验盘，这样做好处多多。最多坏一块盘。n最少为3.</li><li>RAID 6：在RAID 5的基础上，又增加了一种校验码，和解方程似的，一种校验码一个方程，最多有两个未知数，也就是最多坏两块盘。</li></ol></li><li>RAM</li></ol><h3 id="horizontal-scaling"><a class="markdownIt-Anchor" href="#horizontal-scaling"></a> Horizontal Scaling</h3><ul><li>增加更多的服务器，而不是提升每个服务器的配置。当我们拥有多于一个服务器时，当用户向服务器发送请求时，我们要一个load balancer去将进来的request平均分配给所有的服务器。load balancer拥有一个public IP。而每一个服务器有一个private IP，他们不需要public IP</li></ul><h3 id="load-balancing"><a class="markdownIt-Anchor" href="#load-balancing"></a> Load Balancing</h3><ul><li>如何给服务器平均分配request？我们可以将所有可用的服务器IP列出来，第一个request给第一个服务器，第二个request给第二个服务器，以此类推直到回到第一个，然后循环，这种方法叫做round-robin，优点是他不需要主动询问服务器的当前状态如何</li></ul><h3 id="caching"><a class="markdownIt-Anchor" href="#caching"></a> Caching</h3><ul><li>当用户通过load balancer登录到一号服务器时，他的登录信息如果保存在一号服务器，那么在他下一个request被分配到其他服务器时，他就需要再次登录，如果他在使用一个购物网站，他将一件商品加入到一号服务器的购物车中，然后又在二号服务器登录却找不到他的购物车，也不能结帐，这就会成为一个大问题</li></ul><h3 id="shared-session-statesticky-session"><a class="markdownIt-Anchor" href="#shared-session-statesticky-session"></a> Shared Session State(Sticky session)</h3><ul><li>我们可以将session，也就是用户信息储存在另外一个服务器中</li><li>Shared Storage</li><li>FC (Fiber Channel), iSCSI, MySQL, NFS</li><li>Replicate your database, use more than one database to store sessions in case one goes down</li></ul><h3 id="cookie"><a class="markdownIt-Anchor" href="#cookie"></a> Cookie</h3><ul><li>当用户首次登陆时，load balancer可以想用户电脑中加入一个cookie，包含一些加密的服务器信息，所以当用户在短时间内再次访问时，load balancer就知道该将用户的请求发送到哪个服务器</li></ul><h3 id="load-balancer"><a class="markdownIt-Anchor" href="#load-balancer"></a> Load Balancer</h3><ul><li>Software: ELB(Amazon’s Elastic Load Balancer), HAProxy(High Availability Proxy), LVS(Linux Virtual Server)</li><li>Hardware: Barracuda, Cisco, Citrix, F5</li></ul><h3 id="php-accelerators"><a class="markdownIt-Anchor" href="#php-accelerators"></a> PHP Accelerators</h3><ul><li>当我们在调用python程序时，我们需要先将以py结尾的代码文件编译成可直接执行的文件，然后再运行可执行文件得到结果。这样做的目的是当我们想再次得到结果时，我们不需要再次编译，可以直接运行执行文件。</li><li>这样做可以提升效率，但是如果我们有任何的代码改动，我们就需要重新编译。</li><li>PHP Accelerators有一样的逻辑，用户在发送相同的请求时，网站会直接运行可执行文件以提升速度</li></ul><h3 id="caching-2"><a class="markdownIt-Anchor" href="#caching-2"></a> Caching</h3><ul><li>.html</li><li>Caching就是一种将你经常访问的数据提前保存到你的电脑上以便下次快速显示的技术。对于PHP来说，HTML网页是自动生成的，意味着每次用户访问时PHP都会重新生成一个新的重复的HTML文件。</li><li>如果我们将所有的HTML网页都事先编译好储存在服务器上，用户访问时就可以快速拿到这些静态网页，因为不需要每次都进行编译。这就是一种Caching</li><li>这样做的坏处是，当你需要更改整个网站的风格时，你就需要更改所有的HTML文件。</li><li>MySQL Query Cache：MySQL会将一些query的结果caching，第一次运行时如果你的table很大，或者你要找的column没有index，他会运行一段时间，但是下次你就会更快的看到结果</li><li>memcached</li><li>memory cache， 内存的读写要比硬盘快很多，所以我们如果有一百万个用户，服务器SQL拿到一个用户数据可能会需要很长时间，我们可以将这个用户数据保存在memory里面，下次就可以快速得到</li><li>下面是PHP将用户数据保存到memcache的代码</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$memcache &#x3D; memchache_connect(HOST, PORT);</span><br><span class="line">$user &#x3D; memcache_get($memcache, $id);</span><br><span class="line">&#x2F;&#x2F; 如果内存里面没有这个用户的id，我们就从数据库中拿取，之后把他添加到内存中</span><br><span class="line">if (is_null($user))</span><br><span class="line">&#123;</span><br><span class="line">    $bdh &#x3D; new PDO(DSN, USER, PASS;</span><br><span class="line">    $result &#x3D; $dbh-&gt;query(&quot;SELECT * FROM users WHERE id &#x3D; $id&quot;);</span><br><span class="line">    $user &#x3D; $result-&gt;fetch(PDO:FETCH_ASSOC); &#x2F;&#x2F; this is to get the associated array of data(username, email address,...)</span><br><span class="line">    memcache_set($memcache, $user[&#39;id&#39;], $user)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果我们一直将数据添加到内存中，内存总有一天会不够用，这时我们就需要删除一些数据来释放空间，我们可以删除最早的数据（LRU， Least Recent Used）或者最少用到的数据(LFU, Least Frequent Used)</li></ul><h3 id="data-replication-master-slave"><a class="markdownIt-Anchor" href="#data-replication-master-slave"></a> Data Replication: Master: slave</h3><ul><li>主从关系的服务器复制，所有的附属服务器要从主服务器中拿取数据，要将新数据写入主服务器，一切以主服务器为准，优点在于当主服务器down机时，我们可以自动化一个过程：因为所有服务器的数据都是一样的，我们可以将一个附属服务器晋升为新的主服务器。以保证服务不间断</li><li>适用于读多于写的网站，所有的读取都去附属服务器，所有的写入都去主服务器</li><li>缺点是当主服务器down机时，写入会短暂失效一段时间直到其中一个附属服务器成为新的主服务器</li></ul><h3>Data Replication: Master: Master</h3>- 当其中一个主服务器失效时，我们还有另外一个，从而保证不会有服务间断的时间.同样，读取请求发送到附属服务器，写入发送到主服务器<p><img src="/../images/Harvard-CS75-Web-Development/14.png" alt="" /></p><ul><li>上面的图片还是有一个缺点，就是如果load balancer失效了，整个服务还是会断开。所以我们需要有两个相同作用的load balancer</li><li>Load Balancer: active: active</li><li>每个load balancer都负责分配任务，并且他们会不断的每个一段时间向另一个load balancer发送一个heart beat，以证明自己的存在。如果任何一个load balancer没有收到另一个的心跳，他就将负责所有的流量</li><li>Load Balancer: active: passive</li><li>与之前相似，只不过一开始只有一个load balancer负责所有的流量，并且向passive的load balancer发送心跳，如果passive load balancer没有接收到心跳，他就把自己提升为active load balancer，并开始负责所有的任务。</li></ul><h3 id="partitioning"><a class="markdownIt-Anchor" href="#partitioning"></a> Partitioning</h3><p><img src="/../images/Harvard-CS75-Web-Development/15.png" alt="" /></p><ul><li>将整个服务系统复制，供多个不同的客户使用，Facebook早期将不同学校的用户分到不同的服务器中，<a href="http://xn--harvard-lr4kp4co76w.facebook.com">类似于harvard.facebook.com</a>, <a href="http://MIT.facebook.com">MIT.facebook.com</a>,以此来降低流量的压力。这样的话当你想联系不同大学的人时，就会有些困难。另外一个例子是我们可以将用户分配到不同的服务器中based on他们的名字，A-M到第一个，N-Z到第二个</li></ul><h3 id="high-availiability"><a class="markdownIt-Anchor" href="#high-availiability"></a> High Availiability</h3><p><img src="/../images/Harvard-CS75-Web-Development/16.png" alt="" /></p><ul><li>不同的服务器之间互相听取对方的心跳，并随时准备take over当另外的服务器offline</li><li>网络层和web server层之间需要load balancer web server层和DB层之间也需要load balancer，load balancer会将第一个返回的DB的信息加到Cookie中返回给用户，这样用户在Cookie过期之前都会被route到同一个服务器, 这样就保证用户不会被分配到另一个服务器里面却没有他最新的数据，服务器之间也会相互同步。 每一层之间的load balancer也需要多个以保证一个offlice不会影响全局。可以使用active active或者active passive， DB也需要多个，可以是Master Master或者Master Slave. 最后就是这样的一个Data center也需要多个，就像AWS一样在US， Aisa， Europe都会有服务器。</li></ul><h3 id="security"><a class="markdownIt-Anchor" href="#security"></a> Security</h3><ul><li>什么样的traffic可以进入data center？TCP 80和443</li><li>什么样的traffic可以从load balancer到web server？TCP 80. 我们可以在load balancer中加入证书并解密所有的traffic，然后之后的所有traffic都保持不加密的状态，因为我们已经进入到data center，不需要在担心安全问题，所以让load balancer去做揭秘这样的繁重工作，web server只负责应付无秘traffic</li><li>什么样的traffic从web server到DB？一般的SQL queries 也是 TCP 3306（port number 3306 is the default number SQL query uses）</li><li>注意web server之间并不能交流。</li><li>我们之所以设置这些规则，只让这些port的traffic进入，是因为加如其中一个web server被攻占了，那么它也只能向DB发送SQL请求，不能向其他web server发送443或者80请求，将破坏控制在最小。</li></ul><h3 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference</h3><ul><li><a href="https://www.youtube.com/watch?v=-W9F__D3oY4">S75 (Summer 2012) Lecture 9 Scalability Harvard Web Development David Malan</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Web Development </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Data Structures Advanced</title>
      <link href="2020/05/10/Data-Structures-Advanced/"/>
      <url>2020/05/10/Data-Structures-Advanced/</url>
      
        <content type="html"><![CDATA[<h2 id="sliding-window"><a class="markdownIt-Anchor" href="#sliding-window"></a> sliding window</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;通过两层for循环改进算法</span><br><span class="line">for (i &#x3D; 0, i &lt; n; ++i) &#123;</span><br><span class="line">    while (j &lt; n) &#123;</span><br><span class="line">        if (满足条件) &#123;</span><br><span class="line">            j++;</span><br><span class="line">            更新j状态</span><br><span class="line">        &#125; else if (不满足条件) &#123;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;更新i状态</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在一维字符串或者数组中找到符合条件的字串</li><li>前向型指针题目</li><li>窗口类</li><li>remove nth node from end of list</li><li>Minimum size subarray sum</li><li>Longest substring without rapeating characters</li><li>Minimum window substring</li><li>Longest Substring with at most k distinct characters</li><li>Longest Repeating Character Replacement</li><li>Longest Turbulent subarray</li><li>快慢类</li><li>find the middle of the linked list</li><li>linked list cycle 1 and 2</li><li>优化类型</li></ul><ol><li>优化思想通过两层for循环而来</li><li>外层指针依然是一次遍历</li><li>内层指针证明是否需要退回</li></ol><ul><li>two pointers题型分类</li></ul><ol><li>前向型<ol><li>窗口型</li><li>快慢型</li></ol></li><li>相向型</li><li>两个数组</li></ol><ul><li>第k大或者第k小问题</li></ul><h2 id="union-find-并查集"><a class="markdownIt-Anchor" href="#union-find-并查集"></a> Union Find 并查集</h2><ul><li>一种用来解决集合查询合并的数据结构 支持O(1) find and O(1) union，O(n) space</li></ul><ol><li>检查两个元素是否属于同一集合</li><li>合并两个集合，将root node指向另一个root node</li></ol><ul><li>可以使用array或者哈希表实现Union find</li><li>查找 find O(n) time</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public int find(int x) &#123;</span><br><span class="line">    if (father[x] &#x3D;&#x3D; x) &#123;</span><br><span class="line">    return x;</span><br><span class="line">    &#125;</span><br><span class="line">    return find(father[x]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>合并 union, O(n) time, 之合并两个root nodes，不管child nodes</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public void union(int a, int b) &#123;</span><br><span class="line">    int root_a &#x3D; find(a);</span><br><span class="line">    int root_b &#x3D; find(b);</span><br><span class="line">    &#x2F;&#x2F; 如果两个root nodes已经相等，则两个集合已经合并，不需要再操作</span><br><span class="line">    if (root_a !&#x3D; root_b) &#123;</span><br><span class="line">    father[root_a] &#x3D; root_b; &#x2F;&#x2F; 将root_a指向root_b</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>路径压缩：将find和union的时间复杂度变成O(1)</li><li>在查找元素的father的时候，第一次需要O(n)的时间，但是当找到最终的father时，将每一个路径中的father都更新成最终的father，以后在查找路径中的father就只需要O(1)</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public int find(int x) &#123;</span><br><span class="line">    if (father[x] &#x3D;&#x3D; x) &#123;</span><br><span class="line">        return x;</span><br><span class="line">    &#125;</span><br><span class="line">    return father[x] &#x3D; find(father[x]); &#x2F;&#x2F; 将当前点的father更新为最终father</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>Connecting graph 3</li><li>Connecting cities with minimum costs</li><li>Number of Operations to Make Network Connected</li><li>The Earliest Moment When Everyone Become Friends</li><li>Lexicographically Smallest Equivalent String</li><li>Number of Islands II</li></ol><ul><li>Union find问题总结</li><li>原生操作<ol><li>查询两个元素是否在用一个集合内。</li><li>合并两个元素所在的集合</li></ol></li><li>派生操作<ol><li>查询某个元素所在集合的元素个数。</li><li>查询当前集合的个数</li></ol></li></ul><h2 id="trie"><a class="markdownIt-Anchor" href="#trie"></a> Trie</h2><ul><li>常见考点</li><li><ol><li>Trie直接实现</li></ol></li><li><ol start="2"><li>利用Trie前缀特性解题</li></ol></li><li><ol start="3"><li>矩阵类里面，字符串一个一个字符，深度优先遍历的问题</li></ol></li><li>Trie和Hash拥有相同的时间复杂度，但是Trie的空间复杂度更小</li></ul><ol><li>Implement Trie</li><li>Add and search word</li><li>word search 2 -&gt; Trie + DFS</li></ol><h2 id="heap"><a class="markdownIt-Anchor" href="#heap"></a> Heap</h2><ul><li>Trapping rain water 2</li><li>怎么通过Trapping rain water 1拓展到这道题的思路</li><li>怎么样想到利用heap？</li><li>怎么想到由外向内遍历？</li><li>Find Median from Data Stream</li><li>Sliding Window Median</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Data Structures </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Think Python</title>
      <link href="2020/04/03/Think-Python/"/>
      <url>2020/04/03/Think-Python/</url>
      
        <content type="html"><![CDATA[<ol><li><a href="#chapter-1-the-first-program">Chapter 1: The First Program</a></li><li><a href="#chapter-2-variables-expressions-and-statements">Chapter 2: Variables, expressions and statements</a></li><li><a href="#chapter-3-functions">Chapter 3: Functions</a></li><li><a href="#chapter-4-conditionals-and-recursion">Chapter 4: Conditionals and recursion</a></li><li><a href="#chapter-5-fruitful-functions">Chapter 5: Fruitful functions</a></li><li><a href="#chapter-6-iteration">Chapter 6: Iteration</a></li><li><a href="#chapter-7-strings">Chapter 7: Strings</a></li><li><a href="#chapter-8-lists">Chapter 8: Lists</a></li><li><a href="#chapter-9-dictionaries">Chapter 9: Dictionaries</a></li><li><a href="#chapter-10-tuples">Chapter 10: Tuples</a></li></ol><h2 id="chapter-1-the-first-program"><a class="markdownIt-Anchor" href="#chapter-1-the-first-program"></a> Chapter 1: The First Program</h2><h3 id="python-interpreter"><a class="markdownIt-Anchor" href="#python-interpreter"></a> Python interpreter</h3><ul><li>Type python in the command line to start interpreter</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Python 3.4.0 (default, Jun 19 2015, 14:20:21)</span><br><span class="line">[GCC 4.8.2] on linux</span><br><span class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure><ul><li>The first three lines contain information about the interpreter and the operating system it’s<br />running on, so it might be different for you. But you should check that the version number,<br />which is 3.4.0 in this example, begins with 3, which indicates that you are running Python 3. If it begins with 2, you are running (you guessed it) Python 2.<br />The last line is a prompt that indicates that the interpreter is ready for you to enter pre. If<br />you type a line of pre and hit Enter, the interpreter displays the result:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; 1 + 1</span><br><span class="line">2</span><br></pre></td></tr></table></figure><h3 id="basic-arthmetic"><a class="markdownIt-Anchor" href="#basic-arthmetic"></a> Basic Arthmetic</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; 40 + 2</span><br><span class="line">42</span><br><span class="line">&gt;&gt;&gt; 43 - 1</span><br><span class="line">42</span><br><span class="line">&gt;&gt;&gt; 6 * 7</span><br><span class="line">42</span><br></pre></td></tr></table></figure><ul><li>The operator / performs division:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; 84 &#x2F; 2</span><br><span class="line">42.0</span><br></pre></td></tr></table></figure><ul><li>You might wonder why the result is 42.0 instead of 42. I’ll explain in the next section. Finally, the operator ** performs exponentiation; that is, it raises a number to a power:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; 6**2 + 6</span><br><span class="line">42</span><br></pre></td></tr></table></figure><ul><li>In some other languages, ^ is used for exponentiation, but in Python it is a bitwise operator called XOR. If you are not familiar with bitwise operators, the result will surprise you:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; 6 ^ 2</span><br><span class="line">4</span><br></pre></td></tr></table></figure><h3 id="values-and-types"><a class="markdownIt-Anchor" href="#values-and-types"></a> Values and Types</h3><ul><li>If you are not sure what type a value has, the interpreter can tell you:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; type(2)</span><br><span class="line">&lt; class &#39;int&#39;&gt;</span><br><span class="line">&gt;&gt;&gt; type(42.0)</span><br><span class="line">&lt; class &#39;float&#39;&gt;</span><br><span class="line">&gt;&gt;&gt; type(&#39;Hello, World!&#39;)</span><br><span class="line">&lt; class &#39;str&#39;&gt;</span><br></pre></td></tr></table></figure><h2 id="chapter-2-variables-expressions-and-statements"><a class="markdownIt-Anchor" href="#chapter-2-variables-expressions-and-statements"></a> Chapter 2: Variables, Expressions and Statements</h2><h3 id="statement"><a class="markdownIt-Anchor" href="#statement"></a> Statement</h3><ul><li>An assignment statement creates a new variable and gives it a value:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; message &#x3D; &#39;And now for something completely different&#39;</span><br><span class="line">&gt;&gt;&gt; n &#x3D; 17</span><br><span class="line">&gt;&gt;&gt; pi &#x3D; 3.1415926535897932</span><br></pre></td></tr></table></figure><h3 id="expressions"><a class="markdownIt-Anchor" href="#expressions"></a> Expressions</h3><ul><li>An expression is a combination of values, variables, and operators. A value all by itself is considered an expression, and so is a variable, so the following are all legal expressions:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; 42</span><br><span class="line">42</span><br><span class="line">&gt;&gt;&gt; n</span><br><span class="line">17</span><br><span class="line">&gt;&gt;&gt; n + 25</span><br><span class="line">42</span><br></pre></td></tr></table></figure><ul><li>When you type an expression at the prompt, the interpreter evaluates it, which means that it finds the value of the expression. In this example, n has the value 17 and n + 25 has the value 42. A statement is a unit of pre that has an effect, like creating a variable or displaying a value.</li></ul><h3 id="order-of-operations"><a class="markdownIt-Anchor" href="#order-of-operations"></a> Order of operations</h3><ul><li><p>Parentheses have the highest precedence and can be used to force an expression to evaluate in the order you want. Since expressions in parentheses are evaluated first, 2 * (3-1) is 4, and (1+1)**(5-2) is 8. You can also use parentheses to make an expression easier to read, as in (minute * 100) / 60, even if it doesn’t change the result.</p></li><li><p>Exponentiation has the next highest precedence, so <code>1 + 2**3</code> is 9, not 27, and <code>2 * 3**2</code> is 18, not 36.</p></li><li><p>Multiplication and Division have higher precedence than Addition and Subtraction. So 2*3-1 is 5, not 4, and 6+4/2 is 8, not 5.</p></li><li><p>Operators with the same precedence are evaluated from left to right (except exponentiation). So in the expression degrees / 2 * pi, the division happens first and the result is multiplied by pi. To divide by 2π, you can use parentheses or write degrees / 2 / pi.</p></li></ul><h3 id="comments"><a class="markdownIt-Anchor" href="#comments"></a> Comments</h3><ul><li>comments, and they start with the # symbol. “”“fdsfsdfsd”&quot;&quot; for multiple lines of comments</li></ul><h2 id="chapter-3-functions"><a class="markdownIt-Anchor" href="#chapter-3-functions"></a> Chapter 3: Functions</h2><ul><li><p>In the context of programming, a function is a named sequence of statements that performs a computation. When you define a function, you specify the name and the sequence of statements. Later, you can “call” the function by name.</p></li><li><p>It is common to say that a function “takes” an argument and “returns” a result. The result is also called the return value.</p></li><li><p>Python has a math module that provides most of the familiar mathematical functions. A module is a file that contains a collection of related functions. Before we can use the functions in a module, we have to import it with an import statement:</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;&gt; import math</span><br></pre></td></tr></table></figure><h3 id="adding-new-functions"><a class="markdownIt-Anchor" href="#adding-new-functions"></a> Adding new functions</h3><ul><li>So far, we have only been using the functions that come with Python, but it is also possible to add new functions. A function definition specifies the name of a new function and the sequence of statements that run when the function is called.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def print_lyrics():</span><br><span class="line">    print(&quot;I&#39;m a lumberjack, and I&#39;m okay.&quot;)</span><br><span class="line">    print(&quot;I sleep all night and I work all day.&quot;)</span><br></pre></td></tr></table></figure><ul><li><p>The first line of the function definition is called the header; the rest is called the body. The header has to end with a colon and the body has to be indented. By convention, indentation is always four spaces. The body can contain any number of statements.</p></li><li><p>A function can be inside another function</p></li></ul><h3 id="parameters-and-arguments"><a class="markdownIt-Anchor" href="#parameters-and-arguments"></a> Parameters and arguments</h3><ul><li><p>Some of the functions we have seen require arguments. For example, when you call math.sin you pass a number as an argument. Some functions take more than one argument: math.pow takes two, the base and the exponent</p></li><li><p>When you create a variable inside a function, it is local, which means that it only exists inside the function</p></li></ul><h3 id="encapsulation"><a class="markdownIt-Anchor" href="#encapsulation"></a> Encapsulation</h3><ul><li>Wrapping a piece of pre up in a function is called encapsulation. One of the benefits of encapsulation is that it attaches a name to the pre, which serves as a kind of documentation. Another advantage is that if you re-use the pre, it is more concise to call a function twice than to copy and paste the body!</li></ul><h2 id="chapter-4-conditionals-and-recursion"><a class="markdownIt-Anchor" href="#chapter-4-conditionals-and-recursion"></a> Chapter 4: Conditionals and recursion</h2><h3 id="floor-divisions-and-modulus"><a class="markdownIt-Anchor" href="#floor-divisions-and-modulus"></a> Floor divisions and modulus</h3><ul><li>The floor division operator, //, divides two numbers and rounds down to an integer</li><li>e the modulus operator, %, which divides two numbers and returns the remainder</li></ul><h3 id="boolean-expressions"><a class="markdownIt-Anchor" href="#boolean-expressions"></a> Boolean expressions</h3><ul><li>A boolean expression is an expression that is either true or false. The following examples use the operator ==, which compares two operands and produces True if they are equal and False otherwise:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; 5 &#x3D;&#x3D; 5</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; 5 &#x3D;&#x3D; 6</span><br><span class="line">False</span><br></pre></td></tr></table></figure><h3 id="logical-operators"><a class="markdownIt-Anchor" href="#logical-operators"></a> Logical operators</h3><ul><li>AND</li><li>OR</li><li>NOT</li></ul><h3 id="conditional-execution"><a class="markdownIt-Anchor" href="#conditional-execution"></a> Conditional execution</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if x % 2 &#x3D;&#x3D; 0:</span><br><span class="line">    print(&#39;x is even&#39;)</span><br><span class="line">else:</span><br><span class="line">    print(&#39;x is odd&#39;)</span><br></pre></td></tr></table></figure><h3 id="chained-conditions"><a class="markdownIt-Anchor" href="#chained-conditions"></a> Chained conditions</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if x &lt; y:</span><br><span class="line">    print(&#39;x is less than y&#39;)</span><br><span class="line">elif x &gt; y:</span><br><span class="line">    print(&#39;x is greater than y&#39;)</span><br><span class="line">else:</span><br><span class="line">    print(&#39;x and y are equal&#39;)</span><br></pre></td></tr></table></figure><h3 id="recursion"><a class="markdownIt-Anchor" href="#recursion"></a> Recursion</h3><ul><li>It is legal for one function to call another; it is also legal for a function to call itself.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def countdown(n):</span><br><span class="line">    if n &lt;&#x3D; 0:</span><br><span class="line">        print(&#39;Blastoff!&#39;)</span><br><span class="line">    else:</span><br><span class="line">        print(n)</span><br><span class="line">        countdown(n-1)</span><br></pre></td></tr></table></figure><h3 id="keyboard-input"><a class="markdownIt-Anchor" href="#keyboard-input"></a> Keyboard input</h3><ul><li>Python provides a built-in function called input that stops the program and waits for the user to type something. When the user presses Return or Enter, the program resumes and input returns what the user typed as a string</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; text &#x3D; input()</span><br><span class="line">What are you waiting for?</span><br><span class="line">&gt;&gt;&gt; text</span><br><span class="line">&#39;What are you waiting for?&#39;</span><br></pre></td></tr></table></figure><h2 id="chapter-5-fruitful-functions"><a class="markdownIt-Anchor" href="#chapter-5-fruitful-functions"></a> Chapter 5: Fruitful functions</h2><ul><li>Functions that return a value</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def absolute_value(x):</span><br><span class="line">    if x &lt; 0:</span><br><span class="line">        return -x</span><br><span class="line">    else:</span><br><span class="line">        return x</span><br></pre></td></tr></table></figure><h3 id="incremental-development"><a class="markdownIt-Anchor" href="#incremental-development"></a> Incremental development</h3><ul><li>Start with a working program and make small incremental changes. At any point, if there is an error, you should have a good idea where it is.</li></ul><h2 id="chapter-6-iteration"><a class="markdownIt-Anchor" href="#chapter-6-iteration"></a> Chapter 6: Iteration</h2><ul><li>The ability to run a block of statements repeatedly</li></ul><h3 id="the-while-statement"><a class="markdownIt-Anchor" href="#the-while-statement"></a> The while statement</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def countdown(n):</span><br><span class="line">    while n &gt; 0:</span><br><span class="line">        print(n)</span><br><span class="line">        n &#x3D; n - 1</span><br><span class="line">    print(&#39;Blastoff!&#39;)</span><br></pre></td></tr></table></figure><ol><li>Determine whether the condition is true or false.</li><li>If false, exit the while statement and continue execution at the next statement.</li><li>If the condition is true, run the body and then go back to step 1.</li></ol><h3 id="break"><a class="markdownIt-Anchor" href="#break"></a> Break</h3><ul><li>Sometimes you don’t know it’s time to end a loop until you get half way through the body. In that case you can use the break statement to jump out of the loop</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">while True:</span><br><span class="line">    line &#x3D; input(&#39;&gt; &#39;)</span><br><span class="line">    if line &#x3D;&#x3D; &#39;done&#39;:</span><br><span class="line">        break</span><br><span class="line">    print(line)</span><br><span class="line">print(&#39;Done!&#39;)</span><br></pre></td></tr></table></figure><h2 id="chapter-7-strings"><a class="markdownIt-Anchor" href="#chapter-7-strings"></a> Chapter 7: Strings</h2><ul><li>Strings are not like integers, floats, and booleans. A string is a sequence of characters, which means it is an ordered collection of other values. In this chapter you’ll see how to access the characters that make up a string, and you’ll learn about some of the methods strings provide</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; fruit &#x3D; &#39;banana&#39;</span><br><span class="line">&gt;&gt;&gt; letter &#x3D; fruit[1]</span><br><span class="line">&gt;&gt;&gt; letter</span><br><span class="line">&#39;a&#39;</span><br><span class="line">&gt;&gt;&gt; len(fruit)</span><br><span class="line">6</span><br></pre></td></tr></table></figure><h3 id="traversal-with-a-for-loop"><a class="markdownIt-Anchor" href="#traversal-with-a-for-loop"></a> Traversal with a for loop</h3><ul><li>A lot of computations involve processing a string one character at a time. Often they start at the beginning, select each character in turn, do something to it, and continue until the end. This pattern of processing is called a traversal. One way to write a traversal is with a while loop:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">index &#x3D; 0</span><br><span class="line">while index &lt; len(fruit):</span><br><span class="line">    letter &#x3D; fruit[index]</span><br><span class="line">    print(letter)</span><br><span class="line">    index &#x3D; index + 1</span><br></pre></td></tr></table></figure><ul><li>another way to traverse is to use a for loop</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for letter in fruit:</span><br><span class="line">    print(letter)</span><br></pre></td></tr></table></figure><h3 id="strings-slices"><a class="markdownIt-Anchor" href="#strings-slices"></a> Strings slices</h3><ul><li>A segment of a string is called a slice. Selecting a slice is similar to selecting a character:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; s &#x3D; &#39;Monty Python&#39;</span><br><span class="line">&gt;&gt;&gt; s[0:5]</span><br><span class="line">&#39;Monty&#39;</span><br><span class="line">&gt;&gt;&gt; s[6:12]</span><br><span class="line">&#39;Python&#39;</span><br></pre></td></tr></table></figure><ul><li><p>The operator [n:m] returns the part of the string from the “n-eth” character to the “m-eth” character, including the first but excluding the last</p></li><li><p>If you omit the first index (before the colon), the slice starts at the beginning of the string. If you omit the second index, the slice goes to the end of the string:</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; fruit &#x3D; &#39;banana&#39;</span><br><span class="line">&gt;&gt;&gt; fruit[:3]</span><br><span class="line">&#39;ban&#39;</span><br><span class="line">&gt;&gt;&gt; fruit[3:]</span><br><span class="line">&#39;ana&#39;</span><br><span class="line">&gt;&gt;&gt; fruit &#x3D; &#39;banana&#39;</span><br><span class="line">&gt;&gt;&gt; fruit[3:3]</span><br><span class="line">&#39;&#39;</span><br></pre></td></tr></table></figure><h3 id="strings-are-immutable"><a class="markdownIt-Anchor" href="#strings-are-immutable"></a> Strings are immutable</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; greeting &#x3D; &#39;Hello, world!&#39;</span><br><span class="line">&gt;&gt;&gt; greeting[0] &#x3D; &#39;J&#39;</span><br><span class="line">TypeError: &#39;str&#39; object does not support item assignment</span><br></pre></td></tr></table></figure><h3 id="the-in-operator"><a class="markdownIt-Anchor" href="#the-in-operator"></a> The in operator</h3><ul><li>The word in is a boolean operator that takes two strings and returns True if the first appears as a substring in the second:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &#39;a&#39; in &#39;banana&#39;</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; &#39;seed&#39; in &#39;banana&#39;</span><br><span class="line">False</span><br></pre></td></tr></table></figure><h3 id="string-comparison"><a class="markdownIt-Anchor" href="#string-comparison"></a> String comparison</h3><ul><li>Upper case letters come before lower case letters, we can use &gt; or &lt; or == to compare strings</li></ul><h2 id="chapter-8-lists"><a class="markdownIt-Anchor" href="#chapter-8-lists"></a> Chapter 8: Lists</h2><h3 id="list-is-a-sequence"><a class="markdownIt-Anchor" href="#list-is-a-sequence"></a> List is a sequence</h3><ul><li><p>Like a string, a list is a sequence of values. In a string, the values are characters; in a list, they can be any type. The values in a list are called elements or sometimes items.</p></li><li><p>There are several ways to create a new list; the simplest is to enclose the elements in square brackets ([ and ]):</p></li><li><p>The elements of a list don’t have to be the same type.</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; cheeses &#x3D; [&#39;Cheddar&#39;, &#39;Edam&#39;, &#39;Gouda&#39;]</span><br><span class="line">&gt;&gt;&gt; numbers &#x3D; [42, 123]</span><br><span class="line">&gt;&gt;&gt; empty &#x3D; []</span><br><span class="line">&gt;&gt;&gt; print(cheeses, numbers, empty)</span><br><span class="line">[&#39;Cheddar&#39;, &#39;Edam&#39;, &#39;Gouda&#39;] [42, 123] []</span><br></pre></td></tr></table></figure><h3 id="lists-are-mutable"><a class="markdownIt-Anchor" href="#lists-are-mutable"></a> Lists are mutable</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; numbers &#x3D; [42, 123]</span><br><span class="line">&gt;&gt;&gt; numbers[1] &#x3D; 5</span><br><span class="line">&gt;&gt;&gt; numbers</span><br><span class="line">[42, 5]</span><br></pre></td></tr></table></figure><h3 id="traversing-a-list"><a class="markdownIt-Anchor" href="#traversing-a-list"></a> Traversing a list</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for i in range(len(numbers)):</span><br><span class="line">    numbers[i] &#x3D; numbers[i] * 2</span><br></pre></td></tr></table></figure><h3 id="list-operations"><a class="markdownIt-Anchor" href="#list-operations"></a> List operations</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; [1, 2, 3]</span><br><span class="line">&gt;&gt;&gt; b &#x3D; [4, 5, 6]</span><br><span class="line">&gt;&gt;&gt; c &#x3D; a + b</span><br><span class="line">&gt;&gt;&gt; c</span><br><span class="line">[1, 2, 3, 4, 5, 6]</span><br><span class="line">&gt;&gt;&gt; [0] * 4</span><br><span class="line">[0, 0, 0, 0]</span><br><span class="line">&gt;&gt;&gt; [1, 2, 3] * 3</span><br><span class="line">[1, 2, 3, 1, 2, 3, 1, 2, 3]</span><br></pre></td></tr></table></figure><h3 id="list-slices"><a class="markdownIt-Anchor" href="#list-slices"></a> List slices</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; t &#x3D; [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;]</span><br><span class="line">&gt;&gt;&gt; t[1:3]</span><br><span class="line">[&#39;b&#39;, &#39;c&#39;]</span><br><span class="line">&gt;&gt;&gt; t[:4]</span><br><span class="line">[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;]</span><br><span class="line">&gt;&gt;&gt; t[3:]</span><br><span class="line">[&#39;d&#39;, &#39;e&#39;, &#39;f&#39;]</span><br></pre></td></tr></table></figure><h3 id="list-methods"><a class="markdownIt-Anchor" href="#list-methods"></a> List methods</h3><ul><li>append adds a new element to the end of a list:</li><li>extend takes a list as an argument and appends all of the elements:</li><li>sort arranges the elements of the list from low to high:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; t &#x3D; [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</span><br><span class="line">&gt;&gt;&gt; t.append(&#39;d&#39;)</span><br><span class="line">&gt;&gt;&gt; t</span><br><span class="line">[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;]</span><br><span class="line">&gt;&gt;&gt; t1 &#x3D; [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</span><br><span class="line">&gt;&gt;&gt; t2 &#x3D; [&#39;d&#39;, &#39;e&#39;]</span><br><span class="line">&gt;&gt;&gt; t1.extend(t2)</span><br><span class="line">&gt;&gt;&gt; t1</span><br><span class="line">[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;]</span><br><span class="line">&gt;&gt;&gt; t &#x3D; [&#39;d&#39;, &#39;c&#39;, &#39;e&#39;, &#39;b&#39;, &#39;a&#39;]</span><br><span class="line">&gt;&gt;&gt; t.sort()</span><br><span class="line">&gt;&gt;&gt; t</span><br><span class="line">[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;]</span><br></pre></td></tr></table></figure><h3 id="deleting-elements"><a class="markdownIt-Anchor" href="#deleting-elements"></a> Deleting elements</h3><ul><li>If you know the index of the element you want, you can use pop:</li><li>pop modifies the list and returns the element that was removed. If you don’t provide an index, it deletes and returns the last element.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; t &#x3D; [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</span><br><span class="line">&gt;&gt;&gt; x &#x3D; t.pop(1)</span><br><span class="line">&gt;&gt;&gt; t</span><br><span class="line">[&#39;a&#39;, &#39;c&#39;]</span><br><span class="line">&gt;&gt;&gt; x</span><br><span class="line">&#39;b&#39;</span><br></pre></td></tr></table></figure><ul><li>If you don’t need the removed value, you can use the del operator:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; t &#x3D; [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</span><br><span class="line">&gt;&gt;&gt; del t[1]</span><br><span class="line">&gt;&gt;&gt; t</span><br><span class="line">[&#39;a&#39;, &#39;c&#39;]</span><br></pre></td></tr></table></figure><ul><li>If you know the element you want to remove (but not the index), you can use remove:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; t &#x3D; [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</span><br><span class="line">&gt;&gt;&gt; t.remove(&#39;b&#39;)</span><br><span class="line">&gt;&gt;&gt; t</span><br><span class="line">[&#39;a&#39;, &#39;c&#39;]</span><br></pre></td></tr></table></figure><h3 id="objects-and-values"><a class="markdownIt-Anchor" href="#objects-and-values"></a> Objects and values</h3><ul><li>In one case, a and b refer to two different objects that have the same value. In the second case, they refer to the same object.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; &quot;word1&quot;</span><br><span class="line">&gt;&gt;&gt; b &#x3D; &quot;word1&quot;</span><br><span class="line">&gt;&gt;&gt; a is b</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; a &#x3D; [1,2,3]</span><br><span class="line">&gt;&gt;&gt; b &#x3D; [1,2,3]</span><br><span class="line">&gt;&gt;&gt; a is b</span><br><span class="line">False</span><br><span class="line">&gt;&gt;&gt; a &#x3D;&#x3D; b</span><br><span class="line">True</span><br></pre></td></tr></table></figure><h3 id="aliasing"><a class="markdownIt-Anchor" href="#aliasing"></a> Aliasing</h3><ul><li>If a refers to an object and you assign b = a, then both variables refer to the same object, even for a list</li><li>Its also called shallow copy</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; a &#x3D; [1, 2, 3]</span><br><span class="line">&gt;&gt;&gt; b &#x3D; a</span><br><span class="line">&gt;&gt;&gt; b is a</span><br><span class="line">True</span><br></pre></td></tr></table></figure><ul><li>For objects that may take lots of memory space, the program will prefer to only make a reference to its original object when you create another variable to points to it.</li></ul><h3 id="list-arguments"><a class="markdownIt-Anchor" href="#list-arguments"></a> List arguments</h3><ul><li>When you pass a list to a function, the function gets a reference to the list. If the function modifies the list, the caller sees the change.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def delete_head(t):</span><br><span class="line">    del t[0]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; letters &#x3D; [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</span><br><span class="line">&gt;&gt;&gt; delete_head(letters)</span><br><span class="line">&gt;&gt;&gt; letters</span><br><span class="line">[&#39;b&#39;, &#39;c&#39;]</span><br></pre></td></tr></table></figure><h2 id="chapter-9-dictionaries"><a class="markdownIt-Anchor" href="#chapter-9-dictionaries"></a> Chapter 9: Dictionaries</h2><ul><li><p>A dictionary contains a collection of indices, which are called keys, and a collection of values. Each key is associated with a single value. The association of a key and a value is called a key-value pair or sometimes an item</p></li><li><p>The function dict creates a new dictionary with no items. Because dict is the name of a built-in function, you should avoid using it as a variable name</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; eng2sp &#x3D; dict()</span><br><span class="line">&gt;&gt;&gt; eng2sp</span><br><span class="line">&#123;&#125;</span><br><span class="line">&gt;&gt;&gt; eng2sp[&#39;one&#39;] &#x3D; &#39;uno&#39; # add an item with key &#x3D; &#39;one&#39; and value &#x3D; &#39;uno&#39;</span><br><span class="line">&gt;&gt;&gt; eng2sp</span><br><span class="line">&#123;&#39;one&#39;: &#39;uno&#39;&#125;</span><br></pre></td></tr></table></figure><ul><li><p>The order of the key-value pairs might not be the same. If you type the same example on your computer, you might get a different result. In general, the order of items in a dictionary is unpredictable. This is because when we insert items into the dictionary, it randomly put items into buckets, so it could be different everytime. (Hash)</p></li><li><p>check whether a dictionary contains some key</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; &#39;one&#39; in eng2sp</span><br><span class="line">True</span><br><span class="line">&gt;&gt;&gt; &#39;uno&#39; in eng2sp</span><br><span class="line">False</span><br></pre></td></tr></table></figure><ul><li>check whether a dictionary contains some value</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; vals &#x3D; eng2sp.values()</span><br><span class="line">&gt;&gt;&gt; &#39;uno&#39; in vals</span><br><span class="line">True</span><br></pre></td></tr></table></figure><ul><li>Python dictionaries use a data structure called a hashtable that has a remarkable property: the in operator takes about the same amount of time no matter how many items are in the dictionary. Instant lookup time!</li></ul><h3 id="dictionary-as-a-collection-of-counters"><a class="markdownIt-Anchor" href="#dictionary-as-a-collection-of-counters"></a> Dictionary as a collection of counters</h3><ul><li>Suppose you are given a string and you want to count how many times each letter appears. There are several ways you could do it</li></ul><ol><li>You could create 26 variables, one for each letter of the alphabet. Then you could traverse the string and, for each character, increment the corresponding counter, probably using a chained conditional.</li><li>You could create a list with 26 elements. Then you could convert each character to a number (using the built-in function ord), use the number as an index into the list, and increment the appropriate counter.</li><li>You could create a dictionary with characters as keys and counters as the corresponding values. The first time you see a character, you would add an item to the dictionary. After that you would increment the value of an existing item.</li></ol><ul><li>An implementation is a way of performing a computation; some implementations are better than others. For example, an advantage of the dictionary implementation is that we don’t have to know ahead of time which letters appear in the string and we only have to make room for the letters that do appear.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def histogram(s):</span><br><span class="line">    d &#x3D; dict()</span><br><span class="line">    for c in s:</span><br><span class="line">    if c not in d:</span><br><span class="line">        d[c] &#x3D; 1</span><br><span class="line">    else:</span><br><span class="line">        d[c] +&#x3D; 1</span><br><span class="line">    return d</span><br></pre></td></tr></table></figure><h3 id="looping-and-dictionaries"><a class="markdownIt-Anchor" href="#looping-and-dictionaries"></a> Looping and dictionaries</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def print_hist(h):</span><br><span class="line">    for c in h:</span><br><span class="line">        print(c, h[c])</span><br></pre></td></tr></table></figure><ul><li>Given a dictionary d and a key k, it is easy to find the corresponding value v = d[k]. This operation is called a lookup. But what if you have v and you want to find k? You have two problems: first, there might be more than one key that maps to the value v. Depending on the application, you might be able to pick one, or you might have to make a list that contains all of them. Second, there is no simple syntax to do a reverse lookup; you have to search</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def reverse_lookup(d, v):</span><br><span class="line">    for k in d:</span><br><span class="line">        if d[k] &#x3D;&#x3D; v:</span><br><span class="line">            return k</span><br><span class="line">    raise LookupError()</span><br></pre></td></tr></table></figure><h2 id="chapter-10-tuples"><a class="markdownIt-Anchor" href="#chapter-10-tuples"></a> Chapter 10: Tuples</h2><h3 id="tuples-are-immutable"><a class="markdownIt-Anchor" href="#tuples-are-immutable"></a> Tuples are immutable</h3><ul><li>A tuple is a sequence of values. The values can be any type, and they are indexed by integers, so in that respect tuples are a lot like lists. The important difference is that tuples are immutable.</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; t &#x3D; tuple()</span><br><span class="line">&gt;&gt;&gt; t</span><br><span class="line">()</span><br></pre></td></tr></table></figure><ul><li>Most list operators also work on tuples. The bracket operator indexes an element:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; t &#x3D; (&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;)</span><br><span class="line">&gt;&gt;&gt; t[0]</span><br><span class="line">&#39;a&#39;</span><br><span class="line">&gt;&gt;&gt; t[1:3]</span><br><span class="line">(&#39;b&#39;, &#39;c&#39;)</span><br><span class="line">&gt;&gt;&gt; t[0] &#x3D; &#39;A&#39;</span><br><span class="line">TypeError: object doesn&#39;t support item assignment</span><br></pre></td></tr></table></figure><h3 id="tuples-and-return-values"><a class="markdownIt-Anchor" href="#tuples-and-return-values"></a> Tuples and return values</h3><ul><li>Strictly speaking, a function can only return one value, but if the value is a tuple, the effect is the same as returning multiple values. For example, if you want to divide two integers and compute the quotient and remainder, it is inefficient to compute x//y and then x%y. It is better to compute them both at the same time</li><li>The built-in function divmod takes two arguments and returns a tuple of two values, the quotient and remainder. You can store the result as a tuple:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; t &#x3D; divmod(7, 3)</span><br><span class="line">&gt;&gt;&gt; t</span><br><span class="line">(2, 1)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Data Structures</title>
      <link href="2020/03/02/Data-Structures/"/>
      <url>2020/03/02/Data-Structures/</url>
      
        <content type="html"><![CDATA[<h2 id="bianry-search"><a class="markdownIt-Anchor" href="#bianry-search"></a> Bianry Search</h2><ul><li>Use O(1) to make a T(n) problem T(n/2). So the total time complexity would be O(logn).</li><li>Ignore half of the problems in O(1) time.</li><li>First Bad Version</li><li>Search in a Big Sorted Array. Double the search number every time, then serach from n to 2n</li><li>Find Minimum in Rotated Sorted Array. Divide the array into a normal sorted array and a smaller rotated sorted array.</li><li>Search in a 2D matrix. Perform Binary Search 2 times. First find the row, then perform binary search on that row.</li><li>Search for a Range. Find the target number then perform binary search on its left and right.</li><li>Maximum Number in Mountain Sequence. Check mid number to see if it is incresing or decresing, we can return any mountain value.</li></ul><h2 id="bianry-tree-and-divide-conquer"><a class="markdownIt-Anchor" href="#bianry-tree-and-divide-conquer"></a> Bianry Tree and Divide &amp; Conquer</h2><ul><li>There are 3 ways to traverse a binary tree. Pre order, In order and post order</li><li>You need to know both resursive version and iterative version.</li><li>DFS includes pre order, in order, post order, divide &amp; conquer</li><li>Bianry tree has height from O(logn) to O(n), traverse a binary tree takes O(n) time.</li><li>In order traverse a binary search tree is an increasing order traverse.</li><li>Maximum depth of Binary tree. Resursive: Divide and conquer/ traverse</li><li>Subtree with Maximum Average</li><li>Lowest Common Ancestor: Divide &amp; Conquer, check leftsubtree and rightsubtree. See if they return A or B or null</li><li>Validate Binary Search Tree. Bottom up, return max and min return to the parent node.</li><li>Convert Binary Search Tree to Doubly Linked List. Inorder traverse it into a list and convert it.</li><li>Flattern Binary Tree to Linked List. node.right = head of left subtree, tail of left subtree = head of right subtree.</li><li>Insert and delete a node from a Binary Search Tree</li></ul><h2 id="bfs"><a class="markdownIt-Anchor" href="#bfs"></a> BFS</h2><ul><li><ol><li>make a list and put all start nodes into the list</li></ol></li><li><ol start="2"><li>traverse the list to get new nodes for the next level</li></ol></li><li><ol start="3"><li>use Queue for BFS</li></ol></li><li>Graph BFS</li><li>Social Network</li><li>六度理论 你和世界上任何一个人之间最多间隔6个人 Linkedin BFS看第几层有相同好友</li><li>树和图的区别，树是单向的，图可以是双向的（或者单项）</li><li>在遍历图中，会有环，可以用HashSet检查是否曾经访问过某个节点</li><li>树的特性，树中如果有N个点，就会有N-1条边。树中的所有点连通。用Queue和Set访问并保存所有Graph中的点</li><li>构造Graph， 可以用 Map&lt;Integer, Set&lt;Integer&gt;&gt; Graph其实就是保存着（每个点和与他相邻的点的Set）的Map</li><li>BFS on a 2D-array</li><li>Number of islands</li><li>Wall and Gates</li><li>什么时候使用BFS？</li><li><ol><li>Tree的层次遍历</li></ol></li><li><ol start="2"><li>2D-array中求连通性，灌水</li></ol></li><li><ol start="3"><li>拓扑排序</li></ol></li><li><ol start="4"><li>图的最短路径</li></ol></li></ul><h2 id="dfs"><a class="markdownIt-Anchor" href="#dfs"></a> DFS</h2><ul><li>Recursion</li><li>Combination</li><li>Permutation</li><li>Graph</li><li>Non-Recursion</li><li>什么时候使用DFS？</li><li><ol><li>找所有方案，排列，组合</li></ol></li><li><ol start="2"><li>找最优方案（最短，最长）（大部分是动态规划，也有可能是DFS）</li></ol></li><li>Questions</li><li><ol><li>Combination sum</li></ol></li><li><ol start="2"><li>Palindrome Partitioning 所有的切割问题都是组合问题</li></ol></li><li>切割abc字符串，有两个切割位 a1b2c， 可以切ab之间也可以切bc之间，把数字12放入代表切割位，所以切割的方式有</li><li>a b c [1,2]</li><li>a bc [1]</li><li>ab c [2]</li><li>abc []</li><li>以上可以看出四种切割方式可以用数字表示</li><li>所以n个字母的切割问题可以看作是n - 1个数字的组合问题</li><li>Backtracking</li><li>Permutation的去重与Combination相似，可以先定义一个boolean数组存放visited信息</li><li>N皇后</li><li>每一行和每一列都是1…n的一种排列</li><li>如何判断皇后在同一斜线上： 横坐标与纵坐标之差相等，或者横坐标与纵坐标之和相等</li><li>Word Ladder: BFS, 把ListWord转换成graph的形式，对于每个word，先找到所有可能的变换，总共有单词长度*26种，然后这些变换中存在于Wordlist中的就是他的neighbor，就可以变成标准的BFS问题</li><li>Word Ladder 2：Backtracking + BFS， 先从End往Begin做BFS找到每个单词距离End的长度，保证Backtrack时不会遍历更远的单词。再从Begin往End做backtracking</li></ul><h2 id="linked-list-and-array"><a class="markdownIt-Anchor" href="#linked-list-and-array"></a> Linked List and Array</h2><ul><li>Reverse linked list</li><li>Reverse linked list in k group</li><li>Use dummy node to save the list head</li><li>画图去理解linked list的变化</li><li>dummy node practices</li></ul><ol><li>partition-list</li><li>merge two sorted list</li><li>reverse linked list 2</li><li>swap two nodes in linked list</li><li>reorder list</li><li>rotate list</li></ol><ul><li>Copy list with random pointer -&gt; similar to clone graph</li><li>Linked List Cycle 1 and 2 -&gt; Floyd’s Tortoise and Hare</li><li>Sort List -&gt; how many sort algorithm has time complexity O(nlogn)?</li></ul><ol><li>Quick Sort, with O(1) Space Complexity</li><li>Merge Sort, with O(n) space</li><li>Heap Sort</li></ol><ul><li>Merge two sorted array</li><li>Merge small array into big array</li><li>intersection of two arrays</li><li>Median of two sorted arrays -&gt; find the (m + n) / 2th number, use O(logn)</li><li>Median</li><li>Kth largest element</li><li>Merge Sort practice</li><li>Quick Sort practice</li><li>Same integers will not remain their relative order in the old list after using quick sort. Merge sort will keep the relative order of same integers</li><li>Merge sort will first split the array into two subarray until there is only one number left in the array, then sort, then merge the two sorted array back to one array. From small array to big array</li><li>Qucik sort will first pick a pivot value, sort the entire array based on the pivot value. Then sort the two small array. From big array two small array</li><li>Note in Quick Sort, when we find a value equals to the pivot value, we don’t swap it, leave it as where it is. We need to split these values as even as possible.</li><li>Quick sort while loop condition: while (left &lt;= right). Don’t forget the equal sign</li></ul><h2 id="subarray"><a class="markdownIt-Anchor" href="#subarray"></a> Subarray</h2><ul><li>PrefixSum, HashMap to store prefixsum, then linear scan, So O(n) time and space</li><li>Maximum subarray</li><li>Minimum subarray</li><li>subarray sum equals k</li><li>number of subarray equals k</li></ul><h2 id="two-pointers"><a class="markdownIt-Anchor" href="#two-pointers"></a> Two pointers</h2><ul><li>O(n) time complexity</li><li>同向双指针</li><li>Move zeros</li><li>Remove duplicate number in array</li><li>Remove duplicate numbers in sorted array -&gt; tortise and hare cycle detection</li><li>相向双指针</li><li>valid palindrome</li><li>rotate string -&gt; three step reverse, when reverse a string, one start from begin and another start from end</li><li>recover rotated sorted array -&gt; similar to above, find the rotate point, three step reverse.</li><li>Two Sum 1-7</li><li>Two Sum 1 -&gt; 最普通的Two Sum， 可以使用HashMap，或者先排序在使用相向双指针，这样可以不是用额外空间，但是时间复杂度是O(nlogn)</li><li>Two Sum 2 - Data Structure Design -&gt; HashMap</li><li>Two Sum 3 - Array is sorted -&gt; 相向双指针</li><li>Two sum 7 - unique pairs -&gt; 找到所有符合的数对,相向双指针，当找到一对时，left++,right–,并继续。如果遇到重复比如1,1,3,4,4,每次我们移动时，移动到与之前的数不一样的数为止。注意此方法要求数组是有序的。</li><li>3Sum -&gt; 使用Two sum的结果，对于array中的每一个不等的数，检查是否有一对数的和等于它的相反数。可以使用HashMap或者two pointers，记住two pointers必须先排序数组。Two pointers的速度远快于HashMap</li><li>Valid Triangle Number -&gt; 检查有多少组三个数可以组成合法的三角形的三条边。注意我们只需要检查最小的两个数的和大于第三个数即可. 从最大的数开始loop，使用Two pointers，对于每一个符合的left and right， 所有大于left的数都是符合的，所以每当我们找到一组合法的left and right，count += （right - left）. 详情查看leetcode 611</li><li>对于求2个变量如何组合的问题，可以循环其中一个变量，然后研究另外一个变量如何变化</li><li>对于求3个变量如何组合的问题，可以循环其中一个变量，然后研究另外2个变量如何变化</li><li>对于求4个变量如何组合的问题，可以循环其中两个变量，然后研究另外2个变量如何变化</li><li>Two Sum less than k</li><li>Two Sum greater than k -&gt; same as triangle count</li><li>Two Sum closest to target -&gt; two pointers start from begin and end, keep updating diff</li><li>3 Sum closest to target -&gt; similar to above, loop one value and use two sum as a template</li><li>4 Sum</li><li>Two Sum - difference equals to target -&gt; 同向双指针。两数之差等于target，先排序，两个pointers都在开始，如果他们的差大于target，小数往后移，如果他们的差小于target，大数往后移 O(n) time complexity</li><li>Partition array</li><li>move elements &lt; k to the left and elements &gt;= k to the right, this is a smaller step in quick sort</li><li>Parition array while loop condition: while (left &lt; right). No equal sign</li><li>Letters by case</li><li>Partition array by parity</li><li>Interleaving positive and negative numbers -&gt; first count positive and negative numbers, then decide starts from positive or negative, then use two pointers in the same direction.</li></ul><h3 id="sort-colors"><a class="markdownIt-Anchor" href="#sort-colors"></a> Sort Colors</h3><ol><li><p>sort 3 colors in group, we can use partition array two times, first time split one color, next split the rest two colors.</p></li><li><p>We could also count the number of each color and modify the array to match the occurance of colors</p></li><li><p>three pointers</p></li><li><p>i pointer only moves when find ones and zeros, if it finds two, it will swap it with right. Throw two to the right</p></li><li><p>so left pointer will never find two.</p></li><li><p>so when i pointer finds zero, after swap it with left pointer, throw zero to the left, left pointer will only throw one back, so they can both move to right by 1</p></li></ol><ul><li>Sort Colors 2 (rainbow sort) -&gt; 使用多次Partition， 每次将一般的颜色分到array的左右，比如只有四种颜色，一次partition将1，2分到左边，3，4分到右边。花费O（n）的时间将T(k)的问题变成T(k/2)的问题。总共的时间复杂度为O(nlogk)</li><li>这个解法有点像Quick Sort。注意Quick sort and Rainbow sort的while loop条件均为 while(left &lt; right)。可以不用要等号</li><li>其他比较高频的排序方法：</li><li>Pancake Sort</li><li>Sleep Sort</li><li>Spaghetti Sort</li><li>Bogo Sort</li></ul><h2 id="3-step-reverse"><a class="markdownIt-Anchor" href="#3-step-reverse"></a> 3 Step Reverse</h2><ul><li>Three step reverse</li><li>Recover rotated sorted array -&gt; First use 3 step reverse then two pointer reverse.</li><li>3 step reverse</li><li>First find the rotate point</li><li>Reverse the first part(before rotate point) of the String/array</li><li>Reverse the second part(after rotate point) of the String/array</li><li>Reverse the entire String/array</li></ul><h2 id="quick-select"><a class="markdownIt-Anchor" href="#quick-select"></a> Quick Select</h2><ul><li>Quick Select 快速选择算法</li><li>思想类似于快速排序,利用O(n)的时间找到前right个大数，再看k与right的关系决定下一步recursion的范围</li><li>O(n) + O(n/2) + O(n/4) +… = O(n) time</li><li>kth largest element</li><li>Median</li><li>kth smallest element</li><li>Median of two sorted arrays</li></ul><h2 id="hash-heap"><a class="markdownIt-Anchor" href="#hash-heap"></a> Hash &amp; Heap</h2><ul><li>了解他们的原理和应用</li><li>TreeMap</li><li>队列Queue</li><li>支持操作O(1) push O(1) pop O(1) top,多做跟BFS有关的题目</li><li>栈Stack</li><li>支持操作O(1) push O(1) pop O(1) top,非递归实现DFS的主要数据结构</li><li>哈希表Hash</li><li>支持操作O(1) insert O(1) find O(1) delete, Hash table / Hash map / Hash set的区别是什么</li><li>Hash Set只存key不存value</li><li>Hash map存key和value</li><li>Hash table，多线程安全，当多个线程同时访问一个Hash table时，它可以保证数据安全，Hash Map无法做到</li><li>Hash function -&gt; 对于任意的Key，得到一个固定且无规律的介于0到capacity - 1的整数</li><li>数据结构分为连续性和离散型，array为连续性，List为离散型</li><li>一些著名的Hash算法：MD5， SHA-1， SHA-2，主要用于加密</li><li>用于算法中的Hash function很想进制转换</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">int hashfun(String key) &#123;</span><br><span class="line">    int sum &#x3D; 0;</span><br><span class="line">    for (int i &#x3D; 0; i &lt; key.length(); ++i) &#123;</span><br><span class="line">        sum &#x3D; sum * 31 + (int)(key.charAt(i));</span><br><span class="line">        sum &#x3D; sum % HASH_TABLE_SIZE;</span><br><span class="line">    &#125;</span><br><span class="line">    return sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Magic number - 31</li><li>通过经验得出31的冲突更少（Collision）</li><li>Magic number取质数更好，如果数太大影响效率，数太小冲突太多</li><li>Closed Hashing - line sweep</li><li>当哈希表发生冲突时，把新的数据插入到下一个空的位置</li><li>寻找，不断的找下一个位置直到找到value或者找到空位为止</li><li>删除，把值删除后用一个deleted标记出来，这个位置并不为空</li><li>缺点，当我们插入和删除的次数很多时，很多位置都会被标记为deleted，寻找的效率会变低</li><li>Open Hashing</li><li>每一个位置都是一个链表，当发生冲突时加到链表的开头，这样不用每次都遍历到链表末尾，寻找时搜寻整个链表</li><li>Rehashing</li><li>当hash table size不够用了怎么办？</li><li>像ArrayList那样不断倍增</li><li>怎么定义满？当实际的存储个数达到总共空间的1/10(经验值)时，我们就需要rehash</li><li>回顾ArrayList的倍增：当ArrayList满时，把size扩大两倍，把前面的所有数复制到后一半新扩大的ArrayList中</li><li>Hash Table的倍增：如果移动之前的数，会影响到hash function，所以我们会先扩大hash table， 再把hash table中的所有值重新放到hash function算出它在新的hash table中的位置，重新插入</li><li>Rehashing很慢，所以在定义hash table的时候最好提前定义一个size，让他尽量不要rehash</li><li>在存储快的和存储慢的介质之间都会存在Cache的问题，不仅在CPU和内存之间有</li><li>使用链表储存数据的的插入顺序，使用哈希表判断将要插入的数据是否已经存在于链表中</li><li>LinkedHashMap = DoublyLinkedList + HashMap</li><li>LRU Cache -&gt; 使用HashMap + DoublyLinkedList可以解决</li><li>Heap</li><li>支持操作O(logn) add O(logn) remove O(1) MIN or MAX,求最大值或最小值只可取其一</li><li>ugly number 2</li><li>top k largest number 2 -&gt; 使用PriorityQueue只保存k个数</li><li>merge k sorted list -&gt; Add all list heads to a heap, poll the smallest head, add to ans, then add next node to heap.</li><li>注意要会写heap的comparator</li><li>Practice</li></ul><ol><li>high five</li><li>k closest points</li><li>data stream median</li><li>kth smallest number in sorted matrix</li></ol><h2 id="dynamic-programming"><a class="markdownIt-Anchor" href="#dynamic-programming"></a> Dynamic Programming</h2><ul><li>动态规划的分类</li><li>Triangle -&gt; 入门题</li><li>注意以下代码中n为三角形的高度</li><li>第一种方法 DFS Traverse, Top-down</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">void traverse(int x, int y, int sum) &#123;</span><br><span class="line">    if (x &#x3D;&#x3D; n) &#123;</span><br><span class="line">    &#x2F;&#x2F; found a whole path from top to bottom</span><br><span class="line">    if (sum &lt; best) &#123;</span><br><span class="line">        best &#x3D; sum;</span><br><span class="line">    &#125;</span><br><span class="line">    return;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    traverse(x + 1, y, sum + A[x][y]);</span><br><span class="line">    traverse(x + 1, y + 1, sum + A[x][y]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">best &#x3D; MAXINT;</span><br><span class="line">traverse(0, 0, 0);</span><br></pre></td></tr></table></figure><ul><li>每一个节点都分出来两条路径，相当于一个binary tree， 它的节点个数是2^n, 所以这个方法的时间复杂度是O(2^n)</li><li>第二种方法 DFS Divide and Conquer, bottom-up</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; return minimum path from (x, y) to bottom</span><br><span class="line">int divideConquer(int x, int y) &#123;</span><br><span class="line">    if (x &#x3D;&#x3D; n) &#123;</span><br><span class="line">    return 0;</span><br><span class="line">    &#125;</span><br><span class="line">    return A[x][y] + Math.min(</span><br><span class="line">    divideConquer(x + 1, y),</span><br><span class="line">    divideConquer(x + 1, y + 1)</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">divideConquer(0, 0);</span><br></pre></td></tr></table></figure><ul><li>与之前一样，每一个节点都分出来两条路径，相当于一个binary tree， 它的节点个数是2^n, 所以这个方法的时间复杂度是O(2^n)</li><li>DFS实际上是在枚举，把所有的方案都列出来然后看哪个更好</li><li>我们做了很多重复计算，因为实际上我们只需要计算三角形所有节点（n<sup>2个）的最短路径，DFS却计算了（2</sup>n个）节点，很多节点我们计算了很多遍。所以我们需要把每个节点的结果保存下来，下次需要的时候就不需要重新算了</li><li>第三种方法 DFS Divide and conquer + Memorization</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; return minimum path from (x, y) to bottom</span><br><span class="line">int divideConquer(int x, int y) &#123;</span><br><span class="line">    &#x2F;&#x2F; row index from 0 to n - 1</span><br><span class="line">    if (x &#x3D;&#x3D; n) return 0;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; if we already got the minimum path from (x, y) to bottom, just return it</span><br><span class="line">    if (hash[x][y] !&#x3D; Integer.MAX_VALUE) return hash[x][y]</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; set before return</span><br><span class="line">    hash[x][y] &#x3D; A[x][y] + Math.min(divideConquer(x + 1, y), divideConquer(x + 1, y + 1));</span><br><span class="line"></span><br><span class="line">    return hash[x][y]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">initialize: hash[*][*] &#x3D; Integer.MAX_VALUE;</span><br><span class="line">answer: divideConquer(0, 0);</span><br></pre></td></tr></table></figure><ul><li>在每次计算节点最小值之前，先看看之前有没有算过这个节点的结果，如果有直接从数组中拿到结果并返回，没有算过我们再递归, O(n^2) time</li><li>记忆化搜索的本质：动态规划，省去了重复计算</li><li>多重循环 vs 记忆化搜索</li><li>第四种方法 多重循环，自底向上</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">int[][] dp &#x3D; new int[row][row]; &#x2F;&#x2F; dp[i][j] 表示从i， j出发走到最后一层的最小路径长度</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 初始化，终点先有值,最后一层</span><br><span class="line">for (int i &#x3D; 0; i &lt; n; ++i) &#123;</span><br><span class="line">    dp[n - 1][i] &#x3D; triangle[n - 1][i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 循环递推求解</span><br><span class="line">for (int i &#x3D; n - 2; i &gt;&#x3D; 0; --i) &#123;</span><br><span class="line">    for (int j &#x3D; 0; j &lt;&#x3D; i; ++j) &#123;</span><br><span class="line">    dp[i][j] &#x3D; Math.min(dp[i + 1][j], dp[i + 1][j +1]) + A[i][j]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 求结果： 起点</span><br><span class="line">return dp[0][0];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>O(n^2) time,没有递归</li><li>第五种方法 多重循环，自顶向下</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">int[][] dp &#x3D; new int[row][row];</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 初始化，起点</span><br><span class="line">dp[0][0] &#x3D; triangle[0][0];</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 初始化三角形的左边和右边</span><br><span class="line">for (int i &#x3D; 1; i &lt; row; ++i) &#123;</span><br><span class="line">    dp[i][0] &#x3D; dp[i - 1][0] + triangle[i][0]; &#x2F;&#x2F; 左边</span><br><span class="line">    dp[i][i] &#x3D; dp[i - 1][i - 1] + triangle[i][i]; &#x2F;&#x2F; 右边</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; top down</span><br><span class="line">for (int i &#x3D; 1; i &lt; row; ++i) &#123;</span><br><span class="line">    for (int j &#x3D; 1; j &lt; i; ++j) &#123;</span><br><span class="line">    dp[i][j] &#x3D; Math.min(dp[i - 1][j], dp[i - 1][j - 1]) + triangle[i][j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Math.min(dp[row - 1][0], dp[row - 1][1], dp[row - 1][2]...);</span><br></pre></td></tr></table></figure><ul><li>这个方法中dp[x][y]表示从上到下到这个点的最短路径</li><li>O(n^2) time,没有递归,但是这个方法我们必须提前算出三角形的左边和右边，因为对于三角形的每一个结点dp[x][y]，我们在计算到他的最短路径的时候，我们需要用到它前一层的两个点dp[x-1][y]和dp[x-1][y-1].但是对于每一层的最左边和最右边的点，我们再上一层找不到再靠左边或者右边的点，所以为了避免越界，我们必须提前算出两条边的所有点。</li><li>什么情况下使用动态规划？</li><li>满足下满三个条件之一：</li></ul><ol><li>求最大值最小值</li><li>判断是否可行</li><li>统计方案个数</li></ol><ul><li>上面这三个情况极有可能需要使用动态规划</li><li>什么情况下不使用动态规划？</li></ul><ol><li>求出所有具体的方案，而不是方案的个数 -&gt; palindrome-paritioning</li><li>输入数据是一个集合而不是序列,意思是如果我们可以将数据调换位置，则很有可能不使用动态规划，动态规划需要有方向性 -&gt; longest-consecutive-sequence</li><li>暴力算法的复杂度已经是多项式级别。 动态规划擅长优化指数级别的复杂度（2^n, n!）到多项式级别的复杂度(n^2, n^3)</li></ol><h3 id="动态规划四要素"><a class="markdownIt-Anchor" href="#动态规划四要素"></a> 动态规划四要素</h3><ol><li>状态，储存小规模问题的结果</li><li>方程，状态之间怎么联系</li><li>初始化，最极限的小状态是什么，起点</li><li>答案，最终的状态是什么，终点</li></ol><h3 id="动态规划的类型按照状态分类"><a class="markdownIt-Anchor" href="#动态规划的类型按照状态分类"></a> 动态规划的类型，按照状态分类</h3><ol><li>坐标型 triangle 10%</li><li>接龙型 20%</li><li>划分型</li><li>匹配型</li><li>背包型</li><li>区间型 longest palindrome</li><li>树图型 tree matrix</li><li>博弈型 判断是否可行</li></ol><ul><li>坐标型动态规划</li><li>状态</li><li>f[x]:表示我从起点走到坐标x。。。</li><li>f[x][y]:表示我从起点走到坐标x, y…</li><li>方程：研究走到x， y这个点之前的一步</li><li>practice: minimum path sum</li><li>动态规划不应该存在循环依赖，从一个状态不会回到之前的一个状态</li><li>当我们初始化一个二维数组的动态规划时，需要初始化第0行和第0列</li><li>Unique path</li><li>Unique path 2</li><li>Climbing Stairs</li><li>Jump game</li><li>Jump game 2</li><li>接龙型动态规划</li><li>告诉你一个规则然后求最长的状态可以是多少，比如数组中求最大递增子序列</li><li>Longest increasing subsequence</li><li>Russian Doll Envelopes</li><li>Largest Divisible Subset</li><li>Frog jump</li><li>总结</li><li>动态规划的实质是记忆化搜索，避免重复计算中间结果</li><li>动态规划四要素：初始化，方程，起点，终点</li><li>什么时候使用动态规划:最优，可行，方案数（而非具体方案）</li><li>什么时候不使用：求具体方案，输入数据为集合而非序列（可调整顺序），暴力算法时间复杂度已经是O(n^2, n^3)</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Data Structures </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Single Sign On Introduction</title>
      <link href="2019/10/24/Single-Sign-On-Introduction/"/>
      <url>2019/10/24/Single-Sign-On-Introduction/</url>
      
        <content type="html"><![CDATA[<h2 id="what-is-single-sign-on"><a class="markdownIt-Anchor" href="#what-is-single-sign-on"></a> What is Single Sign On?</h2><ul><li>Single-sign-on是一个很方便的东西，现在无论什么网站都需要登陆，而记住每个网站不同的用户名和密码又非常困难，那么作为一个好的产品，从用户的角度出发，就应该想到，如果我们只需要让用户登陆一次，就可以去到同一个平台下任何其他的产品，而不需要重复登陆，那该多好。</li><li>比如说Google Chrome，当你在浏览器中登陆了，那么你再去到Youtube或者Gmail等其他Google公司的产品，你将不再需要再次登陆。这是因为Google在你登陆的时候保存了</li><li>那么，这是怎么做到的呢，在single sign on with SAML的世界中，有两个非常重要的概念，一个是IDP，identity provider，另一个是SP，service provider。我们还是拿Google来举例子，当你需要登陆Youtube时，Youtube会将你跳转到一个Google登陆界面，登陆后他会保存你的登陆信息，然后再将你跳转回Youtube，你就发现你已经登陆上了，这时你需要查看Gmail，Gmail也会将你跳转到Google登陆界面，但是界面发现因为你已经登陆了Youtube，所以你所有的登陆信息已经被保存了，不需要你再次输入，于是自动把你跳转到Gmail，你就以为你什么都没做就自动登陆了Gmail。(虽然Google可能不是用SAML来登陆的)</li></ul><p><img src="/../images/Single-Sign-On-Introduction/1.png" alt="" /></p><h2 id="什么是saml"><a class="markdownIt-Anchor" href="#什么是saml"></a> 什么是SAML?</h2><ul><li>SAML可以认为是IDP和SP之间转递用户信息的一种格式规范，为了方便接收方能够理解传递过去的信息，必须规定一种规范使接收方很容易解码信息。</li></ul><h2 id="broker"><a class="markdownIt-Anchor" href="#broker"></a> Broker</h2><ul><li>现在我们要做的是一个中间人的角色，用户所有的请求都会先到我们这里，我们会检查request header，如果我们发现这是一个GET request，我们就会直接把用户跳转到SSO的登陆界面。</li><li>如果我们发现这是一个POST request，并且成功解码了一起发过来的SAML，我们就要重新加密用户信息，并把用户跳转到相应的网页，由最终的Service provider来再次解码用户信息</li><li>如果SAML解码失败，我们也会将用户跳转到SSO登陆界面。让用户再次登陆</li><li>加密信息的方法有很多，我用的是windows自带的RijndaelManaged Class</li></ul><h3 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference</h3><ol><li><a href="https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.rijndaelmanaged?view=netframework-4.8">Microsoft RijndaelManaged Class</a></li><li><a href="https://developers.onelogin.com/saml">SAML</a></li><li><a href="https://dzone.com/articles/sso-login-key-benefits-and-implementation">How SSO works</a></li></ol><h2 id="one-potential-security-issue"><a class="markdownIt-Anchor" href="#one-potential-security-issue"></a> One Potential Security Issue</h2><ul><li>如果我们仔细想想这个流程，就会发现这中间存在一个安全隐患，如果用户在IDP输入完用户信息并验证通过后，IDP会把SAML response发回给SP，这时如果这个SAML被拦截并被篡改，SP并不知道这个SAML有没有被改动，还是会按照SAML上面的信息将用户登陆。</li><li>要解决这个问题，我们就需要检查SAML Response，这个检查分为两步，Signing check和Certificate check</li></ul><h3 id="signing-check"><a class="markdownIt-Anchor" href="#signing-check"></a> Signing Check</h3><ul><li>其实就是一种checksum，我们把整个SAML response转换成一种加密的text。这个text随着SAML一起返回给SP，当我们解密这个text后得到的SAML和返回的SAML对不上，我们就知道这个SAML已经被篡改过了。举个例子：我们收到了一个来自Sam的SAML response，当我们检查了signing之后，我们就能确定这个response自从从Sam手上发出后就没有被篡改过。但是另一个问题是，如果我们得信息被Tony拦截，Tony完全替换了整个SAML并发给我们，我们虽然知道SAML自从从Tony手中发出后没有被篡改，但是我们还是没有拿到正确的SAML。</li></ul><h3 id="certificate-check"><a class="markdownIt-Anchor" href="#certificate-check"></a> Certificate check</h3><ul><li>这就需要Certificate check了，他其实就是提前保存在用户电脑中的受信任的证书，当我们发现SAML来自Tony而不是Sam，Tony并没有在受信名单中，那我们还是会拒绝这个SAML。只有当response来自我们所信任的人，并且这个response自从从他手上发出后就没有更改，我们才选择接受。</li></ul><h3 id="reference-2"><a class="markdownIt-Anchor" href="#reference-2"></a> Reference</h3><ol><li><a href="https://stackoverflow.com/questions/1703301/saml-why-is-the-certificate-within-the-signature">SAML: Why is the certificate within the Signature?</a></li><li><a href="https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.xml.signedxml.checksignature?view=dotnet-plat-ext-3.1#System_Security_Cryptography_Xml_SignedXml_CheckSignature_System_Security_Cryptography_X509Certificates_X509Certificate2_System_Boolean_">CheckSignature(X509Certificate2, Boolean)</a></li><li><a href="https://stackoverflow.com/questions/2185569/how-to-validate-a-saml-signature-value">How to validate a SAML signature value</a></li><li><a href="https://docs.microsoft.com/en-us/dotnet/standard/security/how-to-verify-the-digital-signatures-of-xml-documents">How to: Verify the Digital Signatures of XML Documents</a></li><li><a href="https://stackoverflow.com/questions/47662340/asp-net-core-saml-response-signature-validation">Asp.Net Core SAML Response Signature Validation</a></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> SSO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Learn Android Apprentice in 10 days</title>
      <link href="2019/09/02/Learn-Android-Apprentice-in-10-days/"/>
      <url>2019/09/02/Learn-Android-Apprentice-in-10-days/</url>
      
        <content type="html"><![CDATA[<h2 id="开始学习使用android-studio"><a class="markdownIt-Anchor" href="#开始学习使用android-studio"></a> 开始学习使用Android Studio</h2><ul><li><p>在iOS的学习告一段落了之后，现在开始学习Android应用的开发</p></li><li><p>他总共包括六个部分，前四个部分每一部分教你编写一个app，难度从低到高。后面两部分会告诉你怎么向下兼容和发布。跟之前的iOS教程很像。</p></li></ul><ol><li><a href="#TimeFighter">TimeFighter</a></li><li><a href="#Checklist">Checklist</a></li><li><a href="#Conclusion">Conclusion</a></li></ol><h2 id="timefighter"><a class="markdownIt-Anchor" href="#timefighter"></a> TimeFighter</h2><ul><li>这个app会从怎么set up Android Studio开始，我们直接跳过，到最开始写代码的部分</li></ul><h3 id="constraint-layouts"><a class="markdownIt-Anchor" href="#constraint-layouts"></a> Constraint Layouts</h3><ul><li>和iOS App很像，手机app必须考虑到对象在手机屏幕上的位置问题，Android有提供很多种layoutdexuanze，其中Constraint是最常用的一种，他可以规定目标到屏幕的相对位置</li></ul><p><img src="/../images/Learn-Android-Apprentice-in-10-days/1.png" alt="Constraint Layouts" /></p><p><img src="/../images/Learn-Android-Apprentice-in-10-days/2.png" alt="Constraint Layouts" /></p><h3 id="activities"><a class="markdownIt-Anchor" href="#activities"></a> Activities</h3><ul><li>在确定了诸如Textview，Button等对象的位置之后，我们需要在代码层面对其进行操作，我们可以在Aciticity中创建这些变量对象，然后通过在Layout中设置的ID找到他们，Activity其实就是iOS中的ViewController。</li></ul><p><img src="/../images/Learn-Android-Apprentice-in-10-days/3.png" alt="Activities TextView and Button" /></p><p><img src="/../images/Learn-Android-Apprentice-in-10-days/4.png" alt="Activities find by id" /></p><h3 id="strings"><a class="markdownIt-Anchor" href="#strings"></a> Strings</h3><ul><li>我们会将一个app中用到的所有文字集中在一个文件中，这个文件叫做Strings.xml，这样以后本地化加其他语言或者更改一个单词，这个单词虽然在app中可能出现了很多次，但是我们只需要在Strings里面改一次就可以了</li></ul><p><img src="/../images/Learn-Android-Apprentice-in-10-days/5.png" alt="Strings" /></p><h3 id="oriendtation-changes"><a class="markdownIt-Anchor" href="#oriendtation-changes"></a> Oriendtation changes</h3><ul><li><p>在手机屏幕方向改变时，系统会做三件事，1.save properties, 2. destroys current activity, 3. recreates the activity for the new orientation by calling onCreate and resets any properties specified by the developer</p></li><li><p>所以在改变方向时，我们需要及时保存需要用到的变量，在接下来现实的Activity中显示，保证过程不会丢失。</p></li></ul><h3 id="val-and-var"><a class="markdownIt-Anchor" href="#val-and-var"></a> val and var</h3><ul><li>Basically, val and var both are used to declare a variable. var is like a general variable and can be assigned multiple times and is known as the mutable variable in Kotlin. Whereas val is a constant variable and can not be assigned multiple times and can be Initialized only single time and is known as the immutable variable in Kotlin.</li></ul><p><img src="/../images/Learn-Android-Apprentice-in-10-days/6.png" alt="Save properties" /></p><p><img src="/../images/Learn-Android-Apprentice-in-10-days/7.png" alt="pass properties to next screen" /></p><h3 id="app-colors-and-styles"><a class="markdownIt-Anchor" href="#app-colors-and-styles"></a> App colors and styles</h3><ul><li>Android project中有许多文件夹，其中res包含着app需要用到的所有资源resources，常用的Strings，Animations，Menus，Colors and Styles都在这里, 通过直接更改Colors里面颜色的hex值来改变app中元素的颜色，更方便的管理同一种类型的东西</li></ul><p><img src="/../images/Learn-Android-Apprentice-in-10-days/8.png" alt="Colors and styles" /></p><h3 id="animations"><a class="markdownIt-Anchor" href="#animations"></a> Animations</h3><ul><li>Animations也在res文件夹里，她负责调用以及调配动画，图片里的动画效果是使用内置的bounce_interpolator，在2秒钟内把目标元素增大2倍，以50%处为中心，并缩小至原来的大小。</li></ul><p><img src="/../images/Learn-Android-Apprentice-in-10-days/9.png" alt="Animations" /></p><h3 id="menu"><a class="markdownIt-Anchor" href="#menu"></a> Menu</h3><ul><li>Menu同样他也在res文件夹中，他管理所有跟系统菜单相关的元素，比如我们想在屏幕上方的菜单栏中加入一个button，就需要在这里定义</li></ul><p><img src="/../images/Learn-Android-Apprentice-in-10-days/10.png" alt="Menu" /></p><ul><li>我们加了一个Menu，当点击时会冒出一个AlertDialog</li></ul><p><img src="/../images/Learn-Android-Apprentice-in-10-days/11.png" alt="AlertDialog" /></p><p><img src="/../images/Learn-Android-Apprentice-in-10-days/12.png" alt="AlertDialog in app" /></p><ul><li>这就是第一个app所讲的全部内容了，基本就是把project中需要用到的功能讲了一遍，没有用到任何复杂的语法，更多的讲的是Android Studio这个IDE的使用。接下来进行第二个app</li></ul><h2 id="checklist"><a class="markdownIt-Anchor" href="#checklist"></a> Checklist</h2><p><img src="/../images/Learn-Android-Apprentice-in-10-days/13.png" alt="ListMaker" /></p><h3 id="recyclerview"><a class="markdownIt-Anchor" href="#recyclerview"></a> RecyclerView</h3><ul><li><ol><li>The RecyclerView asks the Adapter for an item, or a ViewHolder at a given position. 2. The Adapter reaches into a pool of ViewHolders that have been created. 3. Either a a new ViewHolder is returned, or a new one is created. 4. The Adapter then binds this ViewHolder to a data item at the given position. 5. The ViewHolder is returned back to the RecyclerView for display</li></ol></li></ul><p><img src="/../images/Learn-Android-Apprentice-in-10-days/15.png" alt="RecyclerView" /></p><ul><li><p>In general, Adapters give your RecyclerView the data it wants to show. They have a clever way to calculate how many rows of data you want to show, which you’ll cover shortly. ViewHolders are the visual containers for your item. Think of them as cells in the table. This is where you tell your RecyclerView what each item should look like. These are basically little tiny layout items used to display the data at any given position in the list of data. As you scroll through a RecyclerView, instead of creating new ViewHolders, RecyclerView will recycle ViewHolders that have moved offscreen and populate them with new data, ready to be shown at the bottom of the list. This process repeats endlessly as you scroll through your RecyclerView. This recycling of ViewHolder to display list items helps to avoid janking in your app.</p></li><li><p>RecycleView 的本质是循环使用table中的cell，当一个cell网上滑出屏幕时，我们可以让他重新出现在底部，但是显示不同的数据，这就要求我们在写代码时要把table，cell和数据分开来，每个部分各司其职</p></li></ul><p><img src="/../images/Learn-Android-Apprentice-in-10-days/16.png" alt="cell" /></p><ul><li>这个是cell部分，它由两个textview组成。对应上图中的viewHolder</li></ul><p><img src="/../images/Learn-Android-Apprentice-in-10-days/14.png" alt="table" /></p><ul><li>这个是table部分，它包含多个cell，并可以循环利用cell。对应上图中的adapter。我们需要在adapter中implement recycleview必须的成分例如包含多少个viewholder，每个viewholder的数据应该从哪里取。。</li></ul><p><img src="/../images/Learn-Android-Apprentice-in-10-days/17.png" alt="data input" /></p><ul><li><p>除了recycleview本身，我们应该把data source设置成动态的，也就是说我们可以输入自己的数据，并加进recycleview中。</p></li><li><p>下面我们在代码层面解释一下如何构建一个recycleView</p></li></ul><p><img src="/../images/Learn-Android-Apprentice-in-10-days/22.png" alt="recycleView functions" /></p><ul><li>首先我们需要继承RecyclerView Adapter并implement这三个function，RecyclerView还有很多其他function可以override但是这三个是必须的</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">override fun getItemCount(): Int &#123;</span><br><span class="line">    return accounts.size</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>getItemCount return一个Int，它表示这个表格中有几行，一般是return数据的size</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">override fun onCreateViewHolder(</span><br><span class="line">    parent: ViewGroup,</span><br><span class="line">    viewType: Int</span><br><span class="line">): CustomViewHolder &#123;</span><br><span class="line">    val view &#x3D; LayoutInflater.from(parent.context).inflate(R.layout.view_holder_custom, parent, false)</span><br><span class="line"></span><br><span class="line">    return CustomViewHolder(view)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>onCreateViewHolder定义一个table cell的layout，我们返回一个layout文件，所以对于每个不同的recyclerView，我们还需要新建一个Layout file用于储存cell的layout</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">override fun onBindViewHolder(holder: CustomViewHolder, position: Int) &#123;</span><br><span class="line">    holder.label.text &#x3D; &quot;Some text&quot;</span><br><span class="line">    holder.itemView.setOnClickListener &#123;</span><br><span class="line">        clickListener.listItemClicked(position)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>onBindViewHolder会把我们的数据放到我们新建的cell layout中，另外注意到我加了一个ClickListener，所以之后我们点击每行的时候就会运行listItemClicked function，然后在那里就可以添加另外的代码，可以跳到另一个View等。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">class CustomViewHolder(itemView: View): RecyclerView.ViewHolder(itemView) &#123;</span><br><span class="line">    val sampleData &#x3D; itemView.findViewById(R.id.sampleData) as TextView</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>我们还需要一个class去连接table cell layout file</p></li><li><p>这样基本上一个RecyclerView就完成了，之后我们只需要将数据从Activity或者Fragment传入RecyclerView Adapter就可以了</p></li></ul><p><img src="/../images/Learn-Android-Apprentice-in-10-days/18.png" alt="data input 2" /></p><h3 id="sharedpreferences"><a class="markdownIt-Anchor" href="#sharedpreferences"></a> SharedPreferences</h3><ul><li><p>SharedPreferences lets you save small collections of key-value pairs that you can retrieve later. If you need a way to quickly save small bits of data in your app, SharedPreferences is one of the first solutions you should consider</p></li><li><p>这就需要用到sharedpreference，它类似于一个dictionary，里面由key-value pairs组成。可以储存size较小的数据。类似于表格信息</p></li></ul><p><img src="/../images/Learn-Android-Apprentice-in-10-days/19.png" alt="SharedPreferences" /></p><h3 id="edittext"><a class="markdownIt-Anchor" href="#edittext"></a> EditText</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">val listTitleEditText &#x3D; EditText(this) </span><br><span class="line">listTitleEditText.inputType &#x3D; InputType.TYPE_CLASS_TEXT</span><br></pre></td></tr></table></figure><ul><li>创建一个input text field，并给它指明一个InputType， 这样Android就会显示合适的keyboard</li></ul><h3 id="intent"><a class="markdownIt-Anchor" href="#intent"></a> Intent</h3><p><img src="/../images/Learn-Android-Apprentice-in-10-days/20.png" alt="Intent communication" /></p><ul><li>当我们需要让一个页面与另一个页面进行交流时，我们需要通过Intent将数据传送过去。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">private fun showListDetail(list: TaskList) &#123;</span><br><span class="line">    val listDetailIntent &#x3D; Intent(this, ListDetailActivity::class.java)</span><br><span class="line">    listDetailIntent.putExtra(INTENT_LIST_KEY, list)</span><br><span class="line">    startActivity(listDetailIntent)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; get from other Activity</span><br><span class="line">list &#x3D; intent.getParcelableExtra(MainActivity.INTENT_LIST_KEY)</span><br></pre></td></tr></table></figure><ul><li><p>在上面这个function中，this是我们现在所在的Activity，ListDetailActivity是我们将要过去的Activity，TaskList是我们要传送的数据。</p></li><li><p>我们需要规定一个Key，这样的新的页面中我们就知道用Key来获取相应的数据。</p></li><li><p>但是还有一个问题，就是自定义的object不能直接通过intent传送，我们需要把他变成Parcelable的object</p></li></ul><h3 id="parcelable"><a class="markdownIt-Anchor" href="#parcelable"></a> Parcelable</h3><p><img src="/../images/Learn-Android-Apprentice-in-10-days/21.png" alt="Implement Parcelable" /></p><ul><li>在定义object的class中，implement parcelable，Android Studio会自动把需要的function写好</li></ul><h3 id="fragment"><a class="markdownIt-Anchor" href="#fragment"></a> Fragment</h3><ul><li>Fragment是android语言中一个非常重要的部分，他必须附属于一个Activity，Fragment的本质是可以让相同的部分用同一个Fragment表示，并在多处使用，以节省代码长度，让App保持整洁一致。</li></ul><p><img src="/../images/Learn-Android-Apprentice-in-10-days/25.png" alt="Create Fragment" /></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">class ListSelectionFragment : Fragment() &#123;</span><br><span class="line">    &#x2F;&#x2F; 1</span><br><span class="line">    private var listener: OnListItemFragmentInteractionListener? &#x3D; null</span><br><span class="line">    interface OnListItemFragmentInteractionListener &#123;</span><br><span class="line">    fun onListItemClicked(list: TaskList)</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; 2</span><br><span class="line">    companion object &#123;</span><br><span class="line">    fun newInstance(): ListSelectionFragment &#123;</span><br><span class="line">    val fragment &#x3D; ListSelectionFragment()</span><br><span class="line">    return fragment</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#x2F;&#x2F; 3</span><br><span class="line">override fun onAttach(context: Context) &#123;</span><br><span class="line">    super.onAttach(context)</span><br><span class="line">    if (context is OnListItemFragmentInteractionListener) &#123;</span><br><span class="line">    listener &#x3D; context</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">    throw RuntimeException(context.toString() + &quot; must implement</span><br><span class="line">OnListItemFragmentInteractionListener&quot;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    &#x2F;&#x2F; 4</span><br><span class="line">    override fun onCreate(savedInstanceState: Bundle?) &#123;</span><br><span class="line">    super.onCreate(savedInstanceState)</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; 5</span><br><span class="line">    override fun onCreateView(inflater: LayoutInflater, container:</span><br><span class="line">ViewGroup?,</span><br><span class="line">    savedInstanceState: Bundle?): View? &#123;</span><br><span class="line">    return inflater.inflate(R.layout.fragment_list_selection, container,</span><br><span class="line">false)</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F; 6</span><br><span class="line">    override fun onDetach() &#123;</span><br><span class="line">    super.onDetach()</span><br><span class="line">    listener &#x3D; null</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/../images/Learn-Android-Apprentice-in-10-days/26.png" alt="Fragment lifecycle" /></p><ul><li>Fragment由几个重要部分组成，首先，当Fragment第一次被附属于某个Activity时onAttach会被执行。然后onCreate， 在这两个地方你可以initialize一些变量等</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">override fun onCreate(savedInstanceState: Bundle?) &#123;</span><br><span class="line">    super.onCreate(savedInstanceState)</span><br><span class="line"></span><br><span class="line">    transactions &#x3D; arguments?.getParcelableArrayList&lt;WestpacTransaction&gt;(&quot;Transactions&quot;)!!</span><br><span class="line">    refundedAmount &#x3D; arguments?.getDouble(&quot;RefundedAmount&quot;)!!</span><br><span class="line">    refundAmount &#x3D; arguments?.getDouble(&quot;RefundAmount&quot;)!!</span><br><span class="line">    updatedBalance &#x3D; arguments?.getDouble(&quot;UpdatedBalance&quot;)!!</span><br><span class="line">    primaryAccount &#x3D; paperCutAccountManager.readPrimaryAccount()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>之后onCreateView，这个地方会把数据等object显示在View中，所以需要在这里把变量和UI object绑定。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">override fun onCreateView(</span><br><span class="line">    inflater: LayoutInflater, container: ViewGroup?,</span><br><span class="line">    savedInstanceState: Bundle?</span><br><span class="line">): View? &#123;</span><br><span class="line">    val activity &#x3D; activity as AppCompatActivity?</span><br><span class="line">    if (activity !&#x3D; null) &#123;</span><br><span class="line">        activity.supportActionBar!!.show()</span><br><span class="line">        activity.supportActionBar?.setDisplayHomeAsUpEnabled(false)</span><br><span class="line">        activity.supportActionBar?.title &#x3D; &quot;Refund Complete&quot;</span><br><span class="line">        activity.nav_view.isVisible &#x3D; false</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; Inflate the layout for this fragment</span><br><span class="line">    val view &#x3D; inflater.inflate(R.layout.fragment_refund_complete, container, false)</span><br><span class="line">    view.AccountNameLabel.text &#x3D; primaryAccount.AccountName</span><br><span class="line">    view.AccountBalanceLabel.text &#x3D; &quot;$&quot; + &quot;%.2f&quot;.format(updatedBalance)</span><br><span class="line">    view.refundAmount.text &#x3D; &quot;$&quot; + &quot;%.2f&quot;.format(refundedAmount)</span><br><span class="line">    view.DoneButton.setOnClickListener &#123; v -&gt;</span><br><span class="line">        doneButtonPressed()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    view.refundCompleteTable.adapter &#x3D; RefundCompleteTableViewAdapter(transactions, this)</span><br><span class="line">    view.refundCompleteTable.layoutManager &#x3D; LinearLayoutManager(activity)</span><br><span class="line"></span><br><span class="line">    return view</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>之后是Companion object，当这个Fragment被创建时，如果你需要给它传值，它需要在这里被定义，有点像是Fragment的Constructor</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">companion object &#123;</span><br><span class="line">    val TAG &#x3D; RefundCompleteFragment::class.java.simpleName</span><br><span class="line">    @JvmStatic</span><br><span class="line">    fun newInstance(transactions: ArrayList&lt;WestpacTransaction&gt;, refundedAmount: Double, refundAmount: Double, updatedBalance: Double): RefundCompleteFragment &#123;</span><br><span class="line">        val fragment &#x3D; RefundCompleteFragment()</span><br><span class="line">        val args &#x3D; Bundle()</span><br><span class="line">        args.putParcelableArrayList(&quot;Transactions&quot;, transactions)</span><br><span class="line">        args.putDouble(&quot;RefundedAmount&quot;, refundedAmount)</span><br><span class="line">        args.putDouble(&quot;RefundAmount&quot;, refundAmount)</span><br><span class="line">        args.putDouble(&quot;UpdatedBalance&quot;, updatedBalance)</span><br><span class="line">        fragment.arguments &#x3D; args</span><br><span class="line">        return fragment</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Kotlin </tag>
            
            <tag> Android Studio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swift tips and tricks</title>
      <link href="2019/08/16/Swift-tips-and-tricks/"/>
      <url>2019/08/16/Swift-tips-and-tricks/</url>
      
        <content type="html"><![CDATA[<h2 id="passing-messages-around-view-controllers"><a class="markdownIt-Anchor" href="#passing-messages-around-view-controllers"></a> Passing messages around view controllers</h2><ul><li>三种在view controllers中传递参数的方法，Delegation pattern, Notifications, Closures and action handlers。可以在<a href="https://www.appcoda.com/data-passing-ios/">这篇帖子</a>中找到。</li></ul><h2 id="cs193p-open-course-notes"><a class="markdownIt-Anchor" href="#cs193p-open-course-notes"></a> CS193P open course notes</h2><ol><li><a href="#mvc">MVC</a></li><li><a href="#swift-programming-language">Swift Programming Language</a></li><li><a href="#more-swift">More Swift</a></li></ol><ul><li>Please find all relevant materials for Standford Programming course cs193p in <a href="https://github.com/hellcy/cs193p-Fall-2017">here</a></li></ul><p><img src="/../images/Swift-tips-and-tricks/1.png" alt="MVC communication" /></p><h2 id="mvc"><a class="markdownIt-Anchor" href="#mvc"></a> MVC</h2><ul><li>Controller can talk to both Model and View. But Model and View should never speak to each other. For the View, it can communicate to the Controller, but in certain ways. Because View are all generic UI objects, to change some of its properties to fits the app’s objective, we need to send the UI objects, like buttons and labels back to the controller, let controller to implement its properties like background color, label content etc… so we use Action method to target the function that will be calling when certain UI objects are triggered. Another way to talk to controller is to use Delegate, for more complicated objects like scroll view or tables, we need to let controller know what we are doing at the moment, and controller is responsible for implementing the extra tasks while we are doing this things. Another important thing is that views do not own the data they display, they ask for the controller and controller grab the data from Data source and give it to the View, because if you have 50000 songs in a table, if table owns the data, it will be too big and costy to create such table object. So instead we use Data Source to provide data to the view.</li></ul><p><img src="/../images/Swift-tips-and-tricks/2.png" alt="MVC communication" /></p><ul><li>What about Model, can Model talk to the Controller? Yes, but not directly, because Model is UI independent, and Controller is UI dependent, so if a Model is updated and he wants everybody that is interested to be informed, it will broadcast this information to all the controllers, and those controllers that are listening will be notified and talk to Model and grab the changes. This way is called notifications</li></ul><p><img src="/../images/Swift-tips-and-tricks/3.png" alt="MVC communication" /></p><ul><li>One MVC model usually controls one screen on iPhone, and when multiple MVCs are talking to each other, they often treats other MVC as its View. So when one Screen wants to talk to another Screen, it uses delegate!</li></ul><p><img src="/../images/Swift-tips-and-tricks/4.png" alt="MVC communication" /></p><ul><li>Do not implement your app this way!</li></ul><h3 id="struct-and-class"><a class="markdownIt-Anchor" href="#struct-and-class"></a> struct and class</h3><ul><li><p>They are similar, contains methods and variables, but struct has no inheritance, Another difference is structs are value types, and classes are reference types, so when we assign it to another variable, it gets copied. Arrays, ints, strings, dictionary are all structs, but swift doesn’t make a copy of all of them when we need it, it only copy them when a user modifies it. It’s called copy-on-write semantics. For classes, we do not make a copy of it when we need it, we make a reference to the class, so when we modify the properties of that class, the real class gets modified too.</p></li><li><p>Try not to use initialiser in the view controller</p></li></ul><p><img src="/../images/Swift-tips-and-tricks/5.png" alt="stride" /></p><h3 id="stride"><a class="markdownIt-Anchor" href="#stride"></a> stride</h3><ul><li>In swift, we don’t have for(; 😉 structrue, so we need stride method for a range with specific count value</li></ul><p><img src="/../images/Swift-tips-and-tricks/6.png" alt="tuples" /></p><h2 id="swift-programming-language"><a class="markdownIt-Anchor" href="#swift-programming-language"></a> Swift Programming Language</h2><h3 id="tuples"><a class="markdownIt-Anchor" href="#tuples"></a> tuples</h3><ul><li>They are nothing but a group of values, different types of values could be inside the same tuple, vars and methods are not allowed in tuples, its good for return multiple values from a method because a method can only return a single thing.</li></ul><p><img src="/../images/Swift-tips-and-tricks/7.png" alt="Computed properties" /></p><ul><li><p>stored properties(normal properties) and computed properties</p></li><li><p>Computed properties are properties with get and set methods, you can have read only computed properties, which only has get method. get and set part will be executed when we get or set the variable.</p></li><li><p>we use computed property because sometimes we can derive property from other place, like indexOfOneAndOnlyFaceUpCard GET can be derived by looking at all the cards and see if you can get only one card facing up and return that index. And SET can give the card that is facing up to the property. You can omit the GET word if it is a read only computed property</p></li></ul><p><img src="/../images/Swift-tips-and-tricks/8.png" alt="Access control" /></p><h3 id="access-control"><a class="markdownIt-Anchor" href="#access-control"></a> Access control</h3><ul><li><p>Protecting our internal implementations, by only give other people names of the methods that are allowed to be called.</p></li><li><p>Internal: usable by any object in my app or framwork, its default</p></li><li><p>private: callable only within this object</p></li><li><p>private(set): means its only readable from outside the object, but not settable</p></li><li><p>filePrivate: accessiable by any object in this source file</p></li><li><p>public(for frameworks only): can be used by object outside this framework</p></li><li><p>open(for frameworks only): public AND can sub-class(override)</p></li><li><p>assertion: a method that in your program when you assert something is true, is not, the app will crash. It is a good way to protect your API.</p></li></ul><h3 id="extension"><a class="markdownIt-Anchor" href="#extension"></a> Extension</h3><ul><li><p>Add vars and methods to other classes even if you don’t have the source.</p></li><li><p>But there are restrictions: you can’t re-implement the methods that are already there. You can only add new ones. And, properties you add can have no stroage associated with them.(computed only)</p></li></ul><h3 id="enum"><a class="markdownIt-Anchor" href="#enum"></a> Enum</h3><ul><li>Another variety of data structrue apart from struct and class. It can only have discrete states. Enum is a VALUE type, like structs, so it gets copied as it is passed around. Enum in Swift can have an associated data.</li></ul><p><img src="/../images/Swift-tips-and-tricks/9.png" alt="Enum with associated value" /></p><ul><li>Enum with associated value</li></ul><p><img src="/../images/Swift-tips-and-tricks/10.png" alt="Enum" /></p><ul><li>Checking enum’s state with Switch cases syntax</li></ul><p><img src="/../images/Swift-tips-and-tricks/11.png" alt="Enum" /></p><ul><li>using associated value in switch cases</li></ul><p><img src="/../images/Swift-tips-and-tricks/12.png" alt="Enum" /></p><ul><li>Enum can have methods, and you can test a enum’s state within that method with self keyword</li></ul><p><img src="/../images/Swift-tips-and-tricks/13.png" alt="Enum" /></p><ul><li>You can even change the enum’s state in its methods, by giving that method a mutating keyword to let Swift know.</li></ul><h3 id="optionals"><a class="markdownIt-Anchor" href="#optionals"></a> Optionals</h3><ul><li>Optional is just an enum, it has two cases, one is nil, which measns it is not set yet, the other is some, which means it has some associated value with it. If you are trying to force unwrap an optional, what Swift really do it just throw an exception when that enum is in case nil, and do whatever you want to do with that enum in case ‘some’.</li></ul><p><img src="/../images/Swift-tips-and-tricks/14.png" alt="Optional" /><br /><img src="/../images/Swift-tips-and-tricks/15.png" alt="Optional" /><br /><img src="/../images/Swift-tips-and-tricks/16.png" alt="Optional" /><br /><img src="/../images/Swift-tips-and-tricks/17.png" alt="Optional" /></p><h3 id="memory-management"><a class="markdownIt-Anchor" href="#memory-management"></a> Memory Management</h3><p><img src="/../images/Swift-tips-and-tricks/18.png" alt="Class" /></p><ul><li><p>Automatic reference counting: Reference types are stored in the heap, everytime you create a pointer to a reference type in the heap, Swift will add One to a counter for that reference type, everytime when a pointer goes out of scope, Swift decrement the counter. And when the counter decrement to zero, Swift will instantly remove that reference type out of heap.</p></li><li><p>Influence ARC by using ‘strong’, ‘weak’ and ‘unowned’</p></li></ul><p><img src="/../images/Swift-tips-and-tricks/19.png" alt="structs" /></p><ul><li>structs</li></ul><h2 id="more-swift"><a class="markdownIt-Anchor" href="#more-swift"></a> More Swift</h2><p><img src="/../images/Swift-tips-and-tricks/20.png" alt="protocol" /></p><ul><li>Protocol is the fourth data structure in Swift. It is basically a type, which contains a list of variables and a list of methods, without implementation. Any class or structs or enum that want to inherit protocol must implement all methods declared in that protocol. But, for objective C methods, implementations are optional. This is why when we override some will, did, set methods for some UI obejcts, we dont need to implement all methods from that protocol.</li></ul><p><img src="/../images/Swift-tips-and-tricks/21.png" alt="protocol mutating" /></p><ul><li>Mutating functions: in protocol, some functions may be marked as mutating, when structs trying to inherit a protocol, because structs are value types, so structs get copied when we want to use it. However, it would be very inefficient if we make a copy every time we see it. So Swift uses copy-on-write system, we only make a copy of that struct when we are trying to modify it, in other words, mutating it. So we a struct is trying to change something in a function, and that function is inherted from a protocol, then this function has to be marked as mutating.</li></ul><p><img src="/../images/Swift-tips-and-tricks/22.png" alt="protocol init" /></p><p><img src="/../images/Swift-tips-and-tricks/23.png" alt="protocol init required" /></p><ul><li>Init: init functions are allowed to exist in protocol, however, in a class inherited that protocol, we need to add requried keyword before init function, this is because this class could have some other subclasses, and these classes also have to implement init function.</li></ul><p><img src="/../images/Swift-tips-and-tricks/24.png" alt="protocol type" /></p><ul><li>Use protocol as a type</li></ul><p><img src="/../images/Swift-tips-and-tricks/25.png" alt="protocol delegation" /></p><ul><li>Delegation: a very important use of protocol is delegation.</li></ul><p><img src="/../images/Swift-tips-and-tricks/27.png" alt="protocol multiple inheritance" /></p><ul><li>Mutiple inheritance: if you want to use certain functions in some protocols, you could inherit that protocol and implement the functions you want to use.</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Swift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AWS Overview</title>
      <link href="2019/08/05/AWS-Overview/"/>
      <url>2019/08/05/AWS-Overview/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是aws"><a class="markdownIt-Anchor" href="#什么是aws"></a> 什么是AWS？</h2><ul><li>AWS是Amazon的云服务，我现在用到的是其中的API Gateway和Lambda，API Gateway就是API网关，当网关收到request时，可以运行对应的Lambda function，生成response，然后返回。</li></ul><ol><li><a href="#lambda-function-and-api-gateway">Lambda function and API Gateway</a><ol><li>Introduction</li><li><a href="#create-aws-serverless-application">Create AWS Serverless Application</a></li><li><a href="#%E6%9B%B4%E6%94%B9API%E5%9F%9F%E5%90%8D-custom-domain-names">更改API域名 Custom Domain Names</a></li><li><a href="#change-lambda-function-outbound-ip-address-to-static">change lambda function outbound IP address to static</a></li></ol></li><li><a href="#use-iam-to-restrict-api">Use IAM to restrict API</a></li><li><a href="#use-s3-to-host-webpage">Use S3 to host webpage</a></li><li><a href="#aws-simple-email-services">AWS Simple Email Services</a></li></ol><h2 id="lambda-function-and-api-gateway"><a class="markdownIt-Anchor" href="#lambda-function-and-api-gateway"></a> Lambda function and API Gateway</h2><p><img src="/../images/AWS-Overview/1.png" alt="create API Gateway" /></p><p><img src="/../images/AWS-Overview/2.png" alt="API Gateway Overview" /></p><h3 id="api-gateway"><a class="markdownIt-Anchor" href="#api-gateway"></a> API Gateway</h3><ul><li>他总共分成6个部分，第一个部分是Test，也就是send test request的地方，sample request会先到达Method Request，在这里你可以往request里面加入Query string parameters, Http headers, Request body来让request符合Lambda的要求。</li></ul><p><img src="/../images/AWS-Overview/3.png" alt="Proxy integration" /></p><ul><li>再下一个部分是Integration Request，在这里可以选择对应的Lambda function，让request知道该去往哪个Lambda，并且可以勾选Use Lambda Proxy integration, 如果勾选，它代表着AWS会帮你把request中的信息(包括query parameter, header, body等)保存到一个类似Dictionary的结构中，在lambda里面可以直接通过key name调用，不用手动提取信息。在下一部分就是运行相应的Lambda function了，这个在接下来的Lambda部分中讲。当Lambda运行完之后会生成一个response，如果勾选了之前的Proxy integration，这个地方就是灰色的，不能查看，因为它会帮你把response里的信息自动填充到header，body。。。并且使用自带的response template model，所以你就不用操心这个了。不然的话你可以手动设置response的格式。最后一个部分是Method response，当设置好reponse格式之后，你可以把response status code，连同optional的header和body返回给用户。还可以设置body的格式，比如JSON。</li></ul><h3 id="lambda-function"><a class="markdownIt-Anchor" href="#lambda-function"></a> Lambda function</h3><ul><li>这里是你真正处理请求并返回数据的地方，AWS支持很多种语言的function。</li></ul><p><img src="/../images/AWS-Overview/5.png" alt="Lambda function" /></p><p><img src="/../images/AWS-Overview/12.png" alt="Lambda Runtime language" /></p><ul><li><p>我是用C#，这需要在Visual Studio中安装AWS package，在unget manager里面搜索AWS就可以找到AWS SDK了。安装之后就可以新建AWS solution并publish到AWS Lambda中。</p></li><li><p>这次我需要写的function就是调用Westpac API，所以其实是用户先调用AWS API，然后这个API再调用Westpac API。。。</p></li><li><p>如果request中含有parameter或者body信息，那么在function中的APIGatewayProxyRequest中就会含有这些参数信息，这就是之前勾选了proxy integration的好处</p></li></ul><p><img src="/../images/AWS-Overview/6.png" alt="code1" /></p><p><img src="/../images/AWS-Overview/7.png" alt="code2" /></p><ul><li>在上传时新建一个Lambda function，另外下面的Method name要对应刚刚C#中的method name，因为有时候我们会在一个solution中写多个method，连接多个Lambda function，所以要一一对应。</li></ul><p><img src="/../images/AWS-Overview/9.png" alt="upload Lambda function" /></p><h3 id="test-api-gateway-and-lambda-function"><a class="markdownIt-Anchor" href="#test-api-gateway-and-lambda-function"></a> Test API Gateway and Lambda function</h3><ul><li>之后就是用AWS测试刚刚写好的API了，注意测试之前要先deploy API Gateway，确保与Lambda function对应，这个可以在lambda function中的API Gateway endpoint里看到，如果能看到endpoint url，就说明对应成功了。</li></ul><p><img src="/../images/AWS-Overview/4.png" alt="API Gateway endpoint url" /></p><ul><li>测试的时候可以加query strings，就是request中的parameters，右边可以看到测试结果，因为这个是GET request，所以我们不能加Request Body。在POST request中是可以的。</li></ul><p><img src="/../images/AWS-Overview/8.png" alt="test API Gateway" /></p><ul><li>这个是另外一个POST request with JSON body</li></ul><p><img src="/../images/AWS-Overview/11.png" alt="POST request with JSON body" /></p><h3 id="create-aws-serverless-application"><a class="markdownIt-Anchor" href="#create-aws-serverless-application"></a> Create AWS Serverless Application</h3><p><img src="/../images/AWS-Overview/29.png" alt="AWS Serverless Application" /></p><ul><li>这更像是一个Lambda project，可以让API gateway一次连接多个Lambda functions，也可以在Visual Studio里调整API Gateway的一些设置</li></ul><p><img src="/../images/AWS-Overview/30.png" alt="API gatewat settings" /></p><ul><li>这是project包含的template文件，我们可以设置API的类型，Request的类型，路径，以及这个API对AWS的可操作权限等</li></ul><p><img src="/../images/AWS-Overview/31.png" alt="API Gateway sturcture" /></p><ul><li><p>发布后在API Gateway中就可以看到这个层级结构和template是完全一样的</p></li><li><p>之前讲到我们可以在API Gateway中测试API，其实在Visual Studio里，发布之前我们就可以debug他，就是debug所在的位置，只不过现在显示的是Mock test tool</p></li></ul><p><img src="/../images/AWS-Overview/32.png" alt="Mock test tool" /></p><ul><li><p>他长这个样子</p></li><li><p>其中有两个需要注意的地方，第一个是我们需要调用的function，因为这是一个lambda projects，包含多个lambda functions，所以调用哪一个必须提前声明</p></li></ul><p><img src="/../images/AWS-Overview/33.png" alt="execute lambda function" /></p><ul><li><p>还有一个就是input，因为我使用的proxy，所以在列表中选择proxy，会生成一个template，然后我们需要什么input就在相应的地方加就可以了</p></li><li><p>比如如果要在request body里加，就找到body所在的位置，query parameter和path parameter同理</p></li></ul><p><img src="/../images/AWS-Overview/34.png" alt="proxy template" /></p><ul><li>最后说一下如何发布，跟之前的lambda function一样，只不过我们需要创建一个S3 bucket来存放所有的历史版本。</li></ul><p><img src="/../images/AWS-Overview/35.png" alt="publish S3 bucket" /></p><ul><li>他会自动清理之前旧版的project，当状态显示的是update complete，我们就知道他已经可以使用了</li></ul><p><img src="/../images/AWS-Overview/36.png" alt="publish complete" /></p><h3 id="calling-trusted-frame-from-swift"><a class="markdownIt-Anchor" href="#calling-trusted-frame-from-swift"></a> Calling trusted frame from swift</h3><ul><li>另外一个任务是，因为我们不能经受任何信用卡信息，所以我们需要用到westpac trusted frame，通过调用这个Javascript library来让用户将信用卡信息直接发送到westpac的服务器，然后处理westpac的response就可以了。但是有一个问题是，我们希望用户能在我们的手机app上也可以调用westpac API，可以这个trusted frame是一个只支持web application的Javascript library，这就需要我们在Swift中加入WebKit，同时在用户在含有trusted frame的web page中submit form时，将返回的信息发送到Swift的某个Method中。简而言之，我们需要在javascript中调用Swift</li></ul><h3 id="更改api域名-custom-domain-names"><a class="markdownIt-Anchor" href="#更改api域名-custom-domain-names"></a> 更改API域名 Custom Domain Names</h3><ul><li>AWS API的标准名字是这样的格式</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;api-id.execute-api.region.amazonaws.com&#x2F;stage</span><br></pre></td></tr></table></figure><ul><li>这很复杂而且跟API的功能也没有任何联系</li><li>我们可以更改他的域名，让他的名字更有意义</li></ul><p><img src="/../images/AWS-Overview/37.png" alt="Costom domain name" /></p><ul><li><p>在新建域名时，我们可以给域名增加certificate，这需要通过在AWS ACM(certificate manager)中新增certificate来实现</p></li><li><p>我们还需要在internet中新建一个我们想要的域名，然后用route 53来把这个域名和API关联起来，上图中的Target domain name就是自定义域名需要关联的域名。在route 53中找到hosted zones，然后新增一行record，把target domain name填入，再自定义一个域名就可以了</p></li></ul><p><img src="/../images/AWS-Overview/38.png" alt="domain settings" /></p><ul><li>AWS API分为两种，一种是Edge Optimized，另一个是Regional，在API Gateway中每一个API的settings中可以看到，也可以更改其Endpoint type</li></ul><p><img src="/../images/AWS-Overview/39.png" alt="API Endpoint Type" /></p><ul><li>最后测试一下看看域名是不是成功了，记住route 53需要一点时间才能把域名建好并且go live，所以等几分钟再试</li></ul><p><img src="/../images/AWS-Overview/40.png" alt="test domain" /></p><ul><li>本节参考了这些文章，可以点击以获取更多信息。</li></ul><ol><li><a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-custom-domains.html">Set Up a Custom Domain Name for an API in API Gateway</a></li><li><a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-edge-optimized-custom-domain-name.html">How to Create an Edge-Optimized Custom Domain Name</a></li></ol><h3 id="change-lambda-function-outbound-ip-address-to-static"><a class="markdownIt-Anchor" href="#change-lambda-function-outbound-ip-address-to-static"></a> change lambda function outbound IP address to static</h3><ul><li><p>我们还可以设置API outbound request的IP，有些时候，当我们需要调用外部API时，他们会有IP地址的限制，只有来自特定whitelist的IP地址发送的请求才会被接受。所以我们需要设置我们发送API时请求的IP地址。因为Lambda function是通过AWS发送的，在被发送时它的IP地址是随机的，虽然不是动态IP，但是每次发送的地址都不一样，我们没办法把所有的IP都加近whitelist。</p></li><li><p>针对这个问题，我们可以通过把lambda function加入VPC来解决，VPC可以看作是包含一组IP地址的内部云，我们给它加上一个出口，让所有在此VPC的请求都通过这个出口发送出去，这样所有的lambda都会只有一个我们指定的IP了。</p></li><li><p>我们具体来解释一下AWS VPC的构造</p></li><li><p>如果AWS EC2是一个云服务器，那么VPC就是这个云服务器的网络层，负责设备之间的信息传输。它由几个重要部分构成</p></li></ul><p><img src="/../images/AWS-Overview/44.png" alt="VPC" /></p><ol><li>Subnet: 包含一组指定范围的IP，IP格式参照<a href="https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">CIDR</a></li><li>Route table: 包含信息传输的规则，什么地方来的请求应该到什么地方去，类似一个交通枢纽，负责指挥数据的方向</li><li>Internet gateway: VPC的一个重要组成部分，负责VPC内部信息和外部网络的交流，就是这个VPC的出口</li><li>Elastic IP: 一个公开的IPv4地址，我们要把它赋给NAT，这样就可以让外部和NAT内部通过这个公开IP进行交流</li><li>NAT Gateway: Network Address Translator Gateway, 与Internet Gateway类似，不同的是它可以让private subnet中的数据通过它与外部网络交流</li></ol><h3 id="具体做法"><a class="markdownIt-Anchor" href="#具体做法"></a> 具体做法</h3><ol><li>新建一个VPC</li><li>新建一个Internet Gateway，与VPC相连</li><li>新建一个Public subnet，并在route table中新建一个规则，让所有通过这个public subnet的数据流向Internet Gateway</li><li>新建一个Elastic IP</li><li>新建一个NAT Gateway，把Elastic IP赋给它，并将它放入public subnet中</li><li>新建一个private subnet，并在route table中新建一个规则，让所有通过这个private subnet的数据流向NAT Gateway</li><li>将lambda function放入private subnet</li></ol><ul><li><p>这样一切就设置完成了，当lambda被执行时，数据会通过private subnet，根据route table的规则流向NAT gateway</p></li><li><p>NAT Gateway将数据赋予Elastic IP，因为NAT在public subnet中，根据route table规则流向Internet Gateway</p></li><li><p>Internet Gateway将数据发给外部网络，此时所有数据都会来自同一个Elastic IP</p></li></ul><h3 id="需要注意的点"><a class="markdownIt-Anchor" href="#需要注意的点"></a> 需要注意的点</h3><ul><li>在将lambda function放入subnet时，只给它private subnet，不要给public subnet，因为这样他就有可能不通过NAT gateway</li></ul><p><img src="/../images/AWS-Overview/41.png" alt="add VPC to lambda" /></p><ul><li>给lambda function加VPC需要一个AWS permission</li></ul><p><img src="/../images/AWS-Overview/42.png" alt="add VPC permission to lambda" /></p><ul><li>可以创建另一个lambda function，只接受特定IP来测试整个流程是否成功。图为限制IP的policy</li></ul><p><img src="/../images/AWS-Overview/43.png" alt="whitelist ip" /></p><h3 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference</h3><ol><li><a href="https://medium.com/@matthewleak/aws-lambda-functions-with-a-static-ip-89a3ada0b471">AWS Lambda functions with a static IP</a></li><li><a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-vpc.html">Configuring a Lambda Function to Access Resources in a VPC</a></li><li><a href="https://medium.com/awesome-cloud/aws-vpc-difference-between-internet-gateway-and-nat-gateway-c9177e710af6">AWS — Difference between Internet gateway and NAT gateway</a></li><li><a href="https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html">What Is Amazon VPC?</a></li><li><a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/concepts.html">What Is Amazon EC2?</a></li><li><a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/elastic-ip-addresses-eip.html">Elastic IP Addresses</a></li></ol><h2 id="use-iam-to-restrict-api"><a class="markdownIt-Anchor" href="#use-iam-to-restrict-api"></a> Use IAM to restrict API</h2><ul><li><p>HTTP basic authentication是一种保护API免受外界攻击的方式，当我们尝试打开某些URL时，有时会出现这个界面让我们输入用户名和密码，这就是一种Basic authentication<br /><img src="/../images/AWS-Overview/13.png" alt="browser pop up authentication window" /></p></li><li><p>这种机制依赖于HTTP Authentication Framework，他的步骤是：</p></li></ul><ol><li>某些人尝试访问一个受保护的URL</li><li>服务器返回401未授权的HTTP code，包括一个WWW-Authenticate header with value Basic</li><li>浏览器弹出要求用户输入用户名和密码的窗口</li><li>请求再次被发送，包括用户输入的授权信息在header中</li></ol><p><img src="/../images/AWS-Overview/14.png" alt="API authentication procedure" /></p><ul><li><p>那么这个简单的API authentication怎么实现呢？</p></li><li><p>首先我们去到已经建好的API Gateway中，点击Gateway responses选项，选中Unauthorized，在这里我们可以设置返回什么样的信息给用户当他们尝试访问这个URL时。</p></li></ul><p><img src="/../images/AWS-Overview/15.png" alt="set 401 response" /></p><ul><li>当我们添加了WWW-Authenticate header，浏览器就会弹出窗口要求用户自证身份</li></ul><p><img src="/../images/AWS-Overview/20.png" alt="test pop up window" /></p><ul><li>之后我们需要写一个Lambda function去检查用户提交的信息是否是正确的，也就是检查用户名和密码。这个function也叫做custom authorizer</li></ul><p><img src="/../images/AWS-Overview/16.png" alt="authentication lambda function" /></p><ul><li>接下来我们需要让我们的API知道当他接收到Authentication信息时需要调用哪个lambda function来检查，所以去到API gateway的Authorizer选项，新建一个Authorizer，在lambda function中选中我们刚刚写好的lambda function</li></ul><p><img src="/../images/AWS-Overview/17.png" alt="create authorizer" /></p><ul><li>最后我们还需要让API gateway知道哪个URL endpoint是需要保护的，因为一个API gatewat往往包括很多个URL，我们需要指定一个或多个URL调用刚刚新建的Authorizer</li></ul><p><img src="/../images/AWS-Overview/18.png" alt="set authorizer" /></p><ul><li><p>最后别忘了Deploye API，不然所有的设置并不会生效</p></li><li><p>我们可以测试一下看看访问相同的URL，如果不添加authentication information的话，服务器就会返回401 Unauthorized</p></li></ul><p><img src="/../images/AWS-Overview/19.png" alt="test Unauthorized" /></p><ul><li>除了使用自定义的Authorizer，AWS也内置有IAM (Identity Access Management),在之前的Method Request如果我们选择使用AWS_IAM的话，也可以限制用户对于API的访问</li></ul><p><img src="/../images/AWS-Overview/21.png" alt="AWS_IAM" /></p><ul><li>但是我们必须在request中添加AWS signature，这需要使用到AWS给每个account的access key和secret key，其中secret key只有在一开始generate的时候才会看到，之后就看不到了，所以一定要保存在一个安全的地方，要不然的话只能重新generate一对新的key</li></ul><p><img src="/../images/AWS-Overview/22.png" alt="AWS access key" /></p><p><img src="/../images/AWS-Overview/24.png" alt="AWS signature" /></p><ul><li>另外我们可以在resource policy中限制可以访问API的ip address，所以即使用户输入了正确的Authentication information，我们也不能让没有权限的区域访问API</li></ul><p><img src="/../images/AWS-Overview/23.png" alt="resource policy" /></p><ul><li><p>这种IP address limitation也可以在自定义的lambda function中使用</p></li><li><p>另外，如果要blacklist or whitelist a range of ip addresses，可以使用CIDR notation net mask，在ip address后面加一个斜杠和一个数字，数字表示从左往右有多少bit是在范围外的。</p></li><li><p>例如“110.142.216.1/24&quot; 就表示了ip range from 110.142.216.1 to 110.142.216.255</p></li></ul><h3 id="reference-2"><a class="markdownIt-Anchor" href="#reference-2"></a> Reference</h3><ol><li><a href="https://medium.com/@Da_vidgf/http-basic-auth-with-api-gateway-and-serverless-5ae14ad0a270">HTTP Basic Auth with API Gateway and Serverless</a></li><li><a href="https://aws.amazon.com/blogs/compute/control-access-to-your-apis-using-amazon-api-gateway-resource-policies/">Control access to your APIs using Amazon API Gateway resource policies</a></li><li><a href="https://aws.amazon.com/premiumsupport/knowledge-center/api-gateway-resource-policy-whitelist/">How do I use a resource policy to whitelist certain IP addresses to access my API Gateway API?</a></li><li><a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-resource-policies-examples.html#apigateway-resource-policies-source-ip-address-example">API Gateway Resource Policy Examples</a></li><li><a href="https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing">Classless Inter-Domain Routing</a></li></ol><h2 id="use-s3-to-host-webpage"><a class="markdownIt-Anchor" href="#use-s3-to-host-webpage"></a> Use S3 to host webpage</h2><ul><li>S3是一个储存文件的服务，一般来说我们需要把网页放到服务器里去host它，但是S3也提供了host webpage的功能，我们只需要新建一个bucket。</li></ul><p><img src="/../images/AWS-Overview/1.png" alt="AWS S3 create bucket" /><br /><img src="/../images/AWS-Overview/25.png" alt="" /></p><ul><li>上传我们需要host的webpage</li></ul><p><img src="/../images/AWS-Overview/26.png" alt="AWS S3 upload file" /></p><ul><li>注意在设置里面关闭block public access，毕竟我们需要访问它来获得数据</li></ul><p><img src="/../images/AWS-Overview/27.png" alt="AWS S3 block access" /></p><ul><li>最后我们需要打开hosting</li></ul><p><img src="/../images/AWS-Overview/28.png" alt="AWS S3 hosting" /></p><ul><li>这样的话我们就可以通过AWS S3来host webpage，不需要使用自己的服务器了</li></ul><h3 id="reference-3"><a class="markdownIt-Anchor" href="#reference-3"></a> Reference</h3><ol><li><a href="https://docs.aws.amazon.com/AmazonS3/latest/gsg/GetStartedWithS3.html">AWS S3 Getting Started</a></li><li><a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/Welcome.html">What is AWS S3?</a></li></ol><h2 id="aws-simple-email-services"><a class="markdownIt-Anchor" href="#aws-simple-email-services"></a> AWS Simple Email Services</h2><ul><li><p>使用AWS发送Email是一件非常简单的事情，通过以下步骤可以创建一个AWS User with email sending policyies并使用C#发送邮件</p></li><li><p>首先我们需要创建一个AWS User，拿到发送Email的Credentials</p></li></ul><p><img src="/../images/AWS-Overview/45.png" alt="SMTP Credentials" /></p><ul><li>然后我们需要设置想用什么邮箱地址发送邮件，我们需要验证，并登陆对应邮箱点击验证链接</li></ul><p><img src="/../images/AWS-Overview/46.png" alt="Verify sender Email address" /></p><ul><li>之后我们可以测试一下能不能发送Test Email，这里不需要用到Credentials</li></ul><p><img src="/../images/AWS-Overview/47.png" alt="Send Test Emails" /></p><ul><li>然后我们就可以看代码了</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">public void SendEmail()</span><br><span class="line">    &#123;</span><br><span class="line">        String FROM &#x3D; &quot;sender email address&quot;;</span><br><span class="line">        String FROMNAME &#x3D; &quot;Your Name&quot;;</span><br><span class="line">        String TO &#x3D; &quot;receiver email address&quot;;</span><br><span class="line">        String SMTP_USERNAME &#x3D; &quot;Credentials Username&quot;;</span><br><span class="line">        String SMTP_PASSWORD &#x3D; &quot;Credentials Password&quot;;</span><br><span class="line">        String HOST &#x3D; &quot;Your AWS host location&quot;;</span><br><span class="line">        int PORT &#x3D; 587;</span><br><span class="line">        String SUBJECT &#x3D; &quot;Email Subject&quot;;</span><br><span class="line"></span><br><span class="line">        String BODY &#x3D;</span><br><span class="line">            &quot;&amp;lth1&amp;gtEmail Title&amp;lt&#x2F;h1&amp;gt&quot; +</span><br><span class="line">            &quot;&amp;ltp&amp;gtEmail Content&amp;lt&#x2F;p&amp;gt&quot;;</span><br><span class="line"></span><br><span class="line">        MailMessage message &#x3D; new MailMessage();</span><br><span class="line">        message.IsBodyHtml &#x3D; true;</span><br><span class="line">        message.From &#x3D; new MailAddress(FROM, FROMNAME);</span><br><span class="line">        message.To.Add(new MailAddress(TO));</span><br><span class="line">        message.Subject &#x3D; SUBJECT;</span><br><span class="line">        message.Body &#x3D; BODY;</span><br><span class="line"></span><br><span class="line">        using (var client &#x3D; new System.Net.Mail.SmtpClient(HOST, PORT))</span><br><span class="line">        &#123;</span><br><span class="line">            client.UseDefaultCredentials &#x3D; false;</span><br><span class="line">            client.Credentials &#x3D; new NetworkCredential(SMTP_USERNAME, SMTP_PASSWORD);</span><br><span class="line">            client.EnableSsl &#x3D; true;</span><br><span class="line"></span><br><span class="line">            try</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(&quot;Attempting to send email...&quot;);</span><br><span class="line">                client.Send(message);</span><br><span class="line">                Console.WriteLine(&quot;Email sent!&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">            catch (Exception ex)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.WriteLine(&quot;The email was not sent.&quot;);</span><br><span class="line">                Console.WriteLine(&quot;Error message: &quot; + ex.Message);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>执行这个function几次看看能不能收到邮件，如何可以的话就成功了</li></ul><p><img src="/../images/AWS-Overview/49.png" alt="Emails" /></p><ul><li><p>AWS 还有统计邮件成功率的工具，也在SES tab里面</p></li><li><p>另外就是Configuration set是一个optional的设置，可以在AWS里面添加</p></li><li><p>除了用SMTP，我们还可以用AWS SDK发送邮件，这里就不介绍了，大致都是一样的，代码需要改一下</p></li></ul><p><img src="/../images/AWS-Overview/48.png" alt="Configuration Sets" /></p><ul><li>当你新建一个AWS用户时，你的邮件功能可以会受到限制，也就是说在Sandbox里面，收发数量，频率都会受限，可以给Amazon发送请求移除Sandbox，具体做法可以参考下面链接</li></ul><h3 id="reference-4"><a class="markdownIt-Anchor" href="#reference-4"></a> Reference</h3><ol><li><a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-an-email-from-console.html">Sending a test email</a></li><li><a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-using-smtp-net.html">Send an email using SMTP</a></li><li><a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/using-configuration-sets.html">Using AWS SES Configuration sets</a></li><li><a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/request-production-access.html">Moving out of sandbox</a></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> AWS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Payment Gateway API</title>
      <link href="2019/07/23/Payment-Gateway-API/"/>
      <url>2019/07/23/Payment-Gateway-API/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是pci-compliance"><a class="markdownIt-Anchor" href="#什么是pci-compliance"></a> 什么是PCI compliance？</h2><ul><li>现在很多公司都允许客户通过信用卡在网上直接付款购买公司的服务和产品，那么必不可少的就是公司需要对用户输入的信用卡信息和其他个人隐私保护，使得外人不能窃取这些信息，<a href="https://www.cio.com.au/article/400300/what_pci_compliance_/">PCI DSS</a>是一种数据安全协议，通过参与这个协议，客户就可以放心的将信用卡信息填在公司的网站上而不用担心泄露。因为如果客户的信息泄露了，公司将会受到严重的利息损失，其他客户也将不再愿意相信此公司的信誉。</li></ul><p><img src="/../images/Payment-Gateway-API/1.jpg" alt="PCI compliance" /></p><ul><li>WestPac QuickStream是一个第三方的payment gateway。我们可以使用这个API来管理用户的付款，他们提供一种trusted frame，使用它，所有的敏感信息将不会经过公司的服务器，而是直接从用户的电脑到Westpac的服务器，由他们来负责保护这些关键信息。</li></ul><p><img src="/../images/Payment-Gateway-API/2.png" alt="Westpac quickstream" /></p><ul><li>Trusted Frame将用户信息加密(tokenize)，并将加密后的token发送到公司服务器，这样即使公司也无法知道用户信息了。</li></ul><p><img src="/../images/Payment-Gateway-API/3.png" alt="Trusted frame" /></p><ul><li>详细的API使用可以在<a href="https://quickstream.westpac.com.au/docs/quickstreamapi/v1/transactions/#transactions-api">这里</a>找到。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> API </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Learn iOS apprentice in 10 days</title>
      <link href="2019/07/03/Learn-iOS-apprentice-in-10-days/"/>
      <url>2019/07/03/Learn-iOS-apprentice-in-10-days/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是ios-apprentice"><a class="markdownIt-Anchor" href="#什么是ios-apprentice"></a> 什么是iOS apprentice？</h2><hr /><ul><li>在完成了上一个任务之后，我总算迎来了又一个更加巨大的挑战，这次直接换了一个新的平台：iOS。我从来没有接触过iOS的编程，之前只是听说过Swift和Cocoa Touch，但是Xcode完全没有用过。于是经过一番上网查找，我发现了一个非常适合新手入门的教材： raywenderlich的iOS apprentice！</li></ul><p><img src="/../images/iOS-Apprentice/1.png" alt="iOS apprentice book" /></p><ul><li>他总共包括四个部分，每一个部分教你编写一个app，难度从低到高。</li></ul><ol><li><a href="#bulls-eye">Bull’s Eye</a></li><li><a href="#checklist">Checklist</a></li><li><a href="#mylocation">MyLocation</a></li><li><a href="#storesearch">StoreSearch</a></li><li><a href="#conclusion">Conclusion</a></li></ol><h2 id="bulls-eye"><a class="markdownIt-Anchor" href="#bulls-eye"></a> Bull’s Eye</h2><hr /><p><img src="/../images/iOS-Apprentice/2.png" alt="Bull Eye app" /></p><p><img src="/../images/iOS-Apprentice/3.png" alt="Bull Eye app" /></p><ul><li>从怎么样创建一个新的single view app说起，非常容易上手</li></ul><p><img src="/../images/iOS-Apprentice/4.png" alt="Project Navigator" /></p><ul><li>Project Navigator</li></ul><p><img src="/../images/iOS-Apprentice/5.png" alt="Obejct Library" /></p><ul><li>Obejct Library</li></ul><p><img src="/../images/iOS-Apprentice/6.png" alt="Drag item to view" /></p><ul><li>Drag item to view</li></ul><p><img src="/../images/iOS-Apprentice/7.png" alt="Make connections from object item to View Controller" /></p><ul><li>Make connections from object item to View Controller</li></ul><p><img src="/../images/iOS-Apprentice/8.png" alt="Attributes Inspector" /></p><ul><li>Attributes Inspector</li></ul><p><img src="/../images/iOS-Apprentice/9.png" alt="Item Outlet" /></p><p><img src="/../images/iOS-Apprentice/10.png" alt="Item Outlet 2" /></p><ul><li>Item Outlet</li></ul><p><img src="/../images/iOS-Apprentice/11.png" alt="Another view controller" /></p><ul><li>Another view controller</li></ul><p><img src="/../images/iOS-Apprentice/12.png" alt="Segue" /></p><ul><li>Segue</li></ul><p><img src="/../images/iOS-Apprentice/13.png" alt="Add Constraints" /></p><ul><li><p>Add Constraints</p></li><li><p>第一个app基本上解决了很多界面上的问题，storyboard和editor之前的交流也讲了很多，@IBAction， @IBOutlet，segue等等一切都有涉及。之后第二个app就会更深层次的接触到iOS特有的模式了，比如delegate，还有一切经典的design pattern，比如MVC</p></li></ul><h2 id="checklist"><a class="markdownIt-Anchor" href="#checklist"></a> Checklist</h2><hr /><ul><li>第二个app就没有那么简单了，他先讲了table view和navigation bar</li></ul><p><img src="/../images/iOS-Apprentice/14.png" alt="table view and navigation bar" /></p><ul><li>跟普通的view不同的是它由一行行的cell组成，这些cell可以被重复使用，当用户往下滑动时，更多的内容会被显示但是并不是每一行data都被存放在一个新的table cell里。离开显示范围的cell会重新出现在底部，并显示出新的data。</li></ul><p><img src="/../images/iOS-Apprentice/15.png" alt="UITable view protocol" /></p><h3 id="protocol"><a class="markdownIt-Anchor" href="#protocol"></a> Protocol</h3><ul><li>什么是protocol？他其实是一种已经被写好了的methods的集合，UITableView就是一个protocol，我们通过它来显示table view，但是如果我们想改变一些显示方式，让他更适应我们自己的app，那么就要override其中一些method，这很常见</li></ul><p><img src="/../images/iOS-Apprentice/16.png" alt="UITableView method override" /></p><ul><li>一般让一个table view更好的显示，我们需要override三个methods</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -&gt; Int</span><br><span class="line"></span><br><span class="line">override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&gt; UITableViewCell</span><br><span class="line"></span><br><span class="line">override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath)</span><br></pre></td></tr></table></figure><h3 id="mvc-model"><a class="markdownIt-Anchor" href="#mvc-model"></a> MVC model</h3><ul><li>MVC model是一种常见的设计模式，将代码分割成三个部分，每一个部分只负责他自己的任务，这样让程序结构更清晰。Model主要负责储存数据，view负责显示数据给用户，而controller负责显示正确的数据，包括运算等等</li></ul><p><img src="/../images/iOS-Apprentice/17.png" alt="MVC model" /></p><h3 id="array"><a class="markdownIt-Anchor" href="#array"></a> Array</h3><ul><li>这个app将table cells中的数据储存在一个array中，新建了一个checklistItem model,这样的话每次如果有数据变动就只需要增加和删除array中的数据。</li></ul><h3 id="initializer"><a class="markdownIt-Anchor" href="#initializer"></a> Initializer</h3><ul><li>在Swift语言中，所有的variable， obejct都必须被初始化，所以很多时候我们需要一个初始化器来负责检查漏掉的变量。注意当我们有两个view controller需要传递data时，method的执行顺序是：假设A呼叫B</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">init() from B</span><br><span class="line">prepare() from A</span><br><span class="line">viewDidLoad() from B</span><br></pre></td></tr></table></figure><p><img src="/../images/iOS-Apprentice/18.png" alt="Initializer" /></p><h3 id="delegates"><a class="markdownIt-Anchor" href="#delegates"></a> Delegates</h3><ul><li>Delegates是ios编程中非常重要的一个概念，当你需要把一些值从一个view传到另一个view时，你通常不希望这两个view相互知道太多除了需要值之外的其他东西，如果两个view之间的联系太紧密，那么他们和其他view再建立关联就会更麻烦。所以一种通常的办法是写一个protocol，包含所有delegate methods，再让另外一个view成为它的delegate。这种办法称为loose coupling。 A是B的delegate，然而B根本不知道A的存在，只知道他有一个delegate可以接受他想要传递的值。</li></ul><p><img src="/../images/iOS-Apprentice/19.png" alt="Delegate" /></p><h3 id="建立delegate的步骤"><a class="markdownIt-Anchor" href="#建立delegate的步骤"></a> 建立delegate的步骤</h3><ol><li>在B中建立delegate protocol</li><li>在B中建立一个delegate optional variable</li><li>在B中，需要传递信息时呼叫delegate method</li><li>在A中conformB的delegate protocol（inheritance</li><li>告诉B，A是自己的delegate，一般在A的prepare method中做这一步</li></ol><h3 id="optionals"><a class="markdownIt-Anchor" href="#optionals"></a> Optionals</h3><ul><li>Optional variable在declare的时候用？来表示，表明这个变量有可能是nil，在使用的时候也需要加？在varibale name的后面，如果使用了exclamation mark叹号！，则表示在此时不管变量是什么，强行取得其中的值，此时程序员保证变量在此时不可能是nil，风险也由程序员承担。是用叹号叫做force unwrapping</li></ul><h3 id="weak"><a class="markdownIt-Anchor" href="#weak"></a> Weak</h3><ul><li>Weak表示两个objects之间的关系，当A对B的关系是strong时表示A是B的owner。当两个obejcts之间都是strong的关系我们可能会产生ownership cycle的问题从而导致memroy leak，因为没有人有资格destroy它的owner。所以我们尽量要维护一种一强一弱的对应关系。</li></ul><p><img src="/../images/iOS-Apprentice/20.png" alt="strong-strong relationship" /></p><p><img src="/../images/iOS-Apprentice/21.png" alt="strong-weak relationship" /></p><ul><li>一般来说，A如果是B的owner，A给B传值时在A的prepare method中，此时B的instance已经被建立，A很容易把值传给B的properties，并指认成为B的delegate，B给A传值则需要在合适的时候呼叫delegate methods</li></ul><p><img src="/../images/iOS-Apprentice/22.png" alt="Views pass value" /></p><h3 id="save-data"><a class="markdownIt-Anchor" href="#save-data"></a> Save data</h3><ul><li>app会在合适的时候将用户数据保存到手机本地，每一个app都有一个属于自己的folder，也叫做sandbox，每个sandbox之间不能访问，这就预防了一些恶意软件在用户不知情的情况下窃取保存在用户手机其他地方的数据。</li></ul><p><img src="/../images/iOS-Apprentice/23.png" alt="Saving data" /></p><ul><li>数据一般会保存在这样的一个path中，我们可以看到application后面接着一串32的字母的应用ID</li></ul><p><img src="/../images/iOS-Apprentice/24.png" alt="data path" /></p><h3 id="plist-file"><a class="markdownIt-Anchor" href="#plist-file"></a> .plist file</h3><ul><li>什么是.plist文件？它是一种ios用来储存数据的文件，它遵循XML格式，每一个app都有一个info.plist file，他就是用来保存这个app的配置信息</li></ul><h3 id="special-comments"><a class="markdownIt-Anchor" href="#special-comments"></a> Special comments</h3><ul><li>在编写代码时我们可以使用 // MARK：- 的形式来告诉Xcode我们开始了一个section，这样在jump bar中我们就可以快速定位variable，methods的位置。</li></ul><p><img src="/../images/iOS-Apprentice/25.png" alt="MARK comments" /></p><p><img src="/../images/iOS-Apprentice/26.png" alt="Jump bar for MARK comments" /></p><h3 id="type-casts"><a class="markdownIt-Anchor" href="#type-casts"></a> Type casts</h3><ul><li>我们使用 as! 来给一个variable赋予一种data type，告诉Swift以后把它当成某一种type来处理，因为有时候我们知道它的type，可是Swift却不知道。</li></ul><p><img src="/../images/iOS-Apprentice/27.png" alt="Type casts" /></p><h3 id="array-of-arrays"><a class="markdownIt-Anchor" href="#array-of-arrays"></a> Array of arrays</h3><ul><li>当app的结构变得复杂时，数据的结构也要相应的变化以适应这些变化，我们可以使用嵌套的array来储存更多的数据</li></ul><p><img src="/../images/iOS-Apprentice/28.png" alt="nested arrays" /></p><h3 id="appdelegateswift"><a class="markdownIt-Anchor" href="#appdelegateswift"></a> AppDelegate.swift</h3><ul><li>这个文件用来负责当app刚启动时或快要结束时的一些情况，我们不需要每过一会就储存数据，只需要每当用户退出app或者切换app时，所以这些method需要在AppDelegate里面修改</li></ul><p><img src="/../images/iOS-Apprentice/29.png" alt="AppDelegate file" /></p><h3 id="dictionary"><a class="markdownIt-Anchor" href="#dictionary"></a> Dictionary</h3><ul><li>和array类似，dictionary也是一种储存数据的类型，只不过它是将数据按照key-value pair来排列的，当需要拿到某一个数据时，我们需要给dictionary相应的key。</li></ul><p><img src="/../images/iOS-Apprentice/30.png" alt="dictionary" /></p><h3 id="user-defaults"><a class="markdownIt-Anchor" href="#user-defaults"></a> User Defaults</h3><ul><li>User Defaults就是一个dictionary类型的数据储存文件，它包含户用的配置信息，我们使用它储存一些app刚开始时的默认配置。</li></ul><h3 id="local-notifications"><a class="markdownIt-Anchor" href="#local-notifications"></a> Local Notifications</h3><ul><li>当获得用户许可后，app可以定时在app不活跃时像互用手机发送提醒</li></ul><p><img src="/../images/iOS-Apprentice/31.png" alt="Notification authorization" /></p><p><img src="/../images/iOS-Apprentice/32.png" alt="Permission dialog" /></p><p><img src="/../images/iOS-Apprentice/33.png" alt="Notification message" /></p><ul><li>这些基本就是第二个app的全部内容了，关于代码的部分可以在我的github的iOSApprenticePratice里面找到，下面是整个app的final storyboard</li></ul><p><img src="/../images/iOS-Apprentice/34.png" alt="final storyboard" /></p><h2 id="mylocation"><a class="markdownIt-Anchor" href="#mylocation"></a> MyLocation</h2><h3 id="app-overview"><a class="markdownIt-Anchor" href="#app-overview"></a> App Overview</h3><ul><li>第三个app我们要做一个可以通过GPS显示当前位置信息，并可以储存，增加照片和类别，在以后可以查看的app。完成之后的效果如下</li></ul><p><img src="/../images/iOS-Apprentice/3-1.png" alt="app overview" /></p><h3 id="tabbed-application"><a class="markdownIt-Anchor" href="#tabbed-application"></a> Tabbed Application</h3><ul><li>之前的checklist我们学会了如何制作一个有navigation bar的app，这回我们要在app中增加一个tab bar，就是下屏幕最低端有一个导航条，可以切换不同的页面。许多主流的app都有类似的功能。</li></ul><p><img src="/../images/iOS-Apprentice/3-2.png" alt="create tab bar" /><br /><img src="/../images/iOS-Apprentice/3-3.png" alt="tab bar" /><br /><img src="/../images/iOS-Apprentice/3-4.png" alt="tab bar storyboard" /></p><h3 id="corelocation-and-ask-for-permission"><a class="markdownIt-Anchor" href="#corelocation-and-ask-for-permission"></a> CoreLocation and ask for permission</h3><ul><li>要想让app获得GPS信息，我们需要现象用户获得许可，如果用户拒绝让app使用GPS，我们则无法获得权限。我们需要在info.plist里面增加一个record，表示我们需要获得许可，之后我们还会请求照片查看和地图view的许可。</li></ul><p><img src="/../images/iOS-Apprentice/3-5.png" alt="GPS service permission" /></p><h3 id="reverse-geocoding"><a class="markdownIt-Anchor" href="#reverse-geocoding"></a> Reverse geocoding</h3><ul><li>当我们获得了GPS信息，也就是当前位置的经纬度之后，我们还需要将他们转换成地址信息，否则用户也无法直接通过经纬度对当前位置有什么具体的概念。我们要做的是使用swift内置的CLGeocoder.reverseGeocodeLocation来转换。然后我们就可以得到地址信息了。</li></ul><p><img src="/../images/iOS-Apprentice/3-6.png" alt="reverse geocoder" /></p><h3 id="auto-resizing"><a class="markdownIt-Anchor" href="#auto-resizing"></a> Auto-resizing</h3><ul><li>自动调整尺寸大小是一个非常重要的功能，现在市面上的iPhone屏幕尺寸很多，我们如果想对每一个尺寸做优化，为非常耗时，所以使用auto-resizing，让swift知道element在屏幕上的相对位置，比如距离屏幕底端100px，宽度等于屏幕宽度。这样swift就可以画出他的坐标，对于不同大小的屏幕也不会超出屏幕之外。</li></ul><p><img src="/../images/iOS-Apprentice/3-7.png" alt="Auto-resizing" /><br /><img src="/../images/iOS-Apprentice/3-8.png" alt="Auto-resizing" /></p><h3 id="class-inheritance-overriding-and-casts"><a class="markdownIt-Anchor" href="#class-inheritance-overriding-and-casts"></a> Class Inheritance, overriding and casts</h3><ul><li>现在我们来说一下OOP中非常重要的一个概念，class。object就是class的一个具象，而class是这个具象的类。inheritance就是子类可以继承他的parent class的信息。而overriding是说子类可以改变parent class的一些信息，让他有自己的特点。比如汽车是一个parent class，而公交车就是汽车这个class的一个子类，汽车如果有一个property是说自己的轮子个数为4.那么公交车就可以overr这个property，将轮子个数改为8，或者12，或任意。。。casts则是说某些时候swift并不知道现在的变量到底是什么类，只知道他是属于哪个大类的，那么我们如果要使用只存在于子类的properties，我们就需要将这个变量cast成我们想要的类。一般用as!</li></ul><h3 id="tag-location-screen"><a class="markdownIt-Anchor" href="#tag-location-screen"></a> Tag Location Screen</h3><ul><li>接下来我们看看怎么给现在获得的位置信息添加一些其他的信息，比如description，photo，category。那么我们就需要一个table，这个table我们知道他会有多少行，所以不需要使用prototype cells，使用static cells就可以了。制作一个这样的table非常基本，description用text view，image picker我们之后会讲，category使用disclosure indicator，其他cell就用right detailed就可以。</li></ul><p><img src="/../images/iOS-Apprentice/3-9.png" alt="tag location screen" /></p><h3 id="the-unwind-segue"><a class="markdownIt-Anchor" href="#the-unwind-segue"></a> The unwind segue</h3><ul><li>当我们点击category时会进入到另一个table with prototype cells。再选一个category后就会回到之前的这个tag location screen，像这种返回式的我们可以使用unwind segue来实现</li></ul><p><img src="/../images/iOS-Apprentice/3-10.png" alt="unwind segue" /></p><h3 id="hud"><a class="markdownIt-Anchor" href="#hud"></a> HUD</h3><ul><li>heads-up display是一种popover view，其实他就是一种view，只不过正常的view现实时其他的view会先被destory以节省memory，但是HUD往往会将背景设置成本透明并保留之前的view，让app有一种层叠的感觉。</li></ul><p><img src="/../images/iOS-Apprentice/3-11.png" alt="HUD" /></p><h3 id="core-data"><a class="markdownIt-Anchor" href="#core-data"></a> Core Data</h3><ul><li>Core Data相当于储存在本地的数据，swift使用SqlLite数据库储存本地数据，我们需要将所有的location信息储存在Core Data中，以便以后打开app时查看之前tag的地点</li></ul><p><img src="/../images/iOS-Apprentice/3-12.png" alt="Core Data" /></p><h3 id="notification-center"><a class="markdownIt-Anchor" href="#notification-center"></a> Notification center</h3><ul><li>跟iPhone提醒不一样的是，swift有一个Notification center可以让开发者方便的listen从app任何地方发出的notification。比如我想在用户任何时候对储存在Core Data里的Locations信息进行读取，增加，删除，修改的时候得到提醒，我就可以在appDelegate里设置一个notification method，任何地方发出的LocationsUpdatedNotification都会被我捕捉到，并在这个method里面进行相应的操作。</li></ul><p><img src="/../images/iOS-Apprentice/3-13.png" alt="notification center" /></p><ul><li>The Locations Tab: 这个view就是显示所有储存在Core Data Locations里面的信息。基本的table with prototype cells，难点在于将Core Data信息提取并转换成相应的type，还有就是在不关闭app的状态下，新增的location可以马上更新到Core Data并显示在此view中，不过有了notification center相信各位也知道怎么做了。</li></ul><p><img src="/../images/iOS-Apprentice/3-14.png" alt="The locations tab" /></p><ul><li><p>Custom table view cell: 将一个cell的layout写在一个新的文件中，使得代码更易读。跟写在LocationsTabViewController是一样的，只不过拉outlets的时候选新的文件就好了。</p></li><li><p>Map Kit View: 我们可以在info.plist里增加map view来获得显示apple map的许可。</p></li></ul><p><img src="/../images/iOS-Apprentice/3-15.png" alt="map view plist" /><br /><img src="/../images/iOS-Apprentice/3-16.png" alt="map view" /></p><ul><li>Image Picker: 同样，请求获取照片查看器的许可</li></ul><p><img src="/../images/iOS-Apprentice/3-17.png" alt="image picker plist" /></p><h3 id="ownership-cycle-in-closure"><a class="markdownIt-Anchor" href="#ownership-cycle-in-closure"></a> Ownership cycle in closure</h3><ul><li>先复习一下什么是closure，他其实就是一个method，没什么特殊的，只不过他需要依附于另一个method才能存在。在某些条件被满足时，closure block里面的代码会被执行，比如一段时间过后，api返回成功之后等等。在执行closure时，我们往往会用到被依附的method的property，这时我们需要使用self来显式调用。然而这表示我们对这个property有一种strong reference，并可能导致在closure被执行之前，即使被依附的method所在的class无法被destory，造成memory leak，这是我们就需要使用weak self来破坏ownership cycle。</li></ul><p><img src="/../images/iOS-Apprentice/3-18.png" alt="closure ownership cycle" /></p><ul><li>剩下的就是一些外观，音效和动画的改变了，这里就不赘述了。</li></ul><h2 id="storesearch"><a class="markdownIt-Anchor" href="#storesearch"></a> StoreSearch</h2><h3 id="app-overview-2"><a class="markdownIt-Anchor" href="#app-overview-2"></a> App Overview</h3><ul><li>这本书的最后一个app将用到向apple store发送request获取信息，使用version contorl tools，对iPad等大屏幕设备的适配，异步通信以及把app上传到app store，可以说是一个简单的软件开发流程了。最终完成的结果如下</li></ul><p><img src="/../images/iOS-Apprentice/4-1.png" alt="final storyboard" /></p><h3 id="git-version-control"><a class="markdownIt-Anchor" href="#git-version-control"></a> Git version control</h3><ul><li>是一个代码管理软件，当我们完成一个阶段的代码后，希望把他保存成一个副本，以后可以随时返回到这个地方。Xcode可以接连到github等网站进行更好的代码管理，也可以使用terminal。我比较喜欢使用terminal，常用的几个指令是：</li></ul><p><img src="/../images/iOS-Apprentice/4-2.png" alt="Xcode git version control" /><br /><img src="/../images/iOS-Apprentice/4-3.png" alt="terminal version control" /></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add *</span><br><span class="line">git commit -m <span class="string">&quot;commit message&quot;</span></span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><ul><li>当我们想在已经工作的代码中新加一些功能却又害怕出错，然后又改不回来，我们可以使用git创建一个新的branch，然后在新的branch中肆意更改，不用害怕出问题，这就相当于一个副本，如果改不会去了可以直接删掉，git会保存最后工作的版本。若果一切顺利，也可以将新的branch与master合并</li></ul><p><img src="/../images/iOS-Apprentice/4-15.png" alt="git merch branch" /></p><ul><li>当我们在View Controller中创建outlet时，应该使用weak relationship，这是因为每一个view都基本是从另一个super view中继承而来的，所以如果使用strong relationship，将导致view无法被摧毁。</li></ul><p><img src="/../images/iOS-Apprentice/4-4.png" alt="view relationship" /></p><h3 id="create-branch-and-merge"><a class="markdownIt-Anchor" href="#create-branch-and-merge"></a> Create branch and merge</h3><ul><li>NeXT Interface Builder: nib file or xib file, 是一种局部storyboard，比如如果我们想设计一种table cell，就可以创建一个新的nib file，然后将这种custom table cell发给任何一个storyboard中的table view， nib file给我们提供多的灵活性</li></ul><p><img src="/../images/iOS-Apprentice/4-5.png" alt="create new nib file" /><br /><img src="/../images/iOS-Apprentice/4-6.png" alt="nib storyboard" /></p><h3 id="debug-using-xcode"><a class="markdownIt-Anchor" href="#debug-using-xcode"></a> Debug using Xcode</h3><ul><li>与其他IDE相似，可以设置breakpoint来暂停程序，查看此时各个变量的值。在debug console中输入p instanceName 可以print出想要查看的object的值</li></ul><p><img src="/../images/iOS-Apprentice/4-7.png" alt="Xcode debug" /><br /><img src="/../images/iOS-Apprentice/4-8.png" alt="debug console" /></p><h3 id="calling-the-web-service"><a class="markdownIt-Anchor" href="#calling-the-web-service"></a> Calling the web service</h3><ul><li>这个app的第一个重头戏就是send API request, 这也是软件开发中最常见的也是必不可少的技能，API request最常见的有两种，GET 和 POST， GET一般用来从远端提取数据，POST一般用来添加或改变远端数据，而API就是本地程序和远端数据连接的接口。本书使用了最简单的没有任何限制的GET request。</li></ul><p><img src="/../images/iOS-Apprentice/4-9.png" alt="call web service" /><br /><img src="/../images/iOS-Apprentice/4-10.png" alt="data response" /></p><ul><li>encode the url text to escape special characters: 在向API发送请求时我们经常需要一同发送一些parameters，但是space和很多其他它特殊符号都是不能被正常处理的，所以我们需要encode url再发送</li><li>Parse JSON data: 返回的数据一般是以JSON的形式组成的，所以我们需要deserilize，Swift有提供官方的decoder可以直接使用</li></ul><p><img src="/../images/iOS-Apprentice/4-11.png" alt="JSON format" /></p><ul><li>using network link conditioner: 从发送API请求到收到数据总会有那么几秒钟时间，这时如果你的程序是在主线程上，你将无法执行任何操作。直到获取数据。如果网络速度很慢，那么结果将非常糟糕，我们可以使用network link conditioner这一额外开发工具来模拟网速极慢的状态。</li></ul><p><img src="/../images/iOS-Apprentice/4-12.png" alt="network link conditioner" /></p><h3 id="asychronous-networking"><a class="markdownIt-Anchor" href="#asychronous-networking"></a> Asychronous networking</h3><ul><li>那么如果解决这几秒钟的类似于死机的状态呢？我们可以使用多线程，并将API请求的操作放到另外一个线程中，这样主线程将不受影响，注意，所有和界面变化相关的操作都应该放在主线程。所以即使数据没有收到，用户也可以进行其他操作，比如取消请求。。。</li></ul><p><img src="/../images/iOS-Apprentice/4-14.png" alt="asynchronous networking overview" /><br /><img src="/../images/iOS-Apprentice/4-13.png" alt="asynchronous networking code" /></p><ul><li>URLSession: 这是一个专门用来负责多线程的API。他可以负责下载请求，数据请求等很多工作。本书使用URLSession来处理异步通信问题。</li><li>Segmented Control: 这是一个很常用的UI模块, 每次切换时可以把segmentedIndex的值传给controller来负责update UI</li></ul><p><img src="/../images/iOS-Apprentice/4-16.png" alt="segmented control" /></p><h3 id="downloadtask"><a class="markdownIt-Anchor" href="#downloadtask"></a> DownloadTask</h3><ul><li>Show DetailView with Present Modally segue: 当点击每个table cell时，会出现这样的一个显示详细信息的窗口，并且也可以看到下面的table view，这个做法其实很简单，每当swift切换到一个新的view时，之前的view默认会被摧毁，但是我们可以改变delegate method，让之前的view保留，并把新的view背景设置成透明。</li></ul><p><img src="/../images/iOS-Apprentice/4-17.png" alt="details view" /></p><ul><li>Dynamic type text: 一些app的字体可以根据用户的系统设置而改变，这就要求我们使用默认字体大小，类似于headline</li></ul><p><img src="/../images/iOS-Apprentice/4-18.png" alt="dynamic type" /></p><ul><li>对于一款手机app来说，好的排版是非常重要的，因为涉及到不同的屏幕尺寸，使用auto-resizing让排版适应所有类型的手机可以扩大目标受众，而不是只为一款手机开发</li></ul><p><img src="/../images/iOS-Apprentice/4-19.png" alt="app constraints" /><br /><img src="/../images/iOS-Apprentice/4-20.png" alt="detail popup view" /></p><h3 id="landscape"><a class="markdownIt-Anchor" href="#landscape"></a> Landscape</h3><ul><li>对于像iPad和iPhone Plus的机型来说，很多时候我们会把手机横置，这个时候因为屏幕的宽度和高度变化，我们希望app可以呈现出另一种不同的layout以适应变化的屏幕。</li></ul><p><img src="/../images/iOS-Apprentice/4-21.png" alt="landscape mode" /></p><ul><li>对于这种情况，swift定义了size classes，我们可以通过查看size class区分手机什么时候是横置的。拿iPhone 6 Plus来举例。如下图，当手机竖置的时候，手机屏幕的高度（vertical）是regular模式，而宽度是compact模式，而当手机处于横置的状态时，手机的高度变成了compact模式，而宽度变成了regular模式。这样，我们在写代码的时候，就可以对每一种situation，制定不同的显示模式了。</li></ul><p><img src="/../images/iOS-Apprentice/4-22.png" alt="size classes" /></p><ul><li>Enums with associated values: 在StoreSearch这个app中，用户有没有perform search action一共有四种状态，1.还没有search。 2.正在searching。 3. search结束，并且没有找到任何结果。 4.search结束，并且找到了至少一种结果。 那么对于这样一种状态，与其定义四个变量然后在viewcontroller里面查看这四个变量的true/false值，不如直接定义一个enum然后只需查看这一个enum的值即可。</li></ul><p><img src="/../images/iOS-Apprentice/4-23.png" alt="enum code" /><br /><img src="/../images/iOS-Apprentice/4-24.png" alt="enum code" /></p><h3 id="internationalization"><a class="markdownIt-Anchor" href="#internationalization"></a> Internationalization</h3><ul><li>有时候，我们希望让我们的app被来自不同国家使用不同语言的人使用，那么我们就需要将我们的app翻译成不同的语言。我们可以在info tab里新加一种语言。</li></ul><p><img src="/../images/iOS-Apprentice/4-25.png" alt="localization add a new language" /></p><ul><li>另外，针对不同的view，我们还需要对每个view新加对应的语言文件。</li></ul><p><img src="/../images/iOS-Apprentice/4-26.png" alt="add new language file for each view" /></p><ul><li>至于那些不在storyboard里显示的语言信息，我们需要使用NSLocalizedString把所有的语言文本标记出来，再添加到strings文件中去</li></ul><p><img src="/../images/iOS-Apprentice/4-27.png" alt="localized strings" /></p><ul><li>split view contorlle for iPad: split view是大屏幕设备常用的显示模式，例如iPad和iPhone plus。它可以轻松的利用空间，显示出原本需要两个view才能显示出的内容。</li></ul><p><img src="/../images/iOS-Apprentice/4-28.png" alt="split view" /><br /><img src="/../images/iOS-Apprentice/4-29.png" alt="split view app" /></p><ul><li>config elements in storyboard based on size class: 但如果我们用之前的view size，在iPad等设备上就会显得很小，所以我们需要针对大屏幕设备进行优化。我们可以在attribute tab找到constant，点击加号来增加一个针对不同情况的尺寸，之前说到iPad设备在横置模式（landscape）下高度和宽度都是regular的，所以这里wR hR就是width Regular, height Regular。这种情况下我们将view size改为500.</li></ul><p><img src="/../images/iOS-Apprentice/4-30.png" alt="wR hR constant size" /></p><ul><li>popovers view controller: 如图所示，这是一个在一个view之上的popover view,可以用来表示一个新的menu</li></ul><p><img src="/../images/iOS-Apprentice/4-31.png" alt="popover view" /></p><ul><li>email compose sheet: 这是一个可以在app中打开的内建email系统，提前设置好标题和收件人，当用户执行这个method，直接输入email的内容，就可以发送到开发者的邮箱，前提是用户必须提前设置好email账户。</li></ul><p><img src="/../images/iOS-Apprentice/4-32.png" alt="email sheet" /></p><ul><li>beta testing (test flight): 当你完成一个app之后，可以把它发布到app store，这需要几个步骤，首先你需要提交一个build，在进入iTunes connect查看提交的app，在这里你可以分配给同一个team的其他测试者，这一步称为internal testing，如果一切都没问题，你可以submit app to app store. 如果app通过apple的审查，就可以进行external testing，将app的测试码发给任何人，他们可以通过测试码下载并测试app。</li></ul><p><img src="/../images/iOS-Apprentice/4-33.png" alt="distributing app to store" /></p><h2 id="conclusion"><a class="markdownIt-Anchor" href="#conclusion"></a> Conclusion</h2><ul><li><p>本来想用10天的时间看完这本将近1100页的书，最后用了将近20天才完成。在做最后一个app的时候又有其他的工作加进来，周末又一直有活动，才又延长了这么长时间，不过完成了就是好的，对于一个对iOS没有任何经验的人来说，的确是一本不可多得的好书，如果对自己的编程能力有信心，之前又接触过Java或者C++,直接读这本是没有任何问题的，不过如果没有任何编程经验，从另外一本Swift Apprentice开始更好，从了解swift语言基本开始，使用Xcode playground。</p></li><li><p>这四个app基本解决了我制作其他app时的所有问题，常用的storyboard object都用了，constraints，delegate, extension, custom with nib, localizition, API calling, local library, local database, simple animation, multi-threading, git, debug到最后app publish都有涉及。</p></li><li><p>不过在跟着做完所有app之后，我觉得还是需要自己制作一个app，在脱离了guide之后，靠自己的能力解决所有过程中的问题，能使学到的知识更加牢固。</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> iOS </tag>
            
            <tag> Swift </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mifare card read and write</title>
      <link href="2019/06/24/Mifare-card-read-and-write/"/>
      <url>2019/06/24/Mifare-card-read-and-write/</url>
      
        <content type="html"><![CDATA[<h2 id="mifare-card-families"><a class="markdownIt-Anchor" href="#mifare-card-families"></a> Mifare card families</h2><ul><li>Mifare卡片有很多种类，每一种卡都有不用的读写方式</li></ul><ol><li>Mifare Classic</li><li>Mifare Plus</li><li>Mifare Ultralight</li><li>Mifare DESFire</li></ol><h2 id="classic-and-mitools"><a class="markdownIt-Anchor" href="#classic-and-mitools"></a> Classic and Mitools</h2><ul><li>Mifare Classic卡是一种卡片类型，它的安全等级不是特别的高，现在已经有可以破解的软件，Mitools就是其中一种。它的界面如下</li></ul><p><img src="/../images/Mifare-card-read-and-write/1.png" alt="Mitools" /></p><ul><li>Mifare卡片总共有16个sector，每一个sector中又有4个block，其中第一个sector是用来卡片生产的过程中记录卡片信息的，一般来说我们不去动他。剩下的15个sector可以给我们用来记录我们想要的信息，其中每个sector的前3个block可以自由使用，而第4个block是用来记录两个密码Key A和Key B。中间的7为则用来记录密码的形式，一般我们也不去动他。密码层在图中用粉色表示。</li></ul><p><img src="/../images/Mifare-card-read-and-write/2.png" alt="Mitools read" /></p><ul><li>这是其中一张卡片读取后显示的信息</li><li>现在我们来看看怎么从sector7中提取出这张卡片的site code和card number</li></ul><p><img src="/../images/Mifare-card-read-and-write/3.png" alt="Mitools read" /></p><ul><li>可以看到第一个block中含有我们需要的信息，而剩下的block2，block3都是0.</li></ul><p><img src="/../images/Mifare-card-read-and-write/4.png" alt="Mitools read" /></p><ul><li><p>我们需要做的就是拿出block1中的信息，这个信息是Hexadecimal也就是16进制的，所以我们先把它变成2进制。1101 1000 1010 0011 1111 1000 0000 0000‬</p></li><li><p>因为我们用的是 <a href="https://www.identisource.net/26_bit_format_layout.cfm">26 bit format</a> 所以取前26位数</p></li><li><p>除去第一位even parity，取第二位往后8位：1011 0001，换成十进制就是177</p></li><li><p>再往后取16位：0100 0111 1111 0000. 十进制就是18416</p></li><li><p>这样我们就得到了site code: 177, card number: 18416</p></li></ul><h2 id="ultralight-card"><a class="markdownIt-Anchor" href="#ultralight-card"></a> Ultralight card</h2><ul><li>与Classic相似的是，Ultralight卡也有很多可以读写的分区，只是不叫sector，而叫做page，从第四个到第15个page是提供给使用者读写的，其他则是与卡本身相关的信息。</li><li>每一个page可以保存四个byte的信息</li><li>需要注意的是，page2的第2，3个byte保存有lock bits，可以lock其他的page，而且一旦lock，就不能在改变回unlock的状态，比如，0是unlock，1是lock，如果把第二个byte中的第4个bit从0改变为1，那么page4就会被lock，我们不再拥有write page4的权利，但是可以read，page2中的lock bit也无法从1再变回成0.</li></ul><h2 id="desfire-card"><a class="markdownIt-Anchor" href="#desfire-card"></a> DESFire card</h2><ul><li>DESFire卡的保护机制更加复杂，其中存储信息的空间叫做application，我们需要先选择正确的application和adpu command，然后伴随sw1, sw2两个parameter，最后还有加上一个expected response length</li><li>如果要write，就要再加上想要写入的data和数据长度。随着iOS13对于NFC的开放，使用iphone读写DESFire card有可能实现。</li></ul><h2 id="reference"><a class="markdownIt-Anchor" href="#reference"></a> Reference</h2><ol><li><a href="https://stackoverflow.com/questions/34198923/mifare-ultralight-lock-specific-pages">Mifare Ultralight lock bits</a></li><li><a href="https://www.eftlab.com/knowledge-base/complete-list-of-apdu-responses">APDU response code list</a></li><li><a href="https://stackoverflow.com/questions/40663460/use-apdu-commands-to-get-some-information-for-a-card">Use APDU commands to get some information for a card</a></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Mifare </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Deploy api to IIS manager</title>
      <link href="2019/06/20/Deploy-api-to-IIS-manager/"/>
      <url>2019/06/20/Deploy-api-to-IIS-manager/</url>
      
        <content type="html"><![CDATA[<h2 id="publish-api-using-visual-studio"><a class="markdownIt-Anchor" href="#publish-api-using-visual-studio"></a> Publish API using visual studio</h2><ul><li>API 完成之后，我们还需要把它deploy到client server里。所以我们先用visual studio publish它</li></ul><p><img src="/../images/Deploy-api-to-IIS-manager/1.png" alt="API publish" /></p><ul><li>go to Build-&gt;Publish API, 然后点publish，记住publis的路径</li></ul><p><img src="/../images/Deploy-api-to-IIS-manager/2.png" alt="API publish files" /></p><ul><li>这些文件就是一会要copy到client server的文件，也就是api</li><li>用remote desktop连接到client server</li></ul><p><img src="/../images/Deploy-api-to-IIS-manager/3.png" alt="remote desktop connection" /></p><ul><li>这个就是client server的IIS manager了，可以看到已经有很多API和app在列表中了</li></ul><p><img src="/../images/Deploy-api-to-IIS-manager/4.png" alt="client server IIS manager" /></p><ul><li>接下来新建一个app connection，路径上新建一个文件夹，把刚才的api文件放进去</li></ul><p><img src="/../images/Deploy-api-to-IIS-manager/5.png" alt="client server app connection" /></p><ul><li>更改一下web.config，连接到正确的client database，database name也要一致</li><li>测试一下，api有反应，那么就算deploy成功了</li></ul><p><img src="/../images/Deploy-api-to-IIS-manager/6.png" alt="Postman test" /></p>]]></content>
      
      
      
        <tags>
            
            <tag> API </tag>
            
            <tag> IIS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to use Gatling load testing tool</title>
      <link href="2019/06/18/How-to-use-Gatling-load-testing-tool/"/>
      <url>2019/06/18/How-to-use-Gatling-load-testing-tool/</url>
      
        <content type="html"><![CDATA[<h2 id="what-is-load-testing"><a class="markdownIt-Anchor" href="#what-is-load-testing"></a> What is load testing</h2><ul><li><p>load and stress testing. Load testing verifies how the system function under a heavy number of concurrent clients sending requests over a certain period of time. However, the main goal of that type of tests is to simulate the standard traffic similar to that, which may arise on production. Stress testing takes load testing and pushes your app to the limits to see how it handles an extremely heavy load.</p></li><li><p>使用一些load testing tool往往比自己写一个console application来test要有效，不单单是因为它提供很多可视化的图标可以参考在正常情况下用户的访问情况，还因为它对用户访问处理的算法也更好，可以模拟同时访问的情况而不同我们自己写平行运算。</p></li></ul><h2 id="gatling"><a class="markdownIt-Anchor" href="#gatling"></a> Gatling</h2><ul><li>这次我选的是<a href="https://gatling.io/">Gatling</a>. 一是因为它是免费的，二是因为它提供很多可视化图表</li></ul><p><img src="/../images/How-to-use-Gatling-load-testing-tool/1.png" alt="Gatling directory" /></p><ul><li>文件解压后可以看到这些文件夹，其中bin包含程序本身的运行文件。conf是程序的配置文件config，results会有每次测试的报告，一开始应该是空的。user_file是用户的测试配置文件，里面有两个文件夹，一个是resources，所有用到的关联文件类似csv file都应该放在里面。还有就是simulations，这个就是每次测试的配置文件，使用scala写的。但是也很容易懂。</li></ul><p><img src="/../images/How-to-use-Gatling-load-testing-tool/2.png" alt="simulation scala" /></p><ul><li><p>scala文件就长这个样子，需要注意的就是baseUrl，feeder file students.csv，get后面的url剩余部分，还有就是setup里面的同时访问数量。现在我们没有用到任何csv file，但是如果有用到就把他放在resources文件夹里</p></li><li><p>然后进入bin并运行gatling.bat</p></li></ul><p><img src="/../images/How-to-use-Gatling-load-testing-tool/3.png" alt="select simulation" /></p><ul><li>选择一个simulation</li></ul><p><img src="/../images/How-to-use-Gatling-load-testing-tool/4.png" alt="console output" /></p><ul><li>我们可以看到100个request都完成了</li></ul><p><img src="/../images/How-to-use-Gatling-load-testing-tool/5.png" alt="Gatling report" /></p><ul><li>图表也非常丰富</li><li>接下来我们看看如果模拟1000个不同的用户在接下来的20秒，因为不需要同时接受1000个用户，所以我们更改setup，使用rampUser</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setUp(scn.inject(rampUsers(1000) over (20 seconds)).protocols(httpProtocol))</span><br></pre></td></tr></table></figure><ul><li>运行报错，但是用console看起来太不方便了。我们更改下config让他把error log导出到一个文件中</li></ul><p><img src="/../images/How-to-use-Gatling-load-testing-tool/6.png" alt="export error log" /></p><ul><li><p>找到logback.xml,然后更改成这样，这样每次报错就会生成gatling.log</p></li><li><p>打开log发现他说：value over is not a member of io.gatling.core.Predef.RampBuilder。 说明没有识别关键词over，google一下这句话。发现是因为这个是旧版本的语法了。。。可是官方guide居然还没有更新。。。</p></li><li><p>好吧找到migration guide，发现over被替换成during了。。嗯。。真好</p></li></ul><p><img src="/../images/How-to-use-Gatling-load-testing-tool/7.png" alt="migration guide" /></p><ul><li>重新运行一下gatling.bat，现在行了，还挺像模像样的</li></ul><p><img src="/../images/How-to-use-Gatling-load-testing-tool/8.png" alt="gatling console output" /></p><ul><li>现在大部分request都小于800ms</li></ul><p><img src="/../images/How-to-use-Gatling-load-testing-tool/9.png" alt="gatling report" /></p><ul><li>细看的话，同时在线人数基本在50以上，我们用不到那么多。。。并且将近一半的request其实只用了36ms。。</li></ul><p><img src="/../images/How-to-use-Gatling-load-testing-tool/10.png" alt="gatling report 2" /></p><ul><li>ok，还有一个问题就是这个report中response time的上下限太高了，我们平均都不会超过100所以要更改一下上下限</li><li>同样，还是去gatling.conf</li></ul><p><img src="/../images/How-to-use-Gatling-load-testing-tool/11.png" alt="gatling config" /></p><ul><li>改一下lowerBound, higherBound, 记住一定要把#去掉，不然这会被算作comment而没有实际作用</li></ul><p><img src="/../images/How-to-use-Gatling-load-testing-tool/12.png" alt="gatling config guide" /></p><p><img src="/../images/How-to-use-Gatling-load-testing-tool/13.png" alt="gatling report with updated Time Bound" /></p><ul><li>可以看到现在图表中的response time变成100ms何200ms了</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Load Testing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Create a Restful api using C#</title>
      <link href="2019/06/13/Create-a-Restful-api-using-C-Sharp/"/>
      <url>2019/06/13/Create-a-Restful-api-using-C-Sharp/</url>
      
        <content type="html"><![CDATA[<h2 id="今天拿到了一个任务"><a class="markdownIt-Anchor" href="#今天拿到了一个任务"></a> 今天拿到了一个任务</h2><p><img src="/../images/Create-a-Restful-api-using-C-Sharp/1.PNG" alt="Wrike Restful api Task" /></p><ul><li>要写一个API，要求是每次学生登陆之后可以看到他的学生卡的相关信息，包括卡号，有效期，余额，还有可不可以自动充值等等。</li><li>那么我们就要先写一个stored procedure把相关信息提取出来,这些信息牵扯到4个table来自于两个database。</li></ul><p><img src="/../images/Create-a-Restful-api-using-C-Sharp/2.png" alt="Stored Procedure" /></p><ul><li>随便打一个StudentID试一下看看能不能成功运行</li></ul><p><img src="/../images/Create-a-Restful-api-using-C-Sharp/3.png" alt="Stored Procedure" /></p><ul><li>接着在Microsoft Doc tutorial可以帮助我们写一个简单的api模版。在用connectionString连接上database然后用postman测试一下</li></ul><p><img src="/../images/Create-a-Restful-api-using-C-Sharp/4.png" alt="Postman request" /></p><ul><li>这样基本上api就算写的差不多了，接下来还要把格式改成要求的样子</li></ul><p><img src="/../images/Create-a-Restful-api-using-C-Sharp/5.png" alt="Required format" /></p><ul><li>所以把它改成JSON Object这样好改一点，刚才都是直接return DataTable。</li></ul><p><img src="/../images/Create-a-Restful-api-using-C-Sharp/6.png" alt="VS Object structure" /></p><ul><li>结构基本就是这样，然后再测试一下看看能不能拿到相同的格式</li></ul><p><img src="/../images/Create-a-Restful-api-using-C-Sharp/7.png" alt="Postman test" /></p><ul><li>要求中还说到要有基本的authentication。有可能就是在function前面加上authorize attribute，等下周问问leader。另外就是要log所有的api calls。包括api整个的运行时间（response time），StudentID，现在的系统时间。用stopwatch计算出每次call所需的时间，其他的都好弄。我先把output写在debug console里了，回头再改看看要不要直接output到一个file里面。</li></ul><p><img src="/../images/Create-a-Restful-api-using-C-Sharp/8.png" alt="log in debug screen" /></p><ul><li><p>接下来就是要写一个console application来call我们的api了，毕竟不能一直用postman做测试啊。</p></li><li><p>用HttpClient去call api，已经成功了，但是有两个问题，一个是如果连续call10次的话每次用的时间都很长，用postman的时候很多时候只有20ms，但是现在有上千。。。第二个问题就是我还需要做一个simultaneously call。</p></li></ul><h2 id="一个周末过去了"><a class="markdownIt-Anchor" href="#一个周末过去了"></a> 一个周末过去了。。</h2><p><img src="/../images/Create-a-Restful-api-using-C-Sharp/9.png" alt="call api in a console app" /></p><ul><li>然后就是每次同时call10次api，这个的话我上网查了查，同样只要改await就可以.</li></ul><p><img src="/../images/Create-a-Restful-api-using-C-Sharp/10.png" alt="async await" /></p><ul><li>这个async，await的意思是：如果task前面有await，那么程序会暂停直到拿到task的返回值或task结束运行之后才会继续。而如果task前面没有await，意味着在它被创建的时候程序可以继续运行之后的代码，只要它们不依靠task的结果。所以我们可以创建10个没有await的task，最后在一起await然后output。</li></ul><p><img src="/../images/Create-a-Restful-api-using-C-Sharp/11.png" alt="simultaneous api call" /></p><ul><li>这样的话虽然每次api call的时间比一次一次call要长很多但是如果计算500次call的总时间的话平行运算还是有优势的</li></ul><p><img src="/../images/Create-a-Restful-api-using-C-Sharp/12.png" alt="simultaneous api call time" /></p><ul><li>平行运算时每次api call的时间</li></ul><p><img src="/../images/Create-a-Restful-api-using-C-Sharp/13.png" alt="simultaneous call total time" /></p><ul><li>500次call的总时间，总共算了10次，基本在8秒左右</li></ul><p><img src="/../images/Create-a-Restful-api-using-C-Sharp/14.png" alt="single api call time" /></p><ul><li>单次运算时每次api call的时间</li></ul><p><img src="/../images/Create-a-Restful-api-using-C-Sharp/15.png" alt="single api call total time" /></p><ul><li><p>单次运算时每500次的总时间，总共算了10次，基本都超过了10秒</p></li><li><p>关于在api中加入basic authenticaiton：To access the web API method, we have to pass the user credentials in the request header. If we do not pass the user credentials in the request header, then the server returns 401 (unauthorized) status code indicating the server supports Basic Authentication.</p></li><li><p>新建一个class， inhert from IHttpModule，这样就可以让api support <a href="https://docs.microsoft.com/en-us/aspnet/web-api/overview/security/basic-authentication">basic authentication</a>了。但是我们还要让console在request中加入auth header。</p></li></ul><p><img src="/../images/Create-a-Restful-api-using-C-Sharp/16.png" alt="add authentication to header" /></p><ul><li>试了一下可以运行，那么这个task到现在就基本完成了。看看leader有什么别的要求再说吧。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> API </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
